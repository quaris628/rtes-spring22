
inclass-03-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b47c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800b654  0800b654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6a8  0800b6a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6a8  0800b6a8  0001b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6b0  0800b6b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6b0  0800b6b0  0001b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6b4  0800b6b4  0001b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b6b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000090  0800b748  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0800b748  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d79  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047ca  00000000  00000000  00044e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b88  00000000  00000000  00049608  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001970  00000000  00000000  0004b190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002883b  00000000  00000000  0004cb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a26f  00000000  00000000  0007533b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e43ad  00000000  00000000  0008f5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173957  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007664  00000000  00000000  001739d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b63c 	.word	0x0800b63c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800b63c 	.word	0x0800b63c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b972 	b.w	8000524 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	4688      	mov	r8, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14b      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000266:	428a      	cmp	r2, r1
 8000268:	4615      	mov	r5, r2
 800026a:	d967      	bls.n	800033c <__udivmoddi4+0xe4>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0720 	rsb	r7, r2, #32
 8000276:	fa01 f302 	lsl.w	r3, r1, r2
 800027a:	fa20 f707 	lsr.w	r7, r0, r7
 800027e:	4095      	lsls	r5, r2
 8000280:	ea47 0803 	orr.w	r8, r7, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000290:	fa1f fc85 	uxth.w	ip, r5
 8000294:	fb0e 8817 	mls	r8, lr, r7, r8
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	fb07 f10c 	mul.w	r1, r7, ip
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18eb      	adds	r3, r5, r3
 80002a6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002aa:	f080 811b 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8118 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002b4:	3f02      	subs	r7, #2
 80002b6:	442b      	add	r3, r5
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002cc:	45a4      	cmp	ip, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	192c      	adds	r4, r5, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002da:	45a4      	cmp	ip, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002e0:	3802      	subs	r0, #2
 80002e2:	442c      	add	r4, r5
 80002e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e8:	eba4 040c 	sub.w	r4, r4, ip
 80002ec:	2700      	movs	r7, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0xbe>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80eb 	beq.w	80004de <__udivmoddi4+0x286>
 8000308:	2700      	movs	r7, #0
 800030a:	e9c6 0100 	strd	r0, r1, [r6]
 800030e:	4638      	mov	r0, r7
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f783 	clz	r7, r3
 800031a:	2f00      	cmp	r7, #0
 800031c:	d147      	bne.n	80003ae <__udivmoddi4+0x156>
 800031e:	428b      	cmp	r3, r1
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd0>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2c4>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb61 0303 	sbc.w	r3, r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e0      	beq.n	80002f8 <__udivmoddi4+0xa0>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7dd      	b.n	80002f8 <__udivmoddi4+0xa0>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xe8>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 808f 	bne.w	8000468 <__udivmoddi4+0x210>
 800034a:	1b49      	subs	r1, r1, r5
 800034c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000350:	fa1f f885 	uxth.w	r8, r5
 8000354:	2701      	movs	r7, #1
 8000356:	fbb1 fcfe 	udiv	ip, r1, lr
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb08 f10c 	mul.w	r1, r8, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x124>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4299      	cmp	r1, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 800037a:	4684      	mov	ip, r0
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fb0e 1410 	mls	r4, lr, r0, r1
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	fb08 f800 	mul.w	r8, r8, r0
 8000390:	45a0      	cmp	r8, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x14c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14a>
 800039c:	45a0      	cmp	r8, r4
 800039e:	f200 80b6 	bhi.w	800050e <__udivmoddi4+0x2b6>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 0408 	sub.w	r4, r4, r8
 80003a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ac:	e79f      	b.n	80002ee <__udivmoddi4+0x96>
 80003ae:	f1c7 0c20 	rsb	ip, r7, #32
 80003b2:	40bb      	lsls	r3, r7
 80003b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003bc:	fa01 f407 	lsl.w	r4, r1, r7
 80003c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003cc:	4325      	orrs	r5, r4
 80003ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d2:	0c2c      	lsrs	r4, r5, #16
 80003d4:	fb08 3319 	mls	r3, r8, r9, r3
 80003d8:	fa1f fa8e 	uxth.w	sl, lr
 80003dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e0:	fb09 f40a 	mul.w	r4, r9, sl
 80003e4:	429c      	cmp	r4, r3
 80003e6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ea:	fa00 f107 	lsl.w	r1, r0, r7
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1e 0303 	adds.w	r3, lr, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	f080 8087 	bcs.w	800050a <__udivmoddi4+0x2b2>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f240 8084 	bls.w	800050a <__udivmoddi4+0x2b2>
 8000402:	f1a9 0902 	sub.w	r9, r9, #2
 8000406:	4473      	add	r3, lr
 8000408:	1b1b      	subs	r3, r3, r4
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000418:	fb00 fa0a 	mul.w	sl, r0, sl
 800041c:	45a2      	cmp	sl, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1e 0404 	adds.w	r4, lr, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295
 8000428:	d26b      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 800042a:	45a2      	cmp	sl, r4
 800042c:	d969      	bls.n	8000502 <__udivmoddi4+0x2aa>
 800042e:	3802      	subs	r0, #2
 8000430:	4474      	add	r4, lr
 8000432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	454c      	cmp	r4, r9
 8000440:	46c2      	mov	sl, r8
 8000442:	464b      	mov	r3, r9
 8000444:	d354      	bcc.n	80004f0 <__udivmoddi4+0x298>
 8000446:	d051      	beq.n	80004ec <__udivmoddi4+0x294>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2c8>
 800044c:	ebb1 050a 	subs.w	r5, r1, sl
 8000450:	eb64 0403 	sbc.w	r4, r4, r3
 8000454:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000458:	40fd      	lsrs	r5, r7
 800045a:	40fc      	lsrs	r4, r7
 800045c:	ea4c 0505 	orr.w	r5, ip, r5
 8000460:	e9c6 5400 	strd	r5, r4, [r6]
 8000464:	2700      	movs	r7, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa0>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f703 	lsr.w	r7, r0, r3
 8000470:	4095      	lsls	r5, r2
 8000472:	fa01 f002 	lsl.w	r0, r1, r2
 8000476:	fa21 f303 	lsr.w	r3, r1, r3
 800047a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800047e:	4338      	orrs	r0, r7
 8000480:	0c01      	lsrs	r1, r0, #16
 8000482:	fbb3 f7fe 	udiv	r7, r3, lr
 8000486:	fa1f f885 	uxth.w	r8, r5
 800048a:	fb0e 3317 	mls	r3, lr, r7, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb07 f308 	mul.w	r3, r7, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x256>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a4:	d22f      	bcs.n	8000506 <__udivmoddi4+0x2ae>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d92d      	bls.n	8000506 <__udivmoddi4+0x2ae>
 80004aa:	3f02      	subs	r7, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1acb      	subs	r3, r1, r3
 80004b0:	b281      	uxth	r1, r0
 80004b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb00 f308 	mul.w	r3, r0, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x27e>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004cc:	d217      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d915      	bls.n	80004fe <__udivmoddi4+0x2a6>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xfe>
 80004de:	4637      	mov	r7, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e709      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e4:	4607      	mov	r7, r0
 80004e6:	e6e7      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004ec:	4541      	cmp	r1, r8
 80004ee:	d2ab      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f4:	eb69 020e 	sbc.w	r2, r9, lr
 80004f8:	3801      	subs	r0, #1
 80004fa:	4613      	mov	r3, r2
 80004fc:	e7a4      	b.n	8000448 <__udivmoddi4+0x1f0>
 80004fe:	4660      	mov	r0, ip
 8000500:	e7e9      	b.n	80004d6 <__udivmoddi4+0x27e>
 8000502:	4618      	mov	r0, r3
 8000504:	e795      	b.n	8000432 <__udivmoddi4+0x1da>
 8000506:	4667      	mov	r7, ip
 8000508:	e7d1      	b.n	80004ae <__udivmoddi4+0x256>
 800050a:	4681      	mov	r9, r0
 800050c:	e77c      	b.n	8000408 <__udivmoddi4+0x1b0>
 800050e:	3802      	subs	r0, #2
 8000510:	442c      	add	r4, r5
 8000512:	e747      	b.n	80003a4 <__udivmoddi4+0x14c>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	442b      	add	r3, r5
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x124>
 800051c:	4638      	mov	r0, r7
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xda>
 8000520:	4637      	mov	r7, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa0>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f001 fb5b 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f839 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 fb15 	bl	8000b64 <MX_GPIO_Init>
  MX_ADC1_Init();
 800053a:	f000 f8e1 	bl	8000700 <MX_ADC1_Init>
  MX_DAC_Init();
 800053e:	f000 f931 	bl	80007a4 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000542:	f000 f959 	bl	80007f8 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000546:	f000 f98f 	bl	8000868 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800054a:	f000 f9f7 	bl	800093c <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800054e:	f000 fcb1 	bl	8000eb4 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000552:	f000 fa29 	bl	80009a8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000556:	f000 fa55 	bl	8000a04 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 800055a:	f000 fa7f 	bl	8000a5c <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800055e:	f000 faad 	bl	8000abc <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000562:	f000 fad5 	bl	8000b10 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 8000566:	f00a fc65 	bl	800ae34 <MX_USB_HOST_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800056a:	f000 f8bd 	bl	80006e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart6, question, strlen(question), 10);
  uint8_t *message = "Button pressed from main\r\n";
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <main+0x74>)
 8000570:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000572:	f00a fc85 	bl	800ae80 <MX_USB_HOST_Process>
    //HAL_UART_Transmit(&huart6, answer_buffer, 2, 10);
    //HAL_UART_Transmit(&huart6, "\r\n", 2, 10);
    //if(answer_buffer[0] == 'x')
    //	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);

    if(transmit)
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <main+0x78>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f9      	beq.n	8000572 <main+0x4a>
    {

		HAL_UART_Transmit(&huart6, message, strlen(message), 10);
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff fe4a 	bl	8000218 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	230a      	movs	r3, #10
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <main+0x7c>)
 800058e:	f006 fc0a 	bl	8006da6 <HAL_UART_Transmit>
		transmit = false;
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <main+0x78>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000598:	e7eb      	b.n	8000572 <main+0x4a>
 800059a:	bf00      	nop
 800059c:	0800b670 	.word	0x0800b670
 80005a0:	200003c4 	.word	0x200003c4
 80005a4:	200003c8 	.word	0x200003c8

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0aa      	sub	sp, #168	; 0xa8
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f00a ff7e 	bl	800b4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2258      	movs	r2, #88	; 0x58
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f00a ff6f 	bl	800b4b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b40      	ldr	r3, [pc, #256]	; (80006e0 <SystemClock_Config+0x138>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	4a3f      	ldr	r2, [pc, #252]	; (80006e0 <SystemClock_Config+0x138>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemClock_Config+0x138>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <SystemClock_Config+0x13c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <SystemClock_Config+0x13c>)
 8000600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemClock_Config+0x13c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000612:	2303      	movs	r3, #3
 8000614:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000616:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800061a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000636:	230f      	movs	r3, #15
 8000638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000648:	2305      	movs	r3, #5
 800064a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000658:	4618      	mov	r0, r3
 800065a:	f005 fb65 	bl	8005d28 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000664:	f000 fcd8 	bl	8001018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fda8 	bl	80051d8 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800068e:	f000 fcc3 	bl	8001018 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000692:	f240 1371 	movw	r3, #369	; 0x171
 8000696:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000698:	2332      	movs	r3, #50	; 0x32
 800069a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 800069c:	230c      	movs	r3, #12
 800069e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80006b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006b4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80006b6:	2300      	movs	r3, #0
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80006be:	2300      	movs	r3, #0
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 ff52 	bl	8005570 <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80006d2:	f000 fca1 	bl	8001018 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	37a8      	adds	r7, #168	; 0xa8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2006      	movs	r0, #6
 80006f2:	f001 fe5a 	bl	80023aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006f6:	2006      	movs	r0, #6
 80006f8:	f001 fe73 	bl	80023e2 <HAL_NVIC_EnableIRQ>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ADC1_Init+0x98>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_ADC1_Init+0x9c>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_ADC1_Init+0x98>)
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_ADC1_Init+0xa0>)
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_ADC1_Init+0x98>)
 800074c:	2201      	movs	r2, #1
 800074e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC1_Init+0x98>)
 800075a:	2201      	movs	r2, #1
 800075c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <MX_ADC1_Init+0x98>)
 8000760:	f001 fad6 	bl	8001d10 <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 fc55 	bl	8001018 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800076e:	230a      	movs	r3, #10
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_ADC1_Init+0x98>)
 8000780:	f001 fb0a 	bl	8001d98 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800078a:	f000 fc45 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000248 	.word	0x20000248
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_DAC_Init+0x4c>)
 80007b4:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <MX_DAC_Init+0x50>)
 80007b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_DAC_Init+0x4c>)
 80007ba:	f001 fe2c 	bl	8002416 <HAL_DAC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c4:	f000 fc28 	bl	8001018 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	4619      	mov	r1, r3
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <MX_DAC_Init+0x4c>)
 80007d8:	f001 fe3f 	bl	800245a <HAL_DAC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007e2:	f000 fc19 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000290 	.word	0x20000290
 80007f4:	40007400 	.word	0x40007400

080007f8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_DFSDM1_Init+0x68>)
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <MX_DFSDM1_Init+0x6c>)
 8000800:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000804:	2201      	movs	r2, #1
 8000806:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_DFSDM1_Init+0x68>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000810:	2202      	movs	r2, #2
 8000812:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_DFSDM1_Init+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000828:	2202      	movs	r2, #2
 800082a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_DFSDM1_Init+0x68>)
 800083a:	2201      	movs	r2, #1
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_DFSDM1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_DFSDM1_Init+0x68>)
 800084c:	f001 fe52 	bl	80024f4 <HAL_DFSDM_ChannelInit>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000856:	f000 fbdf 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000104 	.word	0x20000104
 8000864:	40016020 	.word	0x40016020

08000868 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_DFSDM2_Init+0xc4>)
 800086e:	4a30      	ldr	r2, [pc, #192]	; (8000930 <MX_DFSDM2_Init+0xc8>)
 8000870:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <MX_DFSDM2_Init+0xc4>)
 8000874:	2201      	movs	r2, #1
 8000876:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_DFSDM2_Init+0xc4>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_DFSDM2_Init+0xc4>)
 8000880:	2202      	movs	r2, #2
 8000882:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_DFSDM2_Init+0xc4>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_DFSDM2_Init+0xc4>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000890:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_DFSDM2_Init+0xc4>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_DFSDM2_Init+0xc4>)
 8000898:	2202      	movs	r2, #2
 800089a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_DFSDM2_Init+0xc4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_DFSDM2_Init+0xc4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_DFSDM2_Init+0xc4>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_DFSDM2_Init+0xc4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_DFSDM2_Init+0xc4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80008ba:	481c      	ldr	r0, [pc, #112]	; (800092c <MX_DFSDM2_Init+0xc4>)
 80008bc:	f001 fe1a 	bl	80024f4 <HAL_DFSDM_ChannelInit>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80008c6:	f000 fba7 	bl	8001018 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008cc:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <MX_DFSDM2_Init+0xd0>)
 80008ce:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008de:	2202      	movs	r2, #2
 80008e0:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 8000908:	2201      	movs	r2, #1
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 800090e:	2200      	movs	r2, #0
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_DFSDM2_Init+0xcc>)
 800091a:	f001 fdeb 	bl	80024f4 <HAL_DFSDM_ChannelInit>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000924:	f000 fb78 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000210 	.word	0x20000210
 8000930:	40016420 	.word	0x40016420
 8000934:	20000148 	.word	0x20000148
 8000938:	400164e0 	.word	0x400164e0

0800093c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_FMPI2C1_Init+0x64>)
 8000944:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_FMPI2C1_Init+0x68>)
 800094a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_FMPI2C1_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_FMPI2C1_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_FMPI2C1_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000976:	4809      	ldr	r0, [pc, #36]	; (800099c <MX_FMPI2C1_Init+0x60>)
 8000978:	f001 ff10 	bl	800279c <HAL_FMPI2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 fb49 	bl	8001018 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_FMPI2C1_Init+0x60>)
 800098a:	f001 ff96 	bl	80028ba <HAL_FMPI2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fb40 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200002a4 	.word	0x200002a4
 80009a0:	40006000 	.word	0x40006000
 80009a4:	00303d5b 	.word	0x00303d5b

080009a8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_I2S2_Init+0x54>)
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <MX_I2S2_Init+0x58>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2S2_Init+0x54>)
 80009b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_I2S2_Init+0x54>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_I2S2_Init+0x54>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_I2S2_Init+0x54>)
 80009c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009cc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_I2S2_Init+0x54>)
 80009d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009d4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_I2S2_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_I2S2_Init+0x54>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_I2S2_Init+0x54>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_I2S2_Init+0x54>)
 80009ea:	f003 fe71 	bl	80046d0 <HAL_I2S_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80009f4:	f000 fb10 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000408 	.word	0x20000408
 8000a00:	40003800 	.word	0x40003800

08000a04 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <MX_QUADSPI_Init+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_QUADSPI_Init+0x50>)
 8000a40:	f004 fb08 	bl	8005054 <HAL_QSPI_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 fae5 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000450 	.word	0x20000450
 8000a58:	a0001000 	.word	0xa0001000

08000a5c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_SDIO_SD_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000a8c:	f005 fb8e 	bl	80061ac <HAL_SD_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000a96:	f000 fabf 	bl	8001018 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_SDIO_SD_Init+0x58>)
 8000aa0:	f005 fdb8 	bl	8006614 <HAL_SD_ConfigWideBusOperation>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 fab5 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000340 	.word	0x20000340
 8000ab8:	40012c00 	.word	0x40012c00

08000abc <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_UART10_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_UART10_Init+0x4c>)
 8000af4:	f006 f90a 	bl	8006d0c <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000afe:	f000 fa8b 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000180 	.word	0x20000180
 8000b0c:	40011c00 	.word	0x40011c00

08000b10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <MX_USART6_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART6_UART_Init+0x4c>)
 8000b48:	f006 f8e0 	bl	8006d0c <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 fa61 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200003c8 	.word	0x200003c8
 8000b60:	40011400 	.word	0x40011400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	4bb0      	ldr	r3, [pc, #704]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4aaf      	ldr	r2, [pc, #700]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4bad      	ldr	r3, [pc, #692]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
 8000b9a:	4ba9      	ldr	r3, [pc, #676]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4aa8      	ldr	r2, [pc, #672]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4ba6      	ldr	r3, [pc, #664]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4ba2      	ldr	r3, [pc, #648]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4aa1      	ldr	r2, [pc, #644]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bbc:	f043 0320 	orr.w	r3, r3, #32
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b9f      	ldr	r3, [pc, #636]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b9b      	ldr	r3, [pc, #620]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a9a      	ldr	r2, [pc, #616]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b98      	ldr	r3, [pc, #608]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b94      	ldr	r3, [pc, #592]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a93      	ldr	r2, [pc, #588]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b91      	ldr	r3, [pc, #580]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b8d      	ldr	r3, [pc, #564]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a8c      	ldr	r2, [pc, #560]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b8a      	ldr	r3, [pc, #552]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b86      	ldr	r3, [pc, #536]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a85      	ldr	r2, [pc, #532]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b83      	ldr	r3, [pc, #524]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b7f      	ldr	r3, [pc, #508]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a7e      	ldr	r2, [pc, #504]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c48:	f043 0308 	orr.w	r3, r3, #8
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b7c      	ldr	r3, [pc, #496]	; (8000e40 <MX_GPIO_Init+0x2dc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2138      	movs	r1, #56	; 0x38
 8000c5e:	4879      	ldr	r0, [pc, #484]	; (8000e44 <MX_GPIO_Init+0x2e0>)
 8000c60:	f002 f808 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2120      	movs	r1, #32
 8000c68:	4877      	ldr	r0, [pc, #476]	; (8000e48 <MX_GPIO_Init+0x2e4>)
 8000c6a:	f002 f803 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c74:	4875      	ldr	r0, [pc, #468]	; (8000e4c <MX_GPIO_Init+0x2e8>)
 8000c76:	f001 fffd 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000c80:	4873      	ldr	r0, [pc, #460]	; (8000e50 <MX_GPIO_Init+0x2ec>)
 8000c82:	f001 fff7 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000c86:	2338      	movs	r3, #56	; 0x38
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4869      	ldr	r0, [pc, #420]	; (8000e44 <MX_GPIO_Init+0x2e0>)
 8000c9e:	f001 fe57 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4861      	ldr	r0, [pc, #388]	; (8000e44 <MX_GPIO_Init+0x2e0>)
 8000cbe:	f001 fe47 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	485d      	ldr	r0, [pc, #372]	; (8000e54 <MX_GPIO_Init+0x2f0>)
 8000ce0:	f001 fe36 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce8:	4b5b      	ldr	r3, [pc, #364]	; (8000e58 <MX_GPIO_Init+0x2f4>)
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4854      	ldr	r0, [pc, #336]	; (8000e48 <MX_GPIO_Init+0x2e4>)
 8000cf8:	f001 fe2a 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d00:	4b55      	ldr	r3, [pc, #340]	; (8000e58 <MX_GPIO_Init+0x2f4>)
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4853      	ldr	r0, [pc, #332]	; (8000e5c <MX_GPIO_Init+0x2f8>)
 8000d10:	f001 fe1e 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d14:	2320      	movs	r3, #32
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4847      	ldr	r0, [pc, #284]	; (8000e48 <MX_GPIO_Init+0x2e4>)
 8000d2c:	f001 fe10 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d30:	2301      	movs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d40:	2302      	movs	r3, #2
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4840      	ldr	r0, [pc, #256]	; (8000e4c <MX_GPIO_Init+0x2e8>)
 8000d4c:	f001 fe00 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <MX_GPIO_Init+0x2f4>)
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	483b      	ldr	r0, [pc, #236]	; (8000e54 <MX_GPIO_Init+0x2f0>)
 8000d66:	f001 fdf3 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4831      	ldr	r0, [pc, #196]	; (8000e4c <MX_GPIO_Init+0x2e8>)
 8000d88:	f001 fde2 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	4828      	ldr	r0, [pc, #160]	; (8000e4c <MX_GPIO_Init+0x2e8>)
 8000daa:	f001 fdd1 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000dae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4821      	ldr	r0, [pc, #132]	; (8000e4c <MX_GPIO_Init+0x2e8>)
 8000dc8:	f001 fdc2 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000dcc:	f248 0380 	movw	r3, #32896	; 0x8080
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_GPIO_Init+0x2f4>)
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <MX_GPIO_Init+0x2ec>)
 8000de2:	f001 fdb5 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000de6:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <MX_GPIO_Init+0x2ec>)
 8000e00:	f001 fda6 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e16:	2301      	movs	r3, #1
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480e      	ldr	r0, [pc, #56]	; (8000e5c <MX_GPIO_Init+0x2f8>)
 8000e22:	f001 fd95 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e26:	2330      	movs	r3, #48	; 0x30
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e36:	2306      	movs	r3, #6
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	e00f      	b.n	8000e60 <MX_GPIO_Init+0x2fc>
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020400 	.word	0x40020400
 8000e50:	40021800 	.word	0x40021800
 8000e54:	40021400 	.word	0x40021400
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	4619      	mov	r1, r3
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <MX_GPIO_Init+0x348>)
 8000e64:	f001 fd74 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_GPIO_Init+0x34c>)
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_GPIO_Init+0x348>)
 8000e7c:	f001 fd68 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e92:	2302      	movs	r3, #2
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_GPIO_Init+0x348>)
 8000e9e:	f001 fd57 	bl	8002950 <HAL_GPIO_Init>

}
 8000ea2:	bf00      	nop
 8000ea4:	3738      	adds	r7, #56	; 0x38
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	10110000 	.word	0x10110000

08000eb4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <MX_FSMC_Init+0x158>)
 8000ece:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ed2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ed4:	4b4d      	ldr	r3, [pc, #308]	; (800100c <MX_FSMC_Init+0x158>)
 8000ed6:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <MX_FSMC_Init+0x15c>)
 8000ed8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <MX_FSMC_Init+0x158>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ee0:	4b4a      	ldr	r3, [pc, #296]	; (800100c <MX_FSMC_Init+0x158>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <MX_FSMC_Init+0x158>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <MX_FSMC_Init+0x158>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ef2:	4b46      	ldr	r3, [pc, #280]	; (800100c <MX_FSMC_Init+0x158>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <MX_FSMC_Init+0x158>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <MX_FSMC_Init+0x158>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000f04:	4b41      	ldr	r3, [pc, #260]	; (800100c <MX_FSMC_Init+0x158>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <MX_FSMC_Init+0x158>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f10:	4b3e      	ldr	r3, [pc, #248]	; (800100c <MX_FSMC_Init+0x158>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <MX_FSMC_Init+0x158>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f1c:	4b3b      	ldr	r3, [pc, #236]	; (800100c <MX_FSMC_Init+0x158>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <MX_FSMC_Init+0x158>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <MX_FSMC_Init+0x158>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f2e:	4b37      	ldr	r3, [pc, #220]	; (800100c <MX_FSMC_Init+0x158>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f34:	230f      	movs	r3, #15
 8000f36:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f3c:	23ff      	movs	r3, #255	; 0xff
 8000f3e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f40:	230f      	movs	r3, #15
 8000f42:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f44:	2310      	movs	r3, #16
 8000f46:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f48:	2311      	movs	r3, #17
 8000f4a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	482d      	ldr	r0, [pc, #180]	; (800100c <MX_FSMC_Init+0x158>)
 8000f58:	f005 fe94 	bl	8006c84 <HAL_SRAM_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000f62:	f000 f859 	bl	8001018 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f68:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f6c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f70:	4a27      	ldr	r2, [pc, #156]	; (8001010 <MX_FSMC_Init+0x15c>)
 8000f72:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f76:	2204      	movs	r2, #4
 8000f78:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_FSMC_Init+0x160>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_FSMC_Init+0x160>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000fe4:	2311      	movs	r3, #17
 8000fe6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <MX_FSMC_Init+0x160>)
 8000ff4:	f005 fe46 	bl	8006c84 <HAL_SRAM_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8000ffe:	f000 f80b 	bl	8001018 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001c0 	.word	0x200001c0
 8001010:	a0000104 	.word	0xa0000104
 8001014:	200002f0 	.word	0x200002f0

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_MspInit+0x4c>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103c:	6453      	str	r3, [r2, #68]	; 0x44
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	603b      	str	r3, [r7, #0]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_MspInit+0x4c>)
 8001054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a31      	ldr	r2, [pc, #196]	; (800115c <HAL_ADC_MspInit+0xe4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d15b      	bne.n	8001152 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_ADC_MspInit+0xe8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800110a:	2311      	movs	r3, #17
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4811      	ldr	r0, [pc, #68]	; (8001164 <HAL_ADC_MspInit+0xec>)
 800111e:	f001 fc17 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001122:	2326      	movs	r3, #38	; 0x26
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <HAL_ADC_MspInit+0xf0>)
 8001136:	f001 fc0b 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <HAL_ADC_MspInit+0xf4>)
 800114e:	f001 fbff 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3730      	adds	r7, #48	; 0x30
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40012000 	.word	0x40012000
 8001160:	40023800 	.word	0x40023800
 8001164:	40020800 	.word	0x40020800
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400

08001170 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_DAC_MspInit+0x7c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d127      	bne.n	80011e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 800119c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HAL_DAC_MspInit+0x80>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <HAL_DAC_MspInit+0x84>)
 80011de:	f001 fbb7 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40007400 	.word	0x40007400
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a77      	ldr	r2, [pc, #476]	; (80013f4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00e      	beq.n	8001238 <HAL_DFSDM_ChannelMspInit+0x40>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a76      	ldr	r2, [pc, #472]	; (80013f8 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d009      	beq.n	8001238 <HAL_DFSDM_ChannelMspInit+0x40>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a74      	ldr	r2, [pc, #464]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x204>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d004      	beq.n	8001238 <HAL_DFSDM_ChannelMspInit+0x40>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a73      	ldr	r2, [pc, #460]	; (8001400 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d154      	bne.n	80012e2 <HAL_DFSDM_ChannelMspInit+0xea>
 8001238:	4b72      	ldr	r3, [pc, #456]	; (8001404 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d150      	bne.n	80012e2 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	4b70      	ldr	r3, [pc, #448]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	4a6f      	ldr	r2, [pc, #444]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800124a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800124e:	6453      	str	r3, [r2, #68]	; 0x44
 8001250:	4b6d      	ldr	r3, [pc, #436]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	4b69      	ldr	r3, [pc, #420]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a68      	ldr	r2, [pc, #416]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b66      	ldr	r3, [pc, #408]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	4b62      	ldr	r3, [pc, #392]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a61      	ldr	r2, [pc, #388]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012a6:	2306      	movs	r3, #6
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4856      	ldr	r0, [pc, #344]	; (800140c <HAL_DFSDM_ChannelMspInit+0x214>)
 80012b2:	f001 fb4d 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012c6:	2306      	movs	r3, #6
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	4619      	mov	r1, r3
 80012d0:	484f      	ldr	r0, [pc, #316]	; (8001410 <HAL_DFSDM_ChannelMspInit+0x218>)
 80012d2:	f001 fb3d 	bl	8002950 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80012d6:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80012de:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80012e0:	e084      	b.n	80013ec <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a43      	ldr	r2, [pc, #268]	; (80013f4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d07f      	beq.n	80013ec <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a41      	ldr	r2, [pc, #260]	; (80013f8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d07a      	beq.n	80013ec <HAL_DFSDM_ChannelMspInit+0x1f4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <HAL_DFSDM_ChannelMspInit+0x204>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d075      	beq.n	80013ec <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a3e      	ldr	r2, [pc, #248]	; (8001400 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d070      	beq.n	80013ec <HAL_DFSDM_ChannelMspInit+0x1f4>
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d16c      	bne.n	80013ec <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	4b3c      	ldr	r3, [pc, #240]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a3b      	ldr	r2, [pc, #236]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800131c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001392:	2307      	movs	r3, #7
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	4619      	mov	r1, r3
 800139c:	481b      	ldr	r0, [pc, #108]	; (800140c <HAL_DFSDM_ChannelMspInit+0x214>)
 800139e:	f001 fad7 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80013a2:	2304      	movs	r3, #4
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80013b2:	2303      	movs	r3, #3
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4814      	ldr	r0, [pc, #80]	; (8001410 <HAL_DFSDM_ChannelMspInit+0x218>)
 80013be:	f001 fac7 	bl	8002950 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80013d2:	2306      	movs	r3, #6
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	480e      	ldr	r0, [pc, #56]	; (8001418 <HAL_DFSDM_ChannelMspInit+0x220>)
 80013de:	f001 fab7 	bl	8002950 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40016000 	.word	0x40016000
 80013f8:	40016020 	.word	0x40016020
 80013fc:	40016040 	.word	0x40016040
 8001400:	40016060 	.word	0x40016060
 8001404:	200000ac 	.word	0x200000ac
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020c00 	.word	0x40020c00
 8001414:	200000b0 	.word	0x200000b0
 8001418:	40020400 	.word	0x40020400

0800141c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_FMPI2C_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12b      	bne.n	8001496 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_FMPI2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_FMPI2C_MspInit+0x88>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_FMPI2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145e:	2312      	movs	r3, #18
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001462:	2301      	movs	r3, #1
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800146a:	2304      	movs	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_FMPI2C_MspInit+0x8c>)
 8001476:	f001 fa6b 	bl	8002950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_FMPI2C_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_FMPI2C_MspInit+0x88>)
 8001484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_FMPI2C_MspInit+0x88>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40006000 	.word	0x40006000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020800 	.word	0x40020800

080014ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	; (8001608 <HAL_I2S_MspInit+0x15c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f040 8097 	bne.w	80015fe <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	4b4d      	ldr	r3, [pc, #308]	; (800160c <HAL_I2S_MspInit+0x160>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a4c      	ldr	r2, [pc, #304]	; (800160c <HAL_I2S_MspInit+0x160>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_I2S_MspInit+0x160>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_I2S_MspInit+0x160>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a45      	ldr	r2, [pc, #276]	; (800160c <HAL_I2S_MspInit+0x160>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_I2S_MspInit+0x160>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_I2S_MspInit+0x160>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a3e      	ldr	r2, [pc, #248]	; (800160c <HAL_I2S_MspInit+0x160>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <HAL_I2S_MspInit+0x160>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_I2S_MspInit+0x160>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a37      	ldr	r2, [pc, #220]	; (800160c <HAL_I2S_MspInit+0x160>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b35      	ldr	r3, [pc, #212]	; (800160c <HAL_I2S_MspInit+0x160>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_I2S_MspInit+0x160>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_I2S_MspInit+0x160>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_I2S_MspInit+0x160>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800155c:	2304      	movs	r3, #4
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800156c:	2306      	movs	r3, #6
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4826      	ldr	r0, [pc, #152]	; (8001610 <HAL_I2S_MspInit+0x164>)
 8001578:	f001 f9ea 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800157c:	2308      	movs	r3, #8
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800158c:	2305      	movs	r3, #5
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	481e      	ldr	r0, [pc, #120]	; (8001610 <HAL_I2S_MspInit+0x164>)
 8001598:	f001 f9da 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800159c:	2308      	movs	r3, #8
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ac:	2305      	movs	r3, #5
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <HAL_I2S_MspInit+0x168>)
 80015b8:	f001 f9ca 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80015bc:	2308      	movs	r3, #8
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015cc:	2305      	movs	r3, #5
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4810      	ldr	r0, [pc, #64]	; (8001618 <HAL_I2S_MspInit+0x16c>)
 80015d8:	f001 f9ba 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80015dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ee:	2305      	movs	r3, #5
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <HAL_I2S_MspInit+0x170>)
 80015fa:	f001 f9a9 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	3730      	adds	r7, #48	; 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40003800 	.word	0x40003800
 800160c:	40023800 	.word	0x40023800
 8001610:	40020800 	.word	0x40020800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40020400 	.word	0x40020400

08001620 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a56      	ldr	r2, [pc, #344]	; (8001798 <HAL_QSPI_MspInit+0x178>)
 800163e:	4293      	cmp	r3, r2
 8001640:	f040 80a6 	bne.w	8001790 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	4b54      	ldr	r3, [pc, #336]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 800164a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164c:	4a53      	ldr	r2, [pc, #332]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6393      	str	r3, [r2, #56]	; 0x38
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a4c      	ldr	r2, [pc, #304]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 8001686:	f043 0320 	orr.w	r3, r3, #32
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0320 	and.w	r3, r3, #32
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a3e      	ldr	r2, [pc, #248]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b3c      	ldr	r3, [pc, #240]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4a37      	ldr	r2, [pc, #220]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_QSPI_MspInit+0x17c>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80016ec:	2304      	movs	r3, #4
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80016fc:	2309      	movs	r3, #9
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <HAL_QSPI_MspInit+0x180>)
 8001708:	f001 f922 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800170c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800171e:	230a      	movs	r3, #10
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001726:	4619      	mov	r1, r3
 8001728:	481e      	ldr	r0, [pc, #120]	; (80017a4 <HAL_QSPI_MspInit+0x184>)
 800172a:	f001 f911 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800172e:	2304      	movs	r3, #4
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800173e:	2309      	movs	r3, #9
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <HAL_QSPI_MspInit+0x188>)
 800174a:	f001 f901 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001760:	2309      	movs	r3, #9
 8001762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	4810      	ldr	r0, [pc, #64]	; (80017ac <HAL_QSPI_MspInit+0x18c>)
 800176c:	f001 f8f0 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001770:	2340      	movs	r3, #64	; 0x40
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001780:	230a      	movs	r3, #10
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <HAL_QSPI_MspInit+0x190>)
 800178c:	f001 f8e0 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	; 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	a0001000 	.word	0xa0001000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40021400 	.word	0x40021400
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021800 	.word	0x40021800

080017b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a28      	ldr	r2, [pc, #160]	; (8001874 <HAL_SD_MspInit+0xc0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d14a      	bne.n	800186c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_SD_MspInit+0xc4>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_SD_MspInit+0xc4>)
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_SD_MspInit+0xc4>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_SD_MspInit+0xc4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_SD_MspInit+0xc4>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_SD_MspInit+0xc4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_SD_MspInit+0xc4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_SD_MspInit+0xc4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_SD_MspInit+0xc4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800182a:	2340      	movs	r3, #64	; 0x40
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800183a:	230c      	movs	r3, #12
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <HAL_SD_MspInit+0xc8>)
 8001846:	f001 f883 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 800184a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800184e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800185c:	230c      	movs	r3, #12
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <HAL_SD_MspInit+0xcc>)
 8001868:	f001 f872 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40012c00 	.word	0x40012c00
 8001878:	40023800 	.word	0x40023800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020800 	.word	0x40020800

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 031c 	add.w	r3, r7, #28
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a33      	ldr	r2, [pc, #204]	; (8001970 <HAL_UART_MspInit+0xec>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12d      	bne.n	8001902 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a31      	ldr	r2, [pc, #196]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80018de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80018f0:	230b      	movs	r3, #11
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	481f      	ldr	r0, [pc, #124]	; (8001978 <HAL_UART_MspInit+0xf4>)
 80018fc:	f001 f828 	bl	8002950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001900:	e031      	b.n	8001966 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_UART_MspInit+0xf8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d12c      	bne.n	8001966 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_UART_MspInit+0xf0>)
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_UART_MspInit+0xf0>)
 8001916:	f043 0320 	orr.w	r3, r3, #32
 800191a:	6453      	str	r3, [r2, #68]	; 0x44
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_UART_MspInit+0xf0>)
 800191e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_UART_MspInit+0xf0>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_UART_MspInit+0xf0>)
 8001932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_UART_MspInit+0xf0>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001944:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001956:	2308      	movs	r3, #8
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001962:	f000 fff5 	bl	8002950 <HAL_GPIO_Init>
}
 8001966:	bf00      	nop
 8001968:	3730      	adds	r7, #48	; 0x30
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40011c00 	.word	0x40011c00
 8001974:	40023800 	.word	0x40023800
 8001978:	40021800 	.word	0x40021800
 800197c:	40011400 	.word	0x40011400

08001980 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_FSMC_MspInit+0xc8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d151      	bne.n	8001a40 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <HAL_FSMC_MspInit+0xc8>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_FSMC_MspInit+0xcc>)
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <HAL_FSMC_MspInit+0xcc>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6393      	str	r3, [r2, #56]	; 0x38
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_FSMC_MspInit+0xcc>)
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 80019be:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80019c2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019d0:	230c      	movs	r3, #12
 80019d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	481d      	ldr	r0, [pc, #116]	; (8001a50 <HAL_FSMC_MspInit+0xd0>)
 80019da:	f000 ffb9 	bl	8002950 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80019de:	f240 433f 	movw	r3, #1087	; 0x43f
 80019e2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019f0:	230c      	movs	r3, #12
 80019f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4816      	ldr	r0, [pc, #88]	; (8001a54 <HAL_FSMC_MspInit+0xd4>)
 80019fa:	f000 ffa9 	bl	8002950 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80019fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a02:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a10:	230c      	movs	r3, #12
 8001a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <HAL_FSMC_MspInit+0xd8>)
 8001a1a:	f000 ff99 	bl	8002950 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001a1e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001a22:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a30:	230c      	movs	r3, #12
 8001a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4808      	ldr	r0, [pc, #32]	; (8001a5c <HAL_FSMC_MspInit+0xdc>)
 8001a3a:	f000 ff89 	bl	8002950 <HAL_GPIO_Init>
 8001a3e:	e000      	b.n	8001a42 <HAL_FSMC_MspInit+0xc2>
    return;
 8001a40:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200000b4 	.word	0x200000b4
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40020c00 	.word	0x40020c00

08001a60 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001a68:	f7ff ff8a 	bl	8001980 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f8e0 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	transmit = true;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <EXTI0_IRQHandler+0x14>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f001 f8e4 	bl	8002ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200003c4 	.word	0x200003c4

08001ae8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <OTG_FS_IRQHandler+0x10>)
 8001aee:	f001 fb8d 	bl	800320c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000878 	.word	0x20000878

08001afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <_sbrk+0x5c>)
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <_sbrk+0x60>)
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <_sbrk+0x64>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <_sbrk+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d207      	bcs.n	8001b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b2c:	f009 fc8a 	bl	800b444 <__errno>
 8001b30:	4602      	mov	r2, r0
 8001b32:	230c      	movs	r3, #12
 8001b34:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	e009      	b.n	8001b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <_sbrk+0x64>)
 8001b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20050000 	.word	0x20050000
 8001b5c:	00000400 	.word	0x00000400
 8001b60:	200000b8 	.word	0x200000b8
 8001b64:	20000b40 	.word	0x20000b40

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <SystemInit+0x28>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <SystemInit+0x28>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SystemInit+0x28>)
 8001b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b82:	609a      	str	r2, [r3, #8]
#endif
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001b98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b9a:	e003      	b.n	8001ba4 <LoopCopyDataInit>

08001b9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ba0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ba2:	3104      	adds	r1, #4

08001ba4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001baa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bac:	d3f6      	bcc.n	8001b9c <CopyDataInit>
  ldr  r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bb0:	e002      	b.n	8001bb8 <LoopFillZerobss>

08001bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001bb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb4:	f842 3b04 	str.w	r3, [r2], #4

08001bb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bbc:	d3f9      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff ffd3 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f009 fc45 	bl	800b450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7fe fcaf 	bl	8000528 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bcc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001bd0:	0800b6b8 	.word	0x0800b6b8
  ldr  r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001bdc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001be0:	20000b40 	.word	0x20000b40

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 fbbf 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fa04 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fbd7 	bl	80023fe <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 fb9f 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x20>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <HAL_IncTick+0x24>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000049c 	.word	0x2000049c

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000049c 	.word	0x2000049c

08001ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd4:	f7ff ffee 	bl	8001cb4 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d005      	beq.n	8001cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_Delay+0x40>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf2:	bf00      	nop
 8001cf4:	f7ff ffde 	bl	8001cb4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d8f7      	bhi.n	8001cf4 <HAL_Delay+0x28>
  {
  }
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e033      	b.n	8001d8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff f9a2 	bl	8001078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d56:	f023 0302 	bic.w	r3, r3, #2
 8001d5a:	f043 0202 	orr.w	r2, r3, #2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f94a 	bl	8001ffc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d7e:	e001      	b.n	8001d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x1c>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e113      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x244>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	d925      	bls.n	8001e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68d9      	ldr	r1, [r3, #12]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b1e      	subs	r3, #30
 8001dda:	2207      	movs	r2, #7
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68d9      	ldr	r1, [r3, #12]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4403      	add	r3, r0
 8001e02:	3b1e      	subs	r3, #30
 8001e04:	409a      	lsls	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	e022      	b.n	8001e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	2207      	movs	r2, #7
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	400a      	ands	r2, r1
 8001e32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4403      	add	r3, r0
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d824      	bhi.n	8001ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b05      	subs	r3, #5
 8001e70:	221f      	movs	r2, #31
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b05      	subs	r3, #5
 8001e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea6:	e04c      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b23      	subs	r3, #35	; 0x23
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	400a      	ands	r2, r1
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b23      	subs	r3, #35	; 0x23
 8001eec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ef8:	e023      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b41      	subs	r3, #65	; 0x41
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	400a      	ands	r2, r1
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3b41      	subs	r3, #65	; 0x41
 8001f36:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_ADC_ConfigChannel+0x250>)
 8001f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <HAL_ADC_ConfigChannel+0x254>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d10f      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1d8>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b12      	cmp	r3, #18
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_ADC_ConfigChannel+0x254>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d12b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x23a>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_ADC_ConfigChannel+0x258>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x1f4>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d122      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_ADC_ConfigChannel+0x258>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_ADC_ConfigChannel+0x25c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a11      	ldr	r2, [pc, #68]	; (8001ff8 <HAL_ADC_ConfigChannel+0x260>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9a      	lsrs	r2, r3, #18
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f9      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	40012000 	.word	0x40012000
 8001ff0:	10000012 	.word	0x10000012
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002004:	4b79      	ldr	r3, [pc, #484]	; (80021ec <ADC_Init+0x1f0>)
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	021a      	lsls	r2, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <ADC_Init+0x1f4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d022      	beq.n	80020da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6899      	ldr	r1, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	e00f      	b.n	80020fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0202 	bic.w	r2, r2, #2
 8002108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6899      	ldr	r1, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
 8002114:	005a      	lsls	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	3b01      	subs	r3, #1
 8002154:	035a      	lsls	r2, r3, #13
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	e007      	b.n	8002170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	3b01      	subs	r3, #1
 800218c:	051a      	lsls	r2, r3, #20
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b2:	025a      	lsls	r2, r3, #9
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6899      	ldr	r1, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	029a      	lsls	r2, r3, #10
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40012300 	.word	0x40012300
 80021f0:	0f000001 	.word	0x0f000001

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff29 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff3e 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff8e 	bl	80022e8 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5d 	bl	8002294 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff31 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa2 	bl	8002350 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e014      	b.n	8002452 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	791b      	ldrb	r3, [r3, #4]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7fe fe99 	bl	8001170 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2202      	movs	r2, #2
 8002442:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800245a:	b480      	push	{r7}
 800245c:	b087      	sub	sp, #28
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	795b      	ldrb	r3, [r3, #5]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_DAC_ConfigChannel+0x20>
 8002476:	2302      	movs	r3, #2
 8002478:	e036      	b.n	80024e8 <HAL_DAC_ConfigChannel+0x8e>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2202      	movs	r2, #2
 8002484:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800248e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	22c0      	movs	r2, #192	; 0xc0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43da      	mvns	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	400a      	ands	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e0cf      	b.n	80026a6 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_DFSDM_ChannelInit+0x1bc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00e      	beq.n	800252e <HAL_DFSDM_ChannelInit+0x3a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <HAL_DFSDM_ChannelInit+0x1c0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_DFSDM_ChannelInit+0x3a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a66      	ldr	r2, [pc, #408]	; (80026b8 <HAL_DFSDM_ChannelInit+0x1c4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_DFSDM_ChannelInit+0x3a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a64      	ldr	r2, [pc, #400]	; (80026bc <HAL_DFSDM_ChannelInit+0x1c8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d106      	bne.n	800253c <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800252e:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <HAL_DFSDM_ChannelInit+0x1cc>)
 8002530:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8002532:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002534:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_DFSDM_ChannelInit+0x1bc>)
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	e005      	b.n	8002548 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 800253c:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <HAL_DFSDM_ChannelInit+0x1d4>)
 800253e:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8002540:	4b62      	ldr	r3, [pc, #392]	; (80026cc <HAL_DFSDM_ChannelInit+0x1d8>)
 8002542:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8002544:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <HAL_DFSDM_ChannelInit+0x1dc>)
 8002546:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 f8c1 	bl	80026d4 <DFSDM_GetChannelFromInstance>
 8002552:	4603      	mov	r3, r0
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4413      	add	r3, r2
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0a0      	b.n	80026a6 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7fe fe47 	bl	80011f8 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d125      	bne.n	80025c8 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	791b      	ldrb	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d108      	bne.n	80025bc <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80025d6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025e6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 80025ec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 020f 	bic.w	r2, r2, #15
 8002604:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800262c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6899      	ldr	r1, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 0207 	and.w	r2, r2, #7
 8002658:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002684:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f81e 	bl	80026d4 <DFSDM_GetChannelFromInstance>
 8002698:	4603      	mov	r3, r0
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40016000 	.word	0x40016000
 80026b4:	40016020 	.word	0x40016020
 80026b8:	40016040 	.word	0x40016040
 80026bc:	40016060 	.word	0x40016060
 80026c0:	200000bc 	.word	0x200000bc
 80026c4:	200000c0 	.word	0x200000c0
 80026c8:	200000d0 	.word	0x200000d0
 80026cc:	200000d4 	.word	0x200000d4
 80026d0:	40016400 	.word	0x40016400

080026d4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <DFSDM_GetChannelFromInstance+0x9c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <DFSDM_GetChannelFromInstance+0x18>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a23      	ldr	r2, [pc, #140]	; (8002774 <DFSDM_GetChannelFromInstance+0xa0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d102      	bne.n	80026f2 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e037      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <DFSDM_GetChannelFromInstance+0xa4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <DFSDM_GetChannelFromInstance+0x2e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	; (800277c <DFSDM_GetChannelFromInstance+0xa8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d102      	bne.n	8002708 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8002702:	2301      	movs	r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e02c      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <DFSDM_GetChannelFromInstance+0xac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <DFSDM_GetChannelFromInstance+0x44>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <DFSDM_GetChannelFromInstance+0xb0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d102      	bne.n	800271e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002718:	2302      	movs	r3, #2
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e021      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <DFSDM_GetChannelFromInstance+0xb4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <DFSDM_GetChannelFromInstance+0x5a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <DFSDM_GetChannelFromInstance+0xb8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d102      	bne.n	8002734 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800272e:	2303      	movs	r3, #3
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e016      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a16      	ldr	r2, [pc, #88]	; (8002790 <DFSDM_GetChannelFromInstance+0xbc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d102      	bne.n	8002742 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 800273c:	2304      	movs	r3, #4
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e00f      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <DFSDM_GetChannelFromInstance+0xc0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d102      	bne.n	8002750 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800274a:	2305      	movs	r3, #5
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e008      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a11      	ldr	r2, [pc, #68]	; (8002798 <DFSDM_GetChannelFromInstance+0xc4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d102      	bne.n	800275e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8002758:	2306      	movs	r3, #6
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e001      	b.n	8002762 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800275e:	2307      	movs	r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40016000 	.word	0x40016000
 8002774:	40016400 	.word	0x40016400
 8002778:	40016020 	.word	0x40016020
 800277c:	40016420 	.word	0x40016420
 8002780:	40016040 	.word	0x40016040
 8002784:	40016440 	.word	0x40016440
 8002788:	40016060 	.word	0x40016060
 800278c:	40016460 	.word	0x40016460
 8002790:	40016480 	.word	0x40016480
 8002794:	400164a0 	.word	0x400164a0
 8002798:	400164c0 	.word	0x400164c0

0800279c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e081      	b.n	80028b2 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe fe2a 	bl	800141c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fc:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e006      	b.n	8002824 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002822:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d104      	bne.n	8002836 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002834:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002848:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002858:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69d9      	ldr	r1, [r3, #28]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d138      	bne.n	8002942 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80028da:	2302      	movs	r3, #2
 80028dc:	e032      	b.n	8002944 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2224      	movs	r2, #36	; 0x24
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800290c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	e165      	b.n	8002c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800296c:	2201      	movs	r2, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	429a      	cmp	r2, r3
 8002986:	f040 8154 	bne.w	8002c32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d00b      	beq.n	80029aa <HAL_GPIO_Init+0x5a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d007      	beq.n	80029aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800299e:	2b11      	cmp	r3, #17
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b12      	cmp	r3, #18
 80029a8:	d130      	bne.n	8002a0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e0:	2201      	movs	r2, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 0201 	and.w	r2, r3, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0xfc>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b12      	cmp	r3, #18
 8002a4a:	d123      	bne.n	8002a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	08da      	lsrs	r2, r3, #3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3208      	adds	r2, #8
 8002a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	08da      	lsrs	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3208      	adds	r2, #8
 8002a8e:	69b9      	ldr	r1, [r7, #24]
 8002a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0203 	and.w	r2, r3, #3
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80ae 	beq.w	8002c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b5c      	ldr	r3, [pc, #368]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a5b      	ldr	r2, [pc, #364]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_GPIO_Init+0x2fc>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af2:	4a57      	ldr	r2, [pc, #348]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <HAL_GPIO_Init+0x304>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d025      	beq.n	8002b6a <HAL_GPIO_Init+0x21a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <HAL_GPIO_Init+0x308>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_GPIO_Init+0x216>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <HAL_GPIO_Init+0x30c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_Init+0x212>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <HAL_GPIO_Init+0x310>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_Init+0x20e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_GPIO_Init+0x314>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_Init+0x20a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_GPIO_Init+0x318>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_Init+0x206>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a48      	ldr	r2, [pc, #288]	; (8002c6c <HAL_GPIO_Init+0x31c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_Init+0x202>
 8002b4e:	2306      	movs	r3, #6
 8002b50:	e00c      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e00a      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b56:	2305      	movs	r3, #5
 8002b58:	e008      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x21c>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	69fa      	ldr	r2, [r7, #28]
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	4934      	ldr	r1, [pc, #208]	; (8002c50 <HAL_GPIO_Init+0x300>)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bae:	4a30      	ldr	r2, [pc, #192]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4013      	ands	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c02:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c2c:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_GPIO_Init+0x320>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	f67f ae96 	bls.w	800296c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c40:	bf00      	nop
 8002c42:	3724      	adds	r7, #36	; 0x24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cbe:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f806 	bl	8002cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf0:	b08f      	sub	sp, #60	; 0x3c
 8002cf2:	af0a      	add	r7, sp, #40	; 0x28
 8002cf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e054      	b.n	8002daa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f008 f8e8 	bl	800aef0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2203      	movs	r2, #3
 8002d24:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f005 faaa 	bl	8008298 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	687e      	ldr	r6, [r7, #4]
 8002d4c:	466d      	mov	r5, sp
 8002d4e:	f106 0410 	add.w	r4, r6, #16
 8002d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d62:	1d33      	adds	r3, r6, #4
 8002d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	f005 fa24 	bl	80081b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f005 faa1 	bl	80082ba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	687e      	ldr	r6, [r7, #4]
 8002d80:	466d      	mov	r5, sp
 8002d82:	f106 0410 	add.w	r4, r6, #16
 8002d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d96:	1d33      	adds	r3, r6, #4
 8002d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9a:	6838      	ldr	r0, [r7, #0]
 8002d9c:	f005 fbb4 	bl	8008508 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002db2:	b590      	push	{r4, r7, lr}
 8002db4:	b089      	sub	sp, #36	; 0x24
 8002db6:	af04      	add	r7, sp, #16
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	4608      	mov	r0, r1
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	70fb      	strb	r3, [r7, #3]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70bb      	strb	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_HCD_HC_Init+0x28>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e07f      	b.n	8002eda <HAL_HCD_HC_Init+0x128>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	440b      	add	r3, r1
 8002df0:	333d      	adds	r3, #61	; 0x3d
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	787a      	ldrb	r2, [r7, #1]
 8002e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3340      	adds	r3, #64	; 0x40
 8002e1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e1c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3339      	adds	r3, #57	; 0x39
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	333f      	adds	r3, #63	; 0x3f
 8002e42:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	78bb      	ldrb	r3, [r7, #2]
 8002e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e50:	b2d8      	uxtb	r0, r3
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333a      	adds	r3, #58	; 0x3a
 8002e60:	4602      	mov	r2, r0
 8002e62:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da0a      	bge.n	8002e82 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	333b      	adds	r3, #59	; 0x3b
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e009      	b.n	8002e96 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	333b      	adds	r3, #59	; 0x3b
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	333c      	adds	r3, #60	; 0x3c
 8002ea6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eaa:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	787c      	ldrb	r4, [r7, #1]
 8002eb2:	78ba      	ldrb	r2, [r7, #2]
 8002eb4:	78f9      	ldrb	r1, [r7, #3]
 8002eb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	f005 fc9a 	bl	8008800 <USB_HC_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}

08002ee2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_HCD_HC_Halt+0x1e>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e00f      	b.n	8002f20 <HAL_HCD_HC_Halt+0x3e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fed6 	bl	8008cc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	70fb      	strb	r3, [r7, #3]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70bb      	strb	r3, [r7, #2]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	333b      	adds	r3, #59	; 0x3b
 8002f52:	78ba      	ldrb	r2, [r7, #2]
 8002f54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333f      	adds	r3, #63	; 0x3f
 8002f66:	787a      	ldrb	r2, [r7, #1]
 8002f68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f6a:	7c3b      	ldrb	r3, [r7, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d114      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3342      	adds	r3, #66	; 0x42
 8002f80:	2203      	movs	r2, #3
 8002f82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	333d      	adds	r3, #61	; 0x3d
 8002f94:	7f3a      	ldrb	r2, [r7, #28]
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e009      	b.n	8002fae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fae:	787b      	ldrb	r3, [r7, #1]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	f200 80d6 	bhi.w	8003162 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_HCD_HC_SubmitRequest+0x94>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	0800314d 	.word	0x0800314d
 8002fc4:	08003039 	.word	0x08003039
 8002fc8:	080030c3 	.word	0x080030c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80c9 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80c5 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3351      	adds	r3, #81	; 0x51
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3351      	adds	r3, #81	; 0x51
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003020:	e0a1      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e096      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003038:	78bb      	ldrb	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d120      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	3351      	adds	r3, #81	; 0x51
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003068:	e07e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3342      	adds	r3, #66	; 0x42
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
      break;
 800307e:	e073      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3342      	adds	r3, #66	; 0x42
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e05d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3342      	adds	r3, #66	; 0x42
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e052      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3351      	adds	r3, #81	; 0x51
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f2:	e039      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	3342      	adds	r3, #66	; 0x42
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e02e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	3350      	adds	r3, #80	; 0x50
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3342      	adds	r3, #66	; 0x42
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e018      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3342      	adds	r3, #66	; 0x42
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	e002      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003166:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	; 0x44
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	8b39      	ldrh	r1, [r7, #24]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4403      	add	r3, r0
 800318c:	3348      	adds	r3, #72	; 0x48
 800318e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3339      	adds	r3, #57	; 0x39
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	f005 fc0a 	bl	8008a14 <USB_HC_StartXfer>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f005 f92d 	bl	8008482 <USB_GetMode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80ef 	bne.w	800340e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f005 f911 	bl	800845c <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80e5 	beq.w	800340c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f005 f908 	bl	800845c <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d104      	bne.n	8003262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 f8f8 	bl	800845c <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003276:	d104      	bne.n	8003282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f005 f8e8 	bl	800845c <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003296:	d104      	bne.n	80032a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f005 f8d8 	bl	800845c <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f005 f8ca 	bl	800845c <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d2:	d115      	bne.n	8003300 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f007 fe7c 	bl	800afec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f005 f9ba 	bl	8008674 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f005 f8a9 	bl	800845c <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003314:	d102      	bne.n	800331c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f001 f966 	bl	80045e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f005 f89b 	bl	800845c <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d106      	bne.n	800333e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f007 fe3f 	bl	800afb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2208      	movs	r2, #8
 800333c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f005 f88a 	bl	800845c <USB_ReadInterrupts>
 8003348:	4603      	mov	r3, r0
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003352:	d138      	bne.n	80033c6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f005 fca1 	bl	8008ca0 <USB_HC_ReadInterrupt>
 800335e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	e025      	b.n	80033b2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003390:	d106      	bne.n	80033a0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f8cf 	bl	800353c <HCD_HC_IN_IRQHandler>
 800339e:	e005      	b.n	80033ac <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fcfd 	bl	8003da6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3301      	adds	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3d4      	bcc.n	8003366 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f005 f846 	bl	800845c <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d101      	bne.n	80033de <HAL_HCD_IRQHandler+0x1d2>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_HCD_IRQHandler+0x1d4>
 80033de:	2300      	movs	r3, #0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d014      	beq.n	800340e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0210 	bic.w	r2, r2, #16
 80033f2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f001 f84b 	bl	8004490 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0210 	orr.w	r2, r2, #16
 8003408:	619a      	str	r2, [r3, #24]
 800340a:	e000      	b.n	800340e <HAL_HCD_IRQHandler+0x202>
      return;
 800340c:	bf00      	nop
    }
  }
}
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_HCD_Start+0x16>
 8003426:	2302      	movs	r3, #2
 8003428:	e013      	b.n	8003452 <HAL_HCD_Start+0x3e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f004 ff1d 	bl	8008276 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f005 f97a 	bl	800873c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_HCD_Stop+0x16>
 800346c:	2302      	movs	r3, #2
 800346e:	e00d      	b.n	800348c <HAL_HCD_Stop+0x32>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f005 fd5b 	bl	8008f38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f005 f921 	bl	80086e8 <USB_ResetPort>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	335c      	adds	r3, #92	; 0x5c
 80034cc:	781b      	ldrb	r3, [r3, #0]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	440b      	add	r3, r1
 80034f4:	334c      	adds	r3, #76	; 0x4c
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 f963 	bl	80087dc <USB_GetCurrentFrame>
 8003516:	4603      	mov	r3, r0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f005 f93e 	bl	80087ae <USB_GetHostSpeed>
 8003532:	4603      	mov	r3, r0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d119      	bne.n	80035a0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	2304      	movs	r3, #4
 800357c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	0151      	lsls	r1, r2, #5
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	440a      	add	r2, r1
 8003594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	60d3      	str	r3, [r2, #12]
 800359e:	e0ce      	b.n	800373e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b6:	d12c      	bne.n	8003612 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	461a      	mov	r2, r3
 80035c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	335d      	adds	r3, #93	; 0x5d
 80035dc:	2207      	movs	r2, #7
 80035de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fa:	f043 0302 	orr.w	r3, r3, #2
 80035fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fb59 	bl	8008cc2 <USB_HC_Halt>
 8003610:	e095      	b.n	800373e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b20      	cmp	r3, #32
 8003626:	d109      	bne.n	800363c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2320      	movs	r3, #32
 8003638:	6093      	str	r3, [r2, #8]
 800363a:	e080      	b.n	800373e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b08      	cmp	r3, #8
 8003650:	d134      	bne.n	80036bc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	440a      	add	r2, r1
 8003668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	335d      	adds	r3, #93	; 0x5d
 8003682:	2205      	movs	r2, #5
 8003684:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4413      	add	r3, r2
 800368e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003692:	461a      	mov	r2, r3
 8003694:	2310      	movs	r3, #16
 8003696:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	461a      	mov	r2, r3
 80036a6:	2308      	movs	r3, #8
 80036a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f005 fb04 	bl	8008cc2 <USB_HC_Halt>
 80036ba:	e040      	b.n	800373e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d134      	bne.n	800373e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ee:	f043 0302 	orr.w	r3, r3, #2
 80036f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f005 fadf 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	2310      	movs	r3, #16
 8003714:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	440b      	add	r3, r1
 8003724:	335d      	adds	r3, #93	; 0x5d
 8003726:	2208      	movs	r2, #8
 8003728:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003754:	d122      	bne.n	800379c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	440a      	add	r2, r1
 800376c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f005 fa9e 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	461a      	mov	r2, r3
 8003794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003798:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800379a:	e300      	b.n	8003d9e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 80fd 	bne.w	80039ae <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	440b      	add	r3, r1
 80037ca:	3348      	adds	r3, #72	; 0x48
 80037cc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	0159      	lsls	r1, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	440b      	add	r3, r1
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80037e0:	1ad1      	subs	r1, r2, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4403      	add	r3, r0
 80037f0:	334c      	adds	r3, #76	; 0x4c
 80037f2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	335d      	adds	r3, #93	; 0x5d
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	3358      	adds	r3, #88	; 0x58
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2301      	movs	r3, #1
 800382c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	333f      	adds	r3, #63	; 0x3f
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	333f      	adds	r3, #63	; 0x3f
 8003854:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003856:	2b02      	cmp	r3, #2
 8003858:	d121      	bne.n	800389e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	440a      	add	r2, r1
 8003870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003874:	f043 0302 	orr.w	r3, r3, #2
 8003878:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f005 fa1c 	bl	8008cc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003896:	461a      	mov	r2, r3
 8003898:	2310      	movs	r3, #16
 800389a:	6093      	str	r3, [r2, #8]
 800389c:	e070      	b.n	8003980 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	333f      	adds	r3, #63	; 0x3f
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d12a      	bne.n	800390a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	440b      	add	r3, r1
 80038e2:	335c      	adds	r3, #92	; 0x5c
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	b2d8      	uxtb	r0, r3
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	335c      	adds	r3, #92	; 0x5c
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	4601      	mov	r1, r0
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f007 fb80 	bl	800b008 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003908:	e03a      	b.n	8003980 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	333f      	adds	r3, #63	; 0x3f
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d12f      	bne.n	8003980 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	335c      	adds	r3, #92	; 0x5c
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	3350      	adds	r3, #80	; 0x50
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2d8      	uxtb	r0, r3
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	3350      	adds	r3, #80	; 0x50
 800395c:	4602      	mov	r2, r0
 800395e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b2d8      	uxtb	r0, r3
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	335c      	adds	r3, #92	; 0x5c
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	4601      	mov	r1, r0
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f007 fb44 	bl	800b008 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	440b      	add	r3, r1
 800398e:	3350      	adds	r3, #80	; 0x50
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2d8      	uxtb	r0, r3
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	3350      	adds	r3, #80	; 0x50
 80039a8:	4602      	mov	r2, r0
 80039aa:	701a      	strb	r2, [r3, #0]
}
 80039ac:	e1f7      	b.n	8003d9e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	f040 811a 	bne.w	8003bfa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e0:	f023 0302 	bic.w	r3, r3, #2
 80039e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	440b      	add	r3, r1
 80039f4:	335d      	adds	r3, #93	; 0x5d
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d10a      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	335c      	adds	r3, #92	; 0x5c
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e0d9      	b.n	8003bc6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	440b      	add	r3, r1
 8003a20:	335d      	adds	r3, #93	; 0x5d
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b05      	cmp	r3, #5
 8003a26:	d10a      	bne.n	8003a3e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	335c      	adds	r3, #92	; 0x5c
 8003a38:	2205      	movs	r2, #5
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e0c3      	b.n	8003bc6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	335d      	adds	r3, #93	; 0x5d
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d00a      	beq.n	8003a6a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	335d      	adds	r3, #93	; 0x5d
 8003a64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d156      	bne.n	8003b18 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	3358      	adds	r3, #88	; 0x58
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4403      	add	r3, r0
 8003a8c:	3358      	adds	r3, #88	; 0x58
 8003a8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3358      	adds	r3, #88	; 0x58
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d914      	bls.n	8003ad0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3358      	adds	r3, #88	; 0x58
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	335c      	adds	r3, #92	; 0x5c
 8003aca:	2204      	movs	r2, #4
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e009      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	335c      	adds	r3, #92	; 0x5c
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003afa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e056      	b.n	8003bc6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	335d      	adds	r3, #93	; 0x5d
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d123      	bne.n	8003b76 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	440b      	add	r3, r1
 8003b3c:	335c      	adds	r3, #92	; 0x5c
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b60:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e027      	b.n	8003bc6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	335d      	adds	r3, #93	; 0x5d
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b07      	cmp	r3, #7
 8003b8a:	d11c      	bne.n	8003bc6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	3358      	adds	r3, #88	; 0x58
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	1c59      	adds	r1, r3, #1
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4403      	add	r3, r0
 8003bae:	3358      	adds	r3, #88	; 0x58
 8003bb0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	335c      	adds	r3, #92	; 0x5c
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	b2d8      	uxtb	r0, r3
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	335c      	adds	r3, #92	; 0x5c
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f007 fa08 	bl	800b008 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003bf8:	e0d1      	b.n	8003d9e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d13e      	bne.n	8003c8e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	0151      	lsls	r1, r2, #5
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	440a      	add	r2, r1
 8003c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3358      	adds	r3, #88	; 0x58
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4403      	add	r3, r0
 8003c52:	3358      	adds	r3, #88	; 0x58
 8003c54:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	335d      	adds	r3, #93	; 0x5d
 8003c66:	2206      	movs	r2, #6
 8003c68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f005 f824 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c86:	461a      	mov	r2, r3
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	6093      	str	r3, [r2, #8]
}
 8003c8c:	e087      	b.n	8003d9e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d17c      	bne.n	8003d9e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	333f      	adds	r3, #63	; 0x3f
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d122      	bne.n	8003d00 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3358      	adds	r3, #88	; 0x58
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 ffe2 	bl	8008cc2 <USB_HC_Halt>
 8003cfe:	e045      	b.n	8003d8c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	333f      	adds	r3, #63	; 0x3f
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	333f      	adds	r3, #63	; 0x3f
 8003d26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d12f      	bne.n	8003d8c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	440b      	add	r3, r1
 8003d3a:	3358      	adds	r3, #88	; 0x58
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d121      	bne.n	8003d8c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	335d      	adds	r3, #93	; 0x5d
 8003d58:	2203      	movs	r2, #3
 8003d5a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 ff9b 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	6093      	str	r3, [r2, #8]
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d119      	bne.n	8003e0a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	461a      	mov	r2, r3
 8003de4:	2304      	movs	r3, #4
 8003de6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e02:	f043 0302 	orr.w	r3, r3, #2
 8003e06:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e08:	e33e      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d141      	bne.n	8003ea4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2320      	movs	r3, #32
 8003e30:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	440b      	add	r3, r1
 8003e40:	333d      	adds	r3, #61	; 0x3d
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 831f 	bne.w	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	440b      	add	r3, r1
 8003e58:	333d      	adds	r3, #61	; 0x3d
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	335c      	adds	r3, #92	; 0x5c
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 ff10 	bl	8008cc2 <USB_HC_Halt>
}
 8003ea2:	e2f1      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b40      	cmp	r3, #64	; 0x40
 8003eb8:	d13f      	bne.n	8003f3a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	440b      	add	r3, r1
 8003ec8:	335d      	adds	r3, #93	; 0x5d
 8003eca:	2204      	movs	r2, #4
 8003ecc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	333d      	adds	r3, #61	; 0x3d
 8003ede:	2201      	movs	r2, #1
 8003ee0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	440b      	add	r3, r1
 8003ef0:	3358      	adds	r3, #88	; 0x58
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f004 fece 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f32:	461a      	mov	r2, r3
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	6093      	str	r3, [r2, #8]
}
 8003f38:	e2a6      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d122      	bne.n	8003f98 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 fea0 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f94:	6093      	str	r3, [r2, #8]
}
 8003f96:	e277      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d135      	bne.n	800401a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	3358      	adds	r3, #88	; 0x58
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 fe68 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	461a      	mov	r2, r3
 8004000:	2301      	movs	r3, #1
 8004002:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	440b      	add	r3, r1
 8004012:	335d      	adds	r3, #93	; 0x5d
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
}
 8004018:	e236      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b08      	cmp	r3, #8
 800402e:	d12b      	bne.n	8004088 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	461a      	mov	r2, r3
 800403e:	2308      	movs	r3, #8
 8004040:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	440a      	add	r2, r1
 8004058:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f004 fe28 	bl	8008cc2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	335d      	adds	r3, #93	; 0x5d
 8004082:	2205      	movs	r2, #5
 8004084:	701a      	strb	r2, [r3, #0]
}
 8004086:	e1ff      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b10      	cmp	r3, #16
 800409c:	d155      	bne.n	800414a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	3358      	adds	r3, #88	; 0x58
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	335d      	adds	r3, #93	; 0x5d
 80040c2:	2203      	movs	r2, #3
 80040c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	333d      	adds	r3, #61	; 0x3d
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d114      	bne.n	8004106 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	333c      	adds	r3, #60	; 0x3c
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	333d      	adds	r3, #61	; 0x3d
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	440a      	add	r2, r1
 800411c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004120:	f043 0302 	orr.w	r3, r3, #2
 8004124:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fdc6 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	461a      	mov	r2, r3
 8004144:	2310      	movs	r3, #16
 8004146:	6093      	str	r3, [r2, #8]
}
 8004148:	e19e      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d12b      	bne.n	80041b8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	440a      	add	r2, r1
 8004176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fd99 	bl	8008cc2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	440b      	add	r3, r1
 800419e:	335d      	adds	r3, #93	; 0x5d
 80041a0:	2206      	movs	r2, #6
 80041a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b0:	461a      	mov	r2, r3
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	6093      	str	r3, [r2, #8]
}
 80041b6:	e167      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d135      	bne.n	800423c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ea:	f043 0302 	orr.w	r3, r3, #2
 80041ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f004 fd61 	bl	8008cc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	461a      	mov	r2, r3
 800420e:	2310      	movs	r3, #16
 8004210:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421e:	461a      	mov	r2, r3
 8004220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004224:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	335d      	adds	r3, #93	; 0x5d
 8004236:	2208      	movs	r2, #8
 8004238:	701a      	strb	r2, [r3, #0]
}
 800423a:	e125      	b.n	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	f040 811a 	bne.w	8004488 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	440a      	add	r2, r1
 800426a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800426e:	f023 0302 	bic.w	r3, r3, #2
 8004272:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	335d      	adds	r3, #93	; 0x5d
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d137      	bne.n	80042fa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	440b      	add	r3, r1
 8004298:	335c      	adds	r3, #92	; 0x5c
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	440b      	add	r3, r1
 80042ac:	333f      	adds	r3, #63	; 0x3f
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d00b      	beq.n	80042cc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	440b      	add	r3, r1
 80042c2:	333f      	adds	r3, #63	; 0x3f
 80042c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	f040 80c5 	bne.w	8004456 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	3351      	adds	r3, #81	; 0x51
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f083 0301 	eor.w	r3, r3, #1
 80042e2:	b2d8      	uxtb	r0, r3
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	3351      	adds	r3, #81	; 0x51
 80042f4:	4602      	mov	r2, r0
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e0ad      	b.n	8004456 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	335d      	adds	r3, #93	; 0x5d
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d10a      	bne.n	8004326 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	440b      	add	r3, r1
 800431e:	335c      	adds	r3, #92	; 0x5c
 8004320:	2202      	movs	r2, #2
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	e097      	b.n	8004456 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	440b      	add	r3, r1
 8004334:	335d      	adds	r3, #93	; 0x5d
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b04      	cmp	r3, #4
 800433a:	d10a      	bne.n	8004352 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	335c      	adds	r3, #92	; 0x5c
 800434c:	2202      	movs	r2, #2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e081      	b.n	8004456 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	335d      	adds	r3, #93	; 0x5d
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b05      	cmp	r3, #5
 8004366:	d10a      	bne.n	800437e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	335c      	adds	r3, #92	; 0x5c
 8004378:	2205      	movs	r2, #5
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e06b      	b.n	8004456 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	335d      	adds	r3, #93	; 0x5d
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b06      	cmp	r3, #6
 8004392:	d00a      	beq.n	80043aa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	335d      	adds	r3, #93	; 0x5d
 80043a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d155      	bne.n	8004456 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	440b      	add	r3, r1
 80043b8:	3358      	adds	r3, #88	; 0x58
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	1c59      	adds	r1, r3, #1
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4403      	add	r3, r0
 80043cc:	3358      	adds	r3, #88	; 0x58
 80043ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	3358      	adds	r3, #88	; 0x58
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d914      	bls.n	8004410 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	3358      	adds	r3, #88	; 0x58
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	440b      	add	r3, r1
 8004408:	335c      	adds	r3, #92	; 0x5c
 800440a:	2204      	movs	r2, #4
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e009      	b.n	8004424 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	440b      	add	r3, r1
 800441e:	335c      	adds	r3, #92	; 0x5c
 8004420:	2202      	movs	r2, #2
 8004422:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800443a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004442:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	2302      	movs	r3, #2
 8004466:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	b2d8      	uxtb	r0, r3
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	335c      	adds	r3, #92	; 0x5c
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4601      	mov	r1, r0
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f006 fdc0 	bl	800b008 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004488:	bf00      	nop
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	0c5b      	lsrs	r3, r3, #17
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d003      	beq.n	80044d4 <HCD_RXQLVL_IRQHandler+0x44>
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	f000 8082 	beq.w	80045d6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044d2:	e083      	b.n	80045dc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d07f      	beq.n	80045da <HCD_RXQLVL_IRQHandler+0x14a>
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	3344      	adds	r3, #68	; 0x44
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d074      	beq.n	80045da <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	440b      	add	r3, r1
 8004502:	3344      	adds	r3, #68	; 0x44
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	b292      	uxth	r2, r2
 800450a:	4619      	mov	r1, r3
 800450c:	f003 ff7d 	bl	800840a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	3344      	adds	r3, #68	; 0x44
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	18d1      	adds	r1, r2, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4613      	mov	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4403      	add	r3, r0
 8004534:	3344      	adds	r3, #68	; 0x44
 8004536:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	440b      	add	r3, r1
 8004546:	334c      	adds	r3, #76	; 0x4c
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	18d1      	adds	r1, r2, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4403      	add	r3, r0
 800455c:	334c      	adds	r3, #76	; 0x4c
 800455e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <HCD_RXQLVL_IRQHandler+0x154>)
 8004570:	4013      	ands	r3, r2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d031      	beq.n	80045da <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800458c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004594:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	440b      	add	r3, r1
 80045b6:	3350      	adds	r3, #80	; 0x50
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	3350      	adds	r3, #80	; 0x50
 80045d0:	4602      	mov	r2, r0
 80045d2:	701a      	strb	r2, [r3, #0]
      break;
 80045d4:	e001      	b.n	80045da <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80045d6:	bf00      	nop
 80045d8:	e000      	b.n	80045dc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80045da:	bf00      	nop
  }
}
 80045dc:	bf00      	nop
 80045de:	3728      	adds	r7, #40	; 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	1ff80000 	.word	0x1ff80000

080045e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004614:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b02      	cmp	r3, #2
 800461e:	d10b      	bne.n	8004638 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d102      	bne.n	8004630 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f006 fcd0 	bl	800afd0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f043 0302 	orr.w	r3, r3, #2
 8004636:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b08      	cmp	r3, #8
 8004640:	d132      	bne.n	80046a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f043 0308 	orr.w	r3, r3, #8
 8004648:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d126      	bne.n	80046a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d113      	bne.n	8004684 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004662:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004666:	d106      	bne.n	8004676 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f004 f800 	bl	8008674 <USB_InitFSLSPClkSel>
 8004674:	e011      	b.n	800469a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2101      	movs	r1, #1
 800467c:	4618      	mov	r0, r3
 800467e:	f003 fff9 	bl	8008674 <USB_InitFSLSPClkSel>
 8004682:	e00a      	b.n	800469a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004692:	461a      	mov	r2, r3
 8004694:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004698:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f006 fcc2 	bl	800b024 <HAL_HCD_PortEnabled_Callback>
 80046a0:	e002      	b.n	80046a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f006 fccc 	bl	800b040 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d103      	bne.n	80046ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f043 0320 	orr.w	r3, r3, #32
 80046b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6013      	str	r3, [r2, #0]
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e154      	b.n	800498c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a98      	ldr	r2, [pc, #608]	; (800495c <HAL_I2S_Init+0x28c>)
 80046fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7fc fed5 	bl	80014ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6812      	ldr	r2, [r2, #0]
 8004714:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004718:	f023 030f 	bic.w	r3, r3, #15
 800471c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2202      	movs	r2, #2
 8004724:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d06f      	beq.n	800480e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004736:	2310      	movs	r3, #16
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e001      	b.n	8004740 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800473c:	2320      	movs	r3, #32
 800473e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b20      	cmp	r3, #32
 8004746:	d802      	bhi.n	800474e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a83      	ldr	r2, [pc, #524]	; (8004960 <HAL_I2S_Init+0x290>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_I2S_Init+0x92>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a81      	ldr	r2, [pc, #516]	; (8004964 <HAL_I2S_Init+0x294>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d104      	bne.n	800476c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8004762:	2001      	movs	r0, #1
 8004764:	f001 f990 	bl	8005a88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	e003      	b.n	8004774 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800476c:	2002      	movs	r0, #2
 800476e:	f001 f98b 	bl	8005a88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004772:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477c:	d125      	bne.n	80047ca <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	461a      	mov	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	3305      	adds	r3, #5
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e01f      	b.n	80047e8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	461a      	mov	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	3305      	adds	r3, #5
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e00e      	b.n	80047e8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	3305      	adds	r3, #5
 80047e6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_I2S_Init+0x298>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e003      	b.n	8004816 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800480e:	2302      	movs	r3, #2
 8004810:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d902      	bls.n	8004822 <HAL_I2S_Init+0x152>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2bff      	cmp	r3, #255	; 0xff
 8004820:	d907      	bls.n	8004832 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f043 0210 	orr.w	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0ac      	b.n	800498c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	ea42 0103 	orr.w	r1, r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	430a      	orrs	r2, r1
 8004844:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004850:	f023 030f 	bic.w	r3, r3, #15
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6851      	ldr	r1, [r2, #4]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68d2      	ldr	r2, [r2, #12]
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6992      	ldr	r2, [r2, #24]
 8004868:	430a      	orrs	r2, r1
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004874:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b30      	cmp	r3, #48	; 0x30
 800487c:	d003      	beq.n	8004886 <HAL_I2S_Init+0x1b6>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2bb0      	cmp	r3, #176	; 0xb0
 8004884:	d107      	bne.n	8004896 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004894:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d16e      	bne.n	800497c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a32      	ldr	r2, [pc, #200]	; (800496c <HAL_I2S_Init+0x29c>)
 80048a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <HAL_I2S_Init+0x290>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <HAL_I2S_Init+0x1e2>
 80048ae:	4b30      	ldr	r3, [pc, #192]	; (8004970 <HAL_I2S_Init+0x2a0>)
 80048b0:	e001      	b.n	80048b6 <HAL_I2S_Init+0x1e6>
 80048b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	4928      	ldr	r1, [pc, #160]	; (8004960 <HAL_I2S_Init+0x290>)
 80048be:	428a      	cmp	r2, r1
 80048c0:	d101      	bne.n	80048c6 <HAL_I2S_Init+0x1f6>
 80048c2:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <HAL_I2S_Init+0x2a0>)
 80048c4:	e001      	b.n	80048ca <HAL_I2S_Init+0x1fa>
 80048c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80048ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048ce:	f023 030f 	bic.w	r3, r3, #15
 80048d2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a21      	ldr	r2, [pc, #132]	; (8004960 <HAL_I2S_Init+0x290>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_I2S_Init+0x212>
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <HAL_I2S_Init+0x2a0>)
 80048e0:	e001      	b.n	80048e6 <HAL_I2S_Init+0x216>
 80048e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048e6:	2202      	movs	r2, #2
 80048e8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_I2S_Init+0x290>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_I2S_Init+0x228>
 80048f4:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <HAL_I2S_Init+0x2a0>)
 80048f6:	e001      	b.n	80048fc <HAL_I2S_Init+0x22c>
 80048f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004908:	d003      	beq.n	8004912 <HAL_I2S_Init+0x242>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d103      	bne.n	800491a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e001      	b.n	800491e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	b299      	uxth	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004934:	4303      	orrs	r3, r0
 8004936:	b29b      	uxth	r3, r3
 8004938:	430b      	orrs	r3, r1
 800493a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800493c:	4313      	orrs	r3, r2
 800493e:	b29a      	uxth	r2, r3
 8004940:	897b      	ldrh	r3, [r7, #10]
 8004942:	4313      	orrs	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800494a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a03      	ldr	r2, [pc, #12]	; (8004960 <HAL_I2S_Init+0x290>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10e      	bne.n	8004974 <HAL_I2S_Init+0x2a4>
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_I2S_Init+0x2a0>)
 8004958:	e00e      	b.n	8004978 <HAL_I2S_Init+0x2a8>
 800495a:	bf00      	nop
 800495c:	08004a8b 	.word	0x08004a8b
 8004960:	40003800 	.word	0x40003800
 8004964:	40003c00 	.word	0x40003c00
 8004968:	cccccccd 	.word	0xcccccccd
 800496c:	08004ba1 	.word	0x08004ba1
 8004970:	40003400 	.word	0x40003400
 8004974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004978:	897a      	ldrh	r2, [r7, #10]
 800497a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	881a      	ldrh	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c9a      	adds	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10e      	bne.n	8004a24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffb8 	bl	8004994 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10e      	bne.n	8004a82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff93 	bl	80049a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d13a      	bne.n	8004b1c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d109      	bne.n	8004ac4 <I2S_IRQHandler+0x3a>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d102      	bne.n	8004ac4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ffb4 	bl	8004a2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d126      	bne.n	8004b1c <I2S_IRQHandler+0x92>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d11f      	bne.n	8004b1c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff50 	bl	80049bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d136      	bne.n	8004b96 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d109      	bne.n	8004b46 <I2S_IRQHandler+0xbc>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3c:	2b80      	cmp	r3, #128	; 0x80
 8004b3e:	d102      	bne.n	8004b46 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff45 	bl	80049d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d122      	bne.n	8004b96 <I2S_IRQHandler+0x10c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d11b      	bne.n	8004b96 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b6c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f043 0204 	orr.w	r2, r3, #4
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ff13 	bl	80049bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4aa2      	ldr	r2, [pc, #648]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004bba:	4ba2      	ldr	r3, [pc, #648]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bbc:	e001      	b.n	8004bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a9b      	ldr	r2, [pc, #620]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004bd8:	4b9a      	ldr	r3, [pc, #616]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bda:	e001      	b.n	8004be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004bdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d004      	beq.n	8004bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 8099 	bne.w	8004d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d107      	bne.n	8004c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f925 	bl	8004e5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f9c8 	bl	8004fbc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d13a      	bne.n	8004cac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d035      	beq.n	8004cac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a7e      	ldr	r2, [pc, #504]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004c4a:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c4c:	e001      	b.n	8004c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4979      	ldr	r1, [pc, #484]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c5a:	428b      	cmp	r3, r1
 8004c5c:	d101      	bne.n	8004c62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004c5e:	4b79      	ldr	r3, [pc, #484]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c60:	e001      	b.n	8004c66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c6a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f043 0202 	orr.w	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff fe88 	bl	80049bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	f040 80be 	bne.w	8004e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80b8 	beq.w	8004e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a59      	ldr	r2, [pc, #356]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004cde:	4b59      	ldr	r3, [pc, #356]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ce0:	e001      	b.n	8004ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4954      	ldr	r1, [pc, #336]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cee:	428b      	cmp	r3, r1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004cf2:	4b54      	ldr	r3, [pc, #336]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cf4:	e001      	b.n	8004cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cfe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff fe4a 	bl	80049bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d28:	e084      	b.n	8004e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d107      	bne.n	8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8be 	bl	8004ec0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8fd 	bl	8004f58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d12f      	bne.n	8004dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d02a      	beq.n	8004dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2e      	ldr	r2, [pc, #184]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d101      	bne.n	8004d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d8e:	e001      	b.n	8004d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004d90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4929      	ldr	r1, [pc, #164]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004da2:	e001      	b.n	8004da8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004da4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0202 	orr.w	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fdfa 	bl	80049bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d131      	bne.n	8004e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02c      	beq.n	8004e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a17      	ldr	r2, [pc, #92]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004de8:	e001      	b.n	8004dee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4912      	ldr	r1, [pc, #72]	; (8004e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004df6:	428b      	cmp	r3, r1
 8004df8:	d101      	bne.n	8004dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dfc:	e001      	b.n	8004e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004dfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fdc5 	bl	80049bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e32:	e000      	b.n	8004e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e34:	bf00      	nop
}
 8004e36:	bf00      	nop
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40003800 	.word	0x40003800
 8004e44:	40003400 	.word	0x40003400

08004e48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c99      	adds	r1, r3, #2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6251      	str	r1, [r2, #36]	; 0x24
 8004e6e:	881a      	ldrh	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d113      	bne.n	8004eb6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ffc9 	bl	8004e48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c99      	adds	r1, r3, #2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6251      	str	r1, [r2, #36]	; 0x24
 8004ed2:	8819      	ldrh	r1, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <I2SEx_TxISR_I2SExt+0x90>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <I2SEx_TxISR_I2SExt+0x22>
 8004ede:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <I2SEx_TxISR_I2SExt+0x94>)
 8004ee0:	e001      	b.n	8004ee6 <I2SEx_TxISR_I2SExt+0x26>
 8004ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d121      	bne.n	8004f46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <I2SEx_TxISR_I2SExt+0x90>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <I2SEx_TxISR_I2SExt+0x50>
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <I2SEx_TxISR_I2SExt+0x94>)
 8004f0e:	e001      	b.n	8004f14 <I2SEx_TxISR_I2SExt+0x54>
 8004f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	490d      	ldr	r1, [pc, #52]	; (8004f50 <I2SEx_TxISR_I2SExt+0x90>)
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	d101      	bne.n	8004f24 <I2SEx_TxISR_I2SExt+0x64>
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <I2SEx_TxISR_I2SExt+0x94>)
 8004f22:	e001      	b.n	8004f28 <I2SEx_TxISR_I2SExt+0x68>
 8004f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff ff81 	bl	8004e48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40003800 	.word	0x40003800
 8004f54:	40003400 	.word	0x40003400

08004f58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68d8      	ldr	r0, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	1c99      	adds	r1, r3, #2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f70:	b282      	uxth	r2, r0
 8004f72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d113      	bne.n	8004fb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ff4a 	bl	8004e48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a20      	ldr	r2, [pc, #128]	; (800504c <I2SEx_RxISR_I2SExt+0x90>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <I2SEx_RxISR_I2SExt+0x16>
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <I2SEx_RxISR_I2SExt+0x94>)
 8004fd0:	e001      	b.n	8004fd6 <I2SEx_RxISR_I2SExt+0x1a>
 8004fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd6:	68d8      	ldr	r0, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	1c99      	adds	r1, r3, #2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fe2:	b282      	uxth	r2, r0
 8004fe4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d121      	bne.n	8005042 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <I2SEx_RxISR_I2SExt+0x90>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <I2SEx_RxISR_I2SExt+0x50>
 8005008:	4b11      	ldr	r3, [pc, #68]	; (8005050 <I2SEx_RxISR_I2SExt+0x94>)
 800500a:	e001      	b.n	8005010 <I2SEx_RxISR_I2SExt+0x54>
 800500c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	490d      	ldr	r1, [pc, #52]	; (800504c <I2SEx_RxISR_I2SExt+0x90>)
 8005018:	428b      	cmp	r3, r1
 800501a:	d101      	bne.n	8005020 <I2SEx_RxISR_I2SExt+0x64>
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <I2SEx_RxISR_I2SExt+0x94>)
 800501e:	e001      	b.n	8005024 <I2SEx_RxISR_I2SExt+0x68>
 8005020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005024:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005028:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff03 	bl	8004e48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40003800 	.word	0x40003800
 8005050:	40003400 	.word	0x40003400

08005054 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800505c:	f7fc fe2a 	bl	8001cb4 <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e069      	b.n	8005140 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fc facd 	bl	8001620 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005086:	f241 3188 	movw	r1, #5000	; 0x1388
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f85e 	bl	800514c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	3b01      	subs	r3, #1
 80050a0:	021a      	lsls	r2, r3, #8
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	2120      	movs	r1, #32
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f856 	bl	8005168 <QSPI_WaitFlagStateUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80050c0:	7afb      	ldrb	r3, [r7, #11]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d137      	bne.n	8005136 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6852      	ldr	r2, [r2, #4]
 80050d8:	0611      	lsls	r1, r2, #24
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68d2      	ldr	r2, [r2, #12]
 80050de:	4311      	orrs	r1, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	69d2      	ldr	r2, [r2, #28]
 80050e4:	4311      	orrs	r1, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6a12      	ldr	r2, [r2, #32]
 80050ea:	4311      	orrs	r1, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HAL_QSPI_Init+0xf4>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6912      	ldr	r2, [r2, #16]
 8005102:	0411      	lsls	r1, r2, #16
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6952      	ldr	r2, [r2, #20]
 8005108:	4311      	orrs	r1, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6992      	ldr	r2, [r2, #24]
 800510e:	4311      	orrs	r1, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	430b      	orrs	r3, r1
 8005116:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800513e:	7afb      	ldrb	r3, [r7, #11]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	ffe0f8fe 	.word	0xffe0f8fe

0800514c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005178:	e01a      	b.n	80051b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d016      	beq.n	80051b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fc fd97 	bl	8001cb4 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2204      	movs	r2, #4
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	f043 0201 	orr.w	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e00e      	b.n	80051ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf14      	ite	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	2300      	moveq	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1d6      	bne.n	800517a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0cc      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051ec:	4b68      	ldr	r3, [pc, #416]	; (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d90c      	bls.n	8005214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fa:	4b65      	ldr	r3, [pc, #404]	; (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005202:	4b63      	ldr	r3, [pc, #396]	; (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0b8      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800522c:	4b59      	ldr	r3, [pc, #356]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	4a58      	ldr	r2, [pc, #352]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005244:	4b53      	ldr	r3, [pc, #332]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a52      	ldr	r2, [pc, #328]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800524e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b50      	ldr	r3, [pc, #320]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	494d      	ldr	r1, [pc, #308]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d044      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005276:	4b47      	ldr	r3, [pc, #284]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d119      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e07f      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d003      	beq.n	8005296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005292:	2b03      	cmp	r3, #3
 8005294:	d107      	bne.n	80052a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005296:	4b3f      	ldr	r3, [pc, #252]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d109      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e06f      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a6:	4b3b      	ldr	r3, [pc, #236]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e067      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f023 0203 	bic.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4934      	ldr	r1, [pc, #208]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052c8:	f7fc fcf4 	bl	8001cb4 <HAL_GetTick>
 80052cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d0:	f7fc fcf0 	bl	8001cb4 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e04f      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e6:	4b2b      	ldr	r3, [pc, #172]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 020c 	and.w	r2, r3, #12
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d1eb      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052f8:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d20c      	bcs.n	8005320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800530e:	4b20      	ldr	r3, [pc, #128]	; (8005390 <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d001      	beq.n	8005320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e032      	b.n	8005386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800532c:	4b19      	ldr	r3, [pc, #100]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4916      	ldr	r1, [pc, #88]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	490e      	ldr	r1, [pc, #56]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800535e:	f000 f821 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 8005362:	4601      	mov	r1, r0
 8005364:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	4a0a      	ldr	r2, [pc, #40]	; (8005398 <HAL_RCC_ClockConfig+0x1c0>)
 8005370:	5cd3      	ldrb	r3, [r2, r3]
 8005372:	fa21 f303 	lsr.w	r3, r1, r3
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_ClockConfig+0x1c8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fc fc54 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023c00 	.word	0x40023c00
 8005394:	40023800 	.word	0x40023800
 8005398:	0800b690 	.word	0x0800b690
 800539c:	20000000 	.word	0x20000000
 80053a0:	20000004 	.word	0x20000004

080053a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	2300      	movs	r3, #0
 80053b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ba:	4b50      	ldr	r3, [pc, #320]	; (80054fc <HAL_RCC_GetSysClockFreq+0x158>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d007      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0x32>
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d008      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0x38>
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 808d 	bne.w	80054ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b4b      	ldr	r3, [pc, #300]	; (8005500 <HAL_RCC_GetSysClockFreq+0x15c>)
 80053d2:	60bb      	str	r3, [r7, #8]
       break;
 80053d4:	e08c      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053d6:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCC_GetSysClockFreq+0x160>)
 80053d8:	60bb      	str	r3, [r7, #8]
      break;
 80053da:	e089      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053dc:	4b47      	ldr	r3, [pc, #284]	; (80054fc <HAL_RCC_GetSysClockFreq+0x158>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053e6:	4b45      	ldr	r3, [pc, #276]	; (80054fc <HAL_RCC_GetSysClockFreq+0x158>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d023      	beq.n	800543a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f2:	4b42      	ldr	r3, [pc, #264]	; (80054fc <HAL_RCC_GetSysClockFreq+0x158>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	099b      	lsrs	r3, r3, #6
 80053f8:	f04f 0400 	mov.w	r4, #0
 80053fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	ea03 0501 	and.w	r5, r3, r1
 8005408:	ea04 0602 	and.w	r6, r4, r2
 800540c:	4a3d      	ldr	r2, [pc, #244]	; (8005504 <HAL_RCC_GetSysClockFreq+0x160>)
 800540e:	fb02 f106 	mul.w	r1, r2, r6
 8005412:	2200      	movs	r2, #0
 8005414:	fb02 f205 	mul.w	r2, r2, r5
 8005418:	440a      	add	r2, r1
 800541a:	493a      	ldr	r1, [pc, #232]	; (8005504 <HAL_RCC_GetSysClockFreq+0x160>)
 800541c:	fba5 0101 	umull	r0, r1, r5, r1
 8005420:	1853      	adds	r3, r2, r1
 8005422:	4619      	mov	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f04f 0400 	mov.w	r4, #0
 800542a:	461a      	mov	r2, r3
 800542c:	4623      	mov	r3, r4
 800542e:	f7fa fefb 	bl	8000228 <__aeabi_uldivmod>
 8005432:	4603      	mov	r3, r0
 8005434:	460c      	mov	r4, r1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e049      	b.n	80054ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543a:	4b30      	ldr	r3, [pc, #192]	; (80054fc <HAL_RCC_GetSysClockFreq+0x158>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	f04f 0400 	mov.w	r4, #0
 8005444:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	ea03 0501 	and.w	r5, r3, r1
 8005450:	ea04 0602 	and.w	r6, r4, r2
 8005454:	4629      	mov	r1, r5
 8005456:	4632      	mov	r2, r6
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	f04f 0400 	mov.w	r4, #0
 8005460:	0154      	lsls	r4, r2, #5
 8005462:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005466:	014b      	lsls	r3, r1, #5
 8005468:	4619      	mov	r1, r3
 800546a:	4622      	mov	r2, r4
 800546c:	1b49      	subs	r1, r1, r5
 800546e:	eb62 0206 	sbc.w	r2, r2, r6
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	0194      	lsls	r4, r2, #6
 800547c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005480:	018b      	lsls	r3, r1, #6
 8005482:	1a5b      	subs	r3, r3, r1
 8005484:	eb64 0402 	sbc.w	r4, r4, r2
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	00e2      	lsls	r2, r4, #3
 8005492:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005496:	00d9      	lsls	r1, r3, #3
 8005498:	460b      	mov	r3, r1
 800549a:	4614      	mov	r4, r2
 800549c:	195b      	adds	r3, r3, r5
 800549e:	eb44 0406 	adc.w	r4, r4, r6
 80054a2:	f04f 0100 	mov.w	r1, #0
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	02a2      	lsls	r2, r4, #10
 80054ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80054b0:	0299      	lsls	r1, r3, #10
 80054b2:	460b      	mov	r3, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	4621      	mov	r1, r4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f04f 0400 	mov.w	r4, #0
 80054c0:	461a      	mov	r2, r3
 80054c2:	4623      	mov	r3, r4
 80054c4:	f7fa feb0 	bl	8000228 <__aeabi_uldivmod>
 80054c8:	4603      	mov	r3, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCC_GetSysClockFreq+0x158>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	3301      	adds	r3, #1
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	60bb      	str	r3, [r7, #8]
      break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_GetSysClockFreq+0x15c>)
 80054ec:	60bb      	str	r3, [r7, #8]
      break;
 80054ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054f0:	68bb      	ldr	r3, [r7, #8]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800
 8005500:	00f42400 	.word	0x00f42400
 8005504:	017d7840 	.word	0x017d7840

08005508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <HAL_RCC_GetHCLKFreq+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000

08005520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005524:	f7ff fff0 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005528:	4601      	mov	r1, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0a9b      	lsrs	r3, r3, #10
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	0800b6a0 	.word	0x0800b6a0

08005548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800554c:	f7ff ffdc 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005550:	4601      	mov	r1, r0
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	0b5b      	lsrs	r3, r3, #13
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	4a03      	ldr	r2, [pc, #12]	; (800556c <HAL_RCC_GetPCLK2Freq+0x24>)
 800555e:	5cd3      	ldrb	r3, [r2, r3]
 8005560:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005564:	4618      	mov	r0, r3
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	0800b6a0 	.word	0x0800b6a0

08005570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d010      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005594:	4b7a      	ldr	r3, [pc, #488]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	4977      	ldr	r1, [pc, #476]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d010      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80055c2:	4b6f      	ldr	r3, [pc, #444]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	496b      	ldr	r1, [pc, #428]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80055e0:	2301      	movs	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d022      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80055f0:	4b63      	ldr	r3, [pc, #396]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fe:	4960      	ldr	r1, [pc, #384]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800560e:	2301      	movs	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800561a:	d10c      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800561c:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800561e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005622:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	3b01      	subs	r3, #1
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	4954      	ldr	r1, [pc, #336]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d022      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005642:	4b4f      	ldr	r3, [pc, #316]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005648:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005650:	494b      	ldr	r1, [pc, #300]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005660:	2301      	movs	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800566c:	d10c      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800566e:	4b44      	ldr	r3, [pc, #272]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005674:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	3b01      	subs	r3, #1
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	493f      	ldr	r1, [pc, #252]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 808a 	beq.w	80057aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	4b39      	ldr	r3, [pc, #228]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	4a38      	ldr	r2, [pc, #224]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	6413      	str	r3, [r2, #64]	; 0x40
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056b2:	4b34      	ldr	r3, [pc, #208]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a33      	ldr	r2, [pc, #204]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056be:	f7fc faf9 	bl	8001cb4 <HAL_GetTick>
 80056c2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7fc faf5 	bl	8001cb4 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1d1      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056d8:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e4:	4b26      	ldr	r3, [pc, #152]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ec:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d028      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800570c:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005712:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005718:	4a19      	ldr	r2, [pc, #100]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d114      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800572a:	f7fc fac3 	bl	8001cb4 <HAL_GetTick>
 800572e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005730:	e00a      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005732:	f7fc fabf 	bl	8001cb4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005740:	4293      	cmp	r3, r2
 8005742:	d901      	bls.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e199      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ee      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005760:	d114      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005762:	4b07      	ldr	r3, [pc, #28]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005776:	4902      	ldr	r1, [pc, #8]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005778:	4313      	orrs	r3, r2
 800577a:	608b      	str	r3, [r1, #8]
 800577c:	e00c      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	40007000 	.word	0x40007000
 8005788:	42470e40 	.word	0x42470e40
 800578c:	4b89      	ldr	r3, [pc, #548]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	4a88      	ldr	r2, [pc, #544]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005796:	6093      	str	r3, [r2, #8]
 8005798:	4b86      	ldr	r3, [pc, #536]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800579a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a4:	4983      	ldr	r1, [pc, #524]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80057bc:	4b7e      	ldr	r3, [pc, #504]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80057be:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80057cc:	4b79      	ldr	r3, [pc, #484]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	4976      	ldr	r1, [pc, #472]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057ee:	4b71      	ldr	r3, [pc, #452]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	496d      	ldr	r1, [pc, #436]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800580c:	d101      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800580e:	2301      	movs	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800581e:	4b65      	ldr	r3, [pc, #404]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005824:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	4961      	ldr	r1, [pc, #388]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d004      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b80      	cmp	r3, #128	; 0x80
 8005840:	f040 80c6 	bne.w	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005844:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800584a:	f7fc fa33 	bl	8001cb4 <HAL_GetTick>
 800584e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005852:	f7fc fa2f 	bl	8001cb4 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e10b      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005864:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f0      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005870:	4a53      	ldr	r2, [pc, #332]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d023      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b4:	d00e      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d019      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d115      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d2:	d110      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	061b      	lsls	r3, r3, #24
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	071b      	lsls	r3, r3, #28
 80058ee:	4931      	ldr	r1, [pc, #196]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005912:	2b00      	cmp	r3, #0
 8005914:	d026      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d122      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005924:	0e1b      	lsrs	r3, r3, #24
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	431a      	orrs	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	061b      	lsls	r3, r3, #24
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	071b      	lsls	r3, r3, #28
 8005944:	491b      	ldr	r1, [pc, #108]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800594c:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800594e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005952:	f023 021f 	bic.w	r2, r3, #31
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	3b01      	subs	r3, #1
 800595c:	4915      	ldr	r1, [pc, #84]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d010      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	019b      	lsls	r3, r3, #6
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	061b      	lsls	r3, r3, #24
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	071b      	lsls	r3, r3, #28
 800598a:	490a      	ldr	r1, [pc, #40]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005998:	f7fc f98c 	bl	8001cb4 <HAL_GetTick>
 800599c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800599e:	e011      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059a0:	f7fc f988 	bl	8001cb4 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d90a      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e064      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80059b2:	bf00      	nop
 80059b4:	40023800 	.word	0x40023800
 80059b8:	424711e0 	.word	0x424711e0
 80059bc:	42470068 	.word	0x42470068
 80059c0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c4:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0e7      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059dc:	4b29      	ldr	r3, [pc, #164]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	4926      	ldr	r1, [pc, #152]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	491d      	ldr	r1, [pc, #116]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	4915      	ldr	r1, [pc, #84]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	490c      	ldr	r1, [pc, #48]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a64:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	4904      	ldr	r1, [pc, #16]	; (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3720      	adds	r7, #32
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40023800 	.word	0x40023800

08005a88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d003      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	f000 8098 	beq.w	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005aac:	e12d      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005aae:	4b9a      	ldr	r3, [pc, #616]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005ab8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac0:	d00c      	beq.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ac6:	d802      	bhi.n	8005ace <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005acc:	e082      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ad2:	d047      	beq.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005ad4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005ad8:	d06f      	beq.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8005ada:	e07b      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005adc:	4b8f      	ldr	r3, [pc, #572]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005ade:	617b      	str	r3, [r7, #20]
          break;
 8005ae0:	e07b      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005ae2:	4b8d      	ldr	r3, [pc, #564]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af0:	d109      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005af2:	4b89      	ldr	r3, [pc, #548]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005afc:	4a87      	ldr	r2, [pc, #540]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	e019      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b06:	4b84      	ldr	r3, [pc, #528]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b12:	d109      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b14:	4b80      	ldr	r3, [pc, #512]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b1e:	4a80      	ldr	r2, [pc, #512]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	e008      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b28:	4b7b      	ldr	r3, [pc, #492]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b32:	4a7c      	ldr	r2, [pc, #496]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b3a:	4b77      	ldr	r3, [pc, #476]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	099b      	lsrs	r3, r3, #6
 8005b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	fb02 f303 	mul.w	r3, r2, r3
 8005b4c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005b4e:	4b72      	ldr	r3, [pc, #456]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b54:	0f1b      	lsrs	r3, r3, #28
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
          break;
 8005b62:	e03a      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b64:	4b6c      	ldr	r3, [pc, #432]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b70:	d108      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b72:	4b69      	ldr	r3, [pc, #420]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b7a:	4a69      	ldr	r2, [pc, #420]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	e007      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b84:	4b64      	ldr	r3, [pc, #400]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8c:	4a65      	ldr	r2, [pc, #404]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005b94:	4b60      	ldr	r3, [pc, #384]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	099b      	lsrs	r3, r3, #6
 8005b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005ba6:	4b5c      	ldr	r3, [pc, #368]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	0f1b      	lsrs	r3, r3, #28
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	617b      	str	r3, [r7, #20]
          break;
 8005bb8:	e00f      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bba:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc6:	d102      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005bc8:	4b55      	ldr	r3, [pc, #340]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bca:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005bcc:	e005      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005bce:	4b55      	ldr	r3, [pc, #340]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bd0:	617b      	str	r3, [r7, #20]
          break;
 8005bd2:	e002      	b.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
          break;
 8005bd8:	bf00      	nop
        }
      }
      break;
 8005bda:	e096      	b.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005bdc:	4b4e      	ldr	r3, [pc, #312]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005be6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bee:	d00c      	beq.n	8005c0a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005bf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bf4:	d802      	bhi.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005bfa:	e082      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c00:	d047      	beq.n	8005c92 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005c02:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c06:	d06f      	beq.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005c08:	e07b      	b.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c0a:	4b44      	ldr	r3, [pc, #272]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c0c:	617b      	str	r3, [r7, #20]
          break;
 8005c0e:	e07b      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005c10:	4b41      	ldr	r3, [pc, #260]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1e:	d109      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c20:	4b3d      	ldr	r3, [pc, #244]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2a:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	e019      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c34:	4b38      	ldr	r3, [pc, #224]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c40:	d109      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c42:	4b35      	ldr	r3, [pc, #212]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c4c:	4a34      	ldr	r2, [pc, #208]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	e008      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c56:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c60:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6e:	099b      	lsrs	r3, r3, #6
 8005c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c82:	0f1b      	lsrs	r3, r3, #28
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	617b      	str	r3, [r7, #20]
          break;
 8005c90:	e03a      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c9e:	d108      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ca0:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	e007      	b.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cb2:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cba:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	099b      	lsrs	r3, r3, #6
 8005cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005cd4:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	0f1b      	lsrs	r3, r3, #28
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]
          break;
 8005ce6:	e00f      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf4:	d102      	bne.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cf8:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005cfa:	e005      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005cfc:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cfe:	617b      	str	r3, [r7, #20]
          break;
 8005d00:	e002      	b.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
          break;
 8005d06:	bf00      	nop
        }
      }
      break;
 8005d08:	bf00      	nop
    }
  }
  return frequency;
 8005d0a:	697b      	ldr	r3, [r7, #20]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	00bb8000 	.word	0x00bb8000
 8005d20:	017d7840 	.word	0x017d7840
 8005d24:	00f42400 	.word	0x00f42400

08005d28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d075      	beq.n	8005e2c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d40:	4ba2      	ldr	r3, [pc, #648]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d00c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4c:	4b9f      	ldr	r3, [pc, #636]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d112      	bne.n	8005d7e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d58:	4b9c      	ldr	r3, [pc, #624]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d64:	d10b      	bne.n	8005d7e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d66:	4b99      	ldr	r3, [pc, #612]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d05b      	beq.n	8005e2a <HAL_RCC_OscConfig+0x102>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d157      	bne.n	8005e2a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e20b      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d86:	d106      	bne.n	8005d96 <HAL_RCC_OscConfig+0x6e>
 8005d88:	4b90      	ldr	r3, [pc, #576]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a8f      	ldr	r2, [pc, #572]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e01d      	b.n	8005dd2 <HAL_RCC_OscConfig+0xaa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9e:	d10c      	bne.n	8005dba <HAL_RCC_OscConfig+0x92>
 8005da0:	4b8a      	ldr	r3, [pc, #552]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a89      	ldr	r2, [pc, #548]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b87      	ldr	r3, [pc, #540]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a86      	ldr	r2, [pc, #536]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	e00b      	b.n	8005dd2 <HAL_RCC_OscConfig+0xaa>
 8005dba:	4b84      	ldr	r3, [pc, #528]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a83      	ldr	r2, [pc, #524]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4b81      	ldr	r3, [pc, #516]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a80      	ldr	r2, [pc, #512]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d013      	beq.n	8005e02 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fb ff6b 	bl	8001cb4 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de2:	f7fb ff67 	bl	8001cb4 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b64      	cmp	r3, #100	; 0x64
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e1d0      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df4:	4b75      	ldr	r3, [pc, #468]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0xba>
 8005e00:	e014      	b.n	8005e2c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fb ff57 	bl	8001cb4 <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e0a:	f7fb ff53 	bl	8001cb4 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b64      	cmp	r3, #100	; 0x64
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e1bc      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1c:	4b6b      	ldr	r3, [pc, #428]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <HAL_RCC_OscConfig+0xe2>
 8005e28:	e000      	b.n	8005e2c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d063      	beq.n	8005f00 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e38:	4b64      	ldr	r3, [pc, #400]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e44:	4b61      	ldr	r3, [pc, #388]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d11c      	bne.n	8005e8a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e50:	4b5e      	ldr	r3, [pc, #376]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d116      	bne.n	8005e8a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5c:	4b5b      	ldr	r3, [pc, #364]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_RCC_OscConfig+0x14c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e190      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e74:	4b55      	ldr	r3, [pc, #340]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4952      	ldr	r1, [pc, #328]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e88:	e03a      	b.n	8005f00 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d020      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e92:	4b4f      	ldr	r3, [pc, #316]	; (8005fd0 <HAL_RCC_OscConfig+0x2a8>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb ff0c 	bl	8001cb4 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fb ff08 	bl	8001cb4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e171      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	4b46      	ldr	r3, [pc, #280]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b43      	ldr	r3, [pc, #268]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	493f      	ldr	r1, [pc, #252]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
 8005ed2:	e015      	b.n	8005f00 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed4:	4b3e      	ldr	r3, [pc, #248]	; (8005fd0 <HAL_RCC_OscConfig+0x2a8>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fb feeb 	bl	8001cb4 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee2:	f7fb fee7 	bl	8001cb4 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e150      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef4:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d030      	beq.n	8005f6e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f14:	4b2f      	ldr	r3, [pc, #188]	; (8005fd4 <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1a:	f7fb fecb 	bl	8001cb4 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f22:	f7fb fec7 	bl	8001cb4 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e130      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0f0      	beq.n	8005f22 <HAL_RCC_OscConfig+0x1fa>
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f48:	f7fb feb4 	bl	8001cb4 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f50:	f7fb feb0 	bl	8001cb4 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e119      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 809f 	beq.w	80060ba <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10f      	bne.n	8005fac <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_OscConfig+0x2a4>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_RCC_OscConfig+0x2b0>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d120      	bne.n	8005ffa <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <HAL_RCC_OscConfig+0x2b0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <HAL_RCC_OscConfig+0x2b0>)
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc4:	f7fb fe76 	bl	8001cb4 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fca:	e010      	b.n	8005fee <HAL_RCC_OscConfig+0x2c6>
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	42470000 	.word	0x42470000
 8005fd4:	42470e80 	.word	0x42470e80
 8005fd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fdc:	f7fb fe6a 	bl	8001cb4 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0d3      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fee:	4b6c      	ldr	r3, [pc, #432]	; (80061a0 <HAL_RCC_OscConfig+0x478>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d106      	bne.n	8006010 <HAL_RCC_OscConfig+0x2e8>
 8006002:	4b68      	ldr	r3, [pc, #416]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	4a67      	ldr	r2, [pc, #412]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	6713      	str	r3, [r2, #112]	; 0x70
 800600e:	e01c      	b.n	800604a <HAL_RCC_OscConfig+0x322>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b05      	cmp	r3, #5
 8006016:	d10c      	bne.n	8006032 <HAL_RCC_OscConfig+0x30a>
 8006018:	4b62      	ldr	r3, [pc, #392]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a61      	ldr	r2, [pc, #388]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 800601e:	f043 0304 	orr.w	r3, r3, #4
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
 8006024:	4b5f      	ldr	r3, [pc, #380]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006028:	4a5e      	ldr	r2, [pc, #376]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	6713      	str	r3, [r2, #112]	; 0x70
 8006030:	e00b      	b.n	800604a <HAL_RCC_OscConfig+0x322>
 8006032:	4b5c      	ldr	r3, [pc, #368]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a5b      	ldr	r2, [pc, #364]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
 800603e:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	4a58      	ldr	r2, [pc, #352]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d015      	beq.n	800607e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fb fe2f 	bl	8001cb4 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fb fe2b 	bl	8001cb4 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e092      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006070:	4b4c      	ldr	r3, [pc, #304]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ee      	beq.n	800605a <HAL_RCC_OscConfig+0x332>
 800607c:	e014      	b.n	80060a8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607e:	f7fb fe19 	bl	8001cb4 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006084:	e00a      	b.n	800609c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006086:	f7fb fe15 	bl	8001cb4 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f241 3288 	movw	r2, #5000	; 0x1388
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e07c      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609c:	4b41      	ldr	r3, [pc, #260]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1ee      	bne.n	8006086 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d105      	bne.n	80060ba <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ae:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 80060b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d068      	beq.n	8006194 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060c2:	4b38      	ldr	r3, [pc, #224]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d060      	beq.n	8006190 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d145      	bne.n	8006162 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d6:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <HAL_RCC_OscConfig+0x480>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fb fdea 	bl	8001cb4 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fb fde6 	bl	8001cb4 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e04f      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f6:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	019b      	lsls	r3, r3, #6
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	3b01      	subs	r3, #1
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	071b      	lsls	r3, r3, #28
 800612e:	491d      	ldr	r1, [pc, #116]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <HAL_RCC_OscConfig+0x480>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb fdbb 	bl	8001cb4 <HAL_GetTick>
 800613e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006142:	f7fb fdb7 	bl	8001cb4 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e020      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f0      	beq.n	8006142 <HAL_RCC_OscConfig+0x41a>
 8006160:	e018      	b.n	8006194 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <HAL_RCC_OscConfig+0x480>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006168:	f7fb fda4 	bl	8001cb4 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006170:	f7fb fda0 	bl	8001cb4 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e009      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <HAL_RCC_OscConfig+0x47c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x448>
 800618e:	e001      	b.n	8006194 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40007000 	.word	0x40007000
 80061a4:	40023800 	.word	0x40023800
 80061a8:	42470060 	.word	0x42470060

080061ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e022      	b.n	8006204 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fb faef 	bl	80017b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2203      	movs	r2, #3
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f814 	bl	800620c <HAL_SD_InitCard>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e00a      	b.n	8006204 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800620c:	b5b0      	push	{r4, r5, r7, lr}
 800620e:	b08e      	sub	sp, #56	; 0x38
 8006210:	af04      	add	r7, sp, #16
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006214:	2300      	movs	r3, #0
 8006216:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006228:	2376      	movs	r3, #118	; 0x76
 800622a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681d      	ldr	r5, [r3, #0]
 8006230:	466c      	mov	r4, sp
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800623a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006244:	4628      	mov	r0, r5
 8006246:	f001 fb2d 	bl	80078a4 <SDIO_Init>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e031      	b.n	80062c0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <HAL_SD_InitCard+0xbc>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f001 fb54 	bl	8007914 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <HAL_SD_InitCard+0xbc>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fb18 	bl	80068a8 <SD_PowerON>
 8006278:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e013      	b.n	80062c0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fa37 	bl	800670c <SD_InitCard>
 800629e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00b      	beq.n	80062be <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3728      	adds	r7, #40	; 0x28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bdb0      	pop	{r4, r5, r7, pc}
 80062c8:	422580a0 	.word	0x422580a0

080062cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062da:	0f9b      	lsrs	r3, r3, #30
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e6:	0e9b      	lsrs	r3, r3, #26
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f8:	0e1b      	lsrs	r3, r3, #24
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	b2da      	uxtb	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630a:	0c1b      	lsrs	r3, r3, #16
 800630c:	b2da      	uxtb	r2, r3
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	b2da      	uxtb	r2, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006322:	b2da      	uxtb	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632c:	0d1b      	lsrs	r3, r3, #20
 800632e:	b29a      	uxth	r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	b2da      	uxtb	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634a:	0bdb      	lsrs	r3, r3, #15
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635c:	0b9b      	lsrs	r3, r3, #14
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	b2da      	uxtb	r2, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636e:	0b5b      	lsrs	r3, r3, #13
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	b2da      	uxtb	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006380:	0b1b      	lsrs	r3, r3, #12
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2200      	movs	r2, #0
 8006392:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006398:	2b00      	cmp	r3, #0
 800639a:	d163      	bne.n	8006464 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063a6:	4013      	ands	r3, r2
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80063ac:	0f92      	lsrs	r2, r2, #30
 80063ae:	431a      	orrs	r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b8:	0edb      	lsrs	r3, r3, #27
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ca:	0e1b      	lsrs	r3, r3, #24
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063dc:	0d5b      	lsrs	r3, r3, #21
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	0c9b      	lsrs	r3, r3, #18
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006400:	0bdb      	lsrs	r3, r3, #15
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	b2da      	uxtb	r2, r3
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	7e1b      	ldrb	r3, [r3, #24]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	3302      	adds	r3, #2
 8006424:	2201      	movs	r2, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800642e:	fb02 f203 	mul.w	r2, r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	7a1b      	ldrb	r3, [r3, #8]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	2201      	movs	r2, #1
 8006442:	409a      	lsls	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006450:	0a52      	lsrs	r2, r2, #9
 8006452:	fb02 f203 	mul.w	r2, r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006460:	661a      	str	r2, [r3, #96]	; 0x60
 8006462:	e031      	b.n	80064c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	2b01      	cmp	r3, #1
 800646a:	d11d      	bne.n	80064a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006470:	041b      	lsls	r3, r3, #16
 8006472:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	431a      	orrs	r2, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	3301      	adds	r3, #1
 8006488:	029a      	lsls	r2, r3, #10
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	661a      	str	r2, [r3, #96]	; 0x60
 80064a6:	e00f      	b.n	80064c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a58      	ldr	r2, [pc, #352]	; (8006610 <HAL_SD_GetCardCSD+0x344>)
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e09d      	b.n	8006604 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064cc:	0b9b      	lsrs	r3, r3, #14
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	0fdb      	lsrs	r3, r3, #31
 8006502:	b2da      	uxtb	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	0f5b      	lsrs	r3, r3, #29
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	0e9b      	lsrs	r3, r3, #26
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b2da      	uxtb	r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	0d9b      	lsrs	r3, r3, #22
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	b2da      	uxtb	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	0d5b      	lsrs	r3, r3, #21
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	0bdb      	lsrs	r3, r3, #15
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	b2da      	uxtb	r2, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	0b9b      	lsrs	r3, r3, #14
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	b2da      	uxtb	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	0b1b      	lsrs	r3, r3, #12
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	0a9b      	lsrs	r3, r3, #10
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	004005ff 	.word	0x004005ff

08006614 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006614:	b5b0      	push	{r4, r5, r7, lr}
 8006616:	b08e      	sub	sp, #56	; 0x38
 8006618:	af04      	add	r7, sp, #16
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2203      	movs	r2, #3
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	2b03      	cmp	r3, #3
 800662c:	d02e      	beq.n	800668c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d106      	bne.n	8006644 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
 8006642:	e029      	b.n	8006698 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664a:	d10a      	bne.n	8006662 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9b9 	bl	80069c4 <SD_WideBus_Enable>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
 8006660:	e01a      	b.n	8006698 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f9f6 	bl	8006a5a <SD_WideBus_Disable>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
 800667c:	e00c      	b.n	8006698 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	639a      	str	r2, [r3, #56]	; 0x38
 800668a:	e005      	b.n	8006698 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e024      	b.n	80066fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681d      	ldr	r5, [r3, #0]
 80066da:	466c      	mov	r4, sp
 80066dc:	f107 0318 	add.w	r3, r7, #24
 80066e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066e8:	f107 030c 	add.w	r3, r7, #12
 80066ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066ee:	4628      	mov	r0, r5
 80066f0:	f001 f8d8 	bl	80078a4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3728      	adds	r7, #40	; 0x28
 8006702:	46bd      	mov	sp, r7
 8006704:	bdb0      	pop	{r4, r5, r7, pc}
 8006706:	bf00      	nop
 8006708:	004005ff 	.word	0x004005ff

0800670c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800670c:	b5b0      	push	{r4, r5, r7, lr}
 800670e:	b094      	sub	sp, #80	; 0x50
 8006710:	af04      	add	r7, sp, #16
 8006712:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006714:	2301      	movs	r3, #1
 8006716:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f001 f908 	bl	8007932 <SDIO_GetPowerState>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006728:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800672c:	e0b7      	b.n	800689e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	2b03      	cmp	r3, #3
 8006734:	d02f      	beq.n	8006796 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f001 fa87 	bl	8007c4e <SDMMC_CmdSendCID>
 8006740:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <SD_InitCard+0x40>
    {
      return errorstate;
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	e0a8      	b.n	800689e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f932 	bl	80079bc <SDIO_GetResponse>
 8006758:	4602      	mov	r2, r0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2104      	movs	r1, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f001 f929 	bl	80079bc <SDIO_GetResponse>
 800676a:	4602      	mov	r2, r0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2108      	movs	r1, #8
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f920 	bl	80079bc <SDIO_GetResponse>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	210c      	movs	r1, #12
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f917 	bl	80079bc <SDIO_GetResponse>
 800678e:	4602      	mov	r2, r0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	2b03      	cmp	r3, #3
 800679c:	d00d      	beq.n	80067ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f107 020e 	add.w	r2, r7, #14
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fa8d 	bl	8007cc8 <SDMMC_CmdSetRelAdd>
 80067ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <SD_InitCard+0xae>
    {
      return errorstate;
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	e071      	b.n	800689e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d036      	beq.n	8006830 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	461a      	mov	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f001 fa57 	bl	8007c8a <SDMMC_CmdSendCSD>
 80067dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	e05a      	b.n	800689e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 f8e4 	bl	80079bc <SDIO_GetResponse>
 80067f4:	4602      	mov	r2, r0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2104      	movs	r1, #4
 8006800:	4618      	mov	r0, r3
 8006802:	f001 f8db 	bl	80079bc <SDIO_GetResponse>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2108      	movs	r1, #8
 8006812:	4618      	mov	r0, r3
 8006814:	f001 f8d2 	bl	80079bc <SDIO_GetResponse>
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	210c      	movs	r1, #12
 8006824:	4618      	mov	r0, r3
 8006826:	f001 f8c9 	bl	80079bc <SDIO_GetResponse>
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2104      	movs	r1, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f8c0 	bl	80079bc <SDIO_GetResponse>
 800683c:	4603      	mov	r3, r0
 800683e:	0d1a      	lsrs	r2, r3, #20
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006844:	f107 0310 	add.w	r3, r7, #16
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fd3e 	bl	80062cc <HAL_SD_GetCardCSD>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006856:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800685a:	e020      	b.n	800689e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	f04f 0400 	mov.w	r4, #0
 800686a:	461a      	mov	r2, r3
 800686c:	4623      	mov	r3, r4
 800686e:	4608      	mov	r0, r1
 8006870:	f001 f905 	bl	8007a7e <SDMMC_CmdSelDesel>
 8006874:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <SD_InitCard+0x174>
  {
    return errorstate;
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	e00e      	b.n	800689e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681d      	ldr	r5, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	466c      	mov	r4, sp
 8006888:	f103 0210 	add.w	r2, r3, #16
 800688c:	ca07      	ldmia	r2, {r0, r1, r2}
 800688e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006892:	3304      	adds	r3, #4
 8006894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006896:	4628      	mov	r0, r5
 8006898:	f001 f804 	bl	80078a4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3740      	adds	r7, #64	; 0x40
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080068a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	2300      	movs	r3, #0
 80068ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f8ff 	bl	8007ac4 <SDMMC_CmdGoIdleState>
 80068c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	e072      	b.n	80069b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f912 	bl	8007b00 <SDMMC_CmdOperCond>
 80068dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00d      	beq.n	8006900 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f8e8 	bl	8007ac4 <SDMMC_CmdGoIdleState>
 80068f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <SD_PowerON+0x5e>
    {
      return errorstate;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	e05b      	b.n	80069b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	2b01      	cmp	r3, #1
 800690c:	d137      	bne.n	800697e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f912 	bl	8007b3e <SDMMC_CmdAppCommand>
 800691a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d02d      	beq.n	800697e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006922:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006926:	e047      	b.n	80069b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2100      	movs	r1, #0
 800692e:	4618      	mov	r0, r3
 8006930:	f001 f905 	bl	8007b3e <SDMMC_CmdAppCommand>
 8006934:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <SD_PowerON+0x98>
    {
      return errorstate;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	e03b      	b.n	80069b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	491e      	ldr	r1, [pc, #120]	; (80069c0 <SD_PowerON+0x118>)
 8006946:	4618      	mov	r0, r3
 8006948:	f001 f91b 	bl	8007b82 <SDMMC_CmdAppOperCommand>
 800694c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006958:	e02e      	b.n	80069b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2100      	movs	r1, #0
 8006960:	4618      	mov	r0, r3
 8006962:	f001 f82b 	bl	80079bc <SDIO_GetResponse>
 8006966:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	0fdb      	lsrs	r3, r3, #31
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <SD_PowerON+0xcc>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <SD_PowerON+0xce>
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]

    count++;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	3301      	adds	r3, #1
 800697c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006984:	4293      	cmp	r3, r2
 8006986:	d802      	bhi.n	800698e <SD_PowerON+0xe6>
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0cc      	beq.n	8006928 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006994:	4293      	cmp	r3, r2
 8006996:	d902      	bls.n	800699e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800699c:	e00c      	b.n	80069b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	645a      	str	r2, [r3, #68]	; 0x44
 80069ae:	e002      	b.n	80069b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	c1100000 	.word	0xc1100000

080069c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 ffee 	bl	80079bc <SDIO_GetResponse>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ea:	d102      	bne.n	80069f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069f0:	e02f      	b.n	8006a52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80069f2:	f107 030c 	add.w	r3, r7, #12
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f879 	bl	8006af0 <SD_FindSCR>
 80069fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	e023      	b.n	8006a52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01c      	beq.n	8006a4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f001 f88c 	bl	8007b3e <SDMMC_CmdAppCommand>
 8006a26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	e00f      	b.n	8006a52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2102      	movs	r1, #2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f8c5 	bl	8007bc8 <SDMMC_CmdBusWidth>
 8006a3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	e003      	b.n	8006a52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e001      	b.n	8006a52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b086      	sub	sp, #24
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 ffa3 	bl	80079bc <SDIO_GetResponse>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a80:	d102      	bne.n	8006a88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a86:	e02f      	b.n	8006ae8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f82e 	bl	8006af0 <SD_FindSCR>
 8006a94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	e023      	b.n	8006ae8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01c      	beq.n	8006ae4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f001 f841 	bl	8007b3e <SDMMC_CmdAppCommand>
 8006abc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	e00f      	b.n	8006ae8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 f87a 	bl	8007bc8 <SDMMC_CmdBusWidth>
 8006ad4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	e003      	b.n	8006ae8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e001      	b.n	8006ae8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ae4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006af0:	b590      	push	{r4, r7, lr}
 8006af2:	b08f      	sub	sp, #60	; 0x3c
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006afa:	f7fb f8db 	bl	8001cb4 <HAL_GetTick>
 8006afe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006b04:	2300      	movs	r3, #0
 8006b06:	60bb      	str	r3, [r7, #8]
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2108      	movs	r1, #8
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 ff8f 	bl	8007a3a <SDMMC_CmdBlockLength>
 8006b1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	e0a9      	b.n	8006c7c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	041b      	lsls	r3, r3, #16
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f001 f802 	bl	8007b3e <SDMMC_CmdAppCommand>
 8006b3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	e09a      	b.n	8006c7c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b4c:	2308      	movs	r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006b50:	2330      	movs	r3, #48	; 0x30
 8006b52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006b54:	2302      	movs	r3, #2
 8006b56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f107 0210 	add.w	r2, r7, #16
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 ff39 	bl	80079e2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 f849 	bl	8007c0c <SDMMC_CmdSendSCR>
 8006b7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d022      	beq.n	8006bc8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	e07a      	b.n	8006c7c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6819      	ldr	r1, [r3, #0]
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	f107 0208 	add.w	r2, r7, #8
 8006ba0:	18d4      	adds	r4, r2, r3
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	f000 fea9 	bl	80078fa <SDIO_ReadFIFO>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	6023      	str	r3, [r4, #0]
      index++;
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	3301      	adds	r3, #1
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006bb2:	f7fb f87f 	bl	8001cb4 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d102      	bne.n	8006bc8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc6:	e059      	b.n	8006c7c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bce:	f240 432a 	movw	r3, #1066	; 0x42a
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0d6      	beq.n	8006b86 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2208      	movs	r2, #8
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006bee:	2308      	movs	r3, #8
 8006bf0:	e044      	b.n	8006c7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2202      	movs	r2, #2
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e037      	b.n	8006c7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c22:	2320      	movs	r3, #32
 8006c24:	e02a      	b.n	8006c7c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	061a      	lsls	r2, r3, #24
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	0a1b      	lsrs	r3, r3, #8
 8006c42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	0e1b      	lsrs	r3, r3, #24
 8006c4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	601a      	str	r2, [r3, #0]
    scr++;
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	3304      	adds	r3, #4
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	061a      	lsls	r2, r3, #24
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	0e1b      	lsrs	r3, r3, #24
 8006c74:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	373c      	adds	r7, #60	; 0x3c
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd90      	pop	{r4, r7, pc}

08006c84 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e034      	b.n	8006d04 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7fa fed6 	bl	8001a60 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f000 fcec 	bl	800769c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	f000 fd54 	bl	800777c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6858      	ldr	r0, [r3, #4]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	f000 fd9f 	bl	8007824 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	6892      	ldr	r2, [r2, #8]
 8006cee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	6892      	ldr	r2, [r2, #8]
 8006cfa:	f041 0101 	orr.w	r1, r1, #1
 8006cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e03f      	b.n	8006d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa fda6 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2224      	movs	r2, #36	; 0x24
 8006d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f90b 	bl	8006f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	695a      	ldr	r2, [r3, #20]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b088      	sub	sp, #32
 8006daa:	af02      	add	r7, sp, #8
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	4613      	mov	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	f040 8083 	bne.w	8006ece <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <HAL_UART_Transmit+0x2e>
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e07b      	b.n	8006ed0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <HAL_UART_Transmit+0x40>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e074      	b.n	8006ed0 <HAL_UART_Transmit+0x12a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2221      	movs	r2, #33	; 0x21
 8006df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006dfc:	f7fa ff5a 	bl	8001cb4 <HAL_GetTick>
 8006e00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	88fa      	ldrh	r2, [r7, #6]
 8006e06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006e16:	e042      	b.n	8006e9e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2e:	d122      	bne.n	8006e76 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2200      	movs	r2, #0
 8006e38:	2180      	movs	r1, #128	; 0x80
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f84c 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e042      	b.n	8006ed0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3302      	adds	r3, #2
 8006e6a:	60bb      	str	r3, [r7, #8]
 8006e6c:	e017      	b.n	8006e9e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3301      	adds	r3, #1
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	e013      	b.n	8006e9e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f829 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e01f      	b.n	8006ed0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	60ba      	str	r2, [r7, #8]
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1b7      	bne.n	8006e18 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2140      	movs	r1, #64	; 0x40
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f810 	bl	8006ed8 <UART_WaitOnFlagUntilTimeout>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e006      	b.n	8006ed0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e000      	b.n	8006ed0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006ece:	2302      	movs	r3, #2
  }
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ee8:	e02c      	b.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d028      	beq.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d007      	beq.n	8006f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef8:	f7fa fedc 	bl	8001cb4 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d21d      	bcs.n	8006f44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e00f      	b.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d0c3      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f70:	b085      	sub	sp, #20
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006fae:	f023 030c 	bic.w	r3, r3, #12
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	68f9      	ldr	r1, [r7, #12]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fda:	f040 8199 	bne.w	8007310 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4ac6      	ldr	r2, [pc, #792]	; (80072fc <UART_SetConfig+0x390>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00f      	beq.n	8007008 <UART_SetConfig+0x9c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4ac4      	ldr	r2, [pc, #784]	; (8007300 <UART_SetConfig+0x394>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00a      	beq.n	8007008 <UART_SetConfig+0x9c>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4ac3      	ldr	r2, [pc, #780]	; (8007304 <UART_SetConfig+0x398>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d005      	beq.n	8007008 <UART_SetConfig+0x9c>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4ac1      	ldr	r2, [pc, #772]	; (8007308 <UART_SetConfig+0x39c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	f040 80bd 	bne.w	8007182 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007008:	f7fe fa9e 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 800700c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	461d      	mov	r5, r3
 8007012:	f04f 0600 	mov.w	r6, #0
 8007016:	46a8      	mov	r8, r5
 8007018:	46b1      	mov	r9, r6
 800701a:	eb18 0308 	adds.w	r3, r8, r8
 800701e:	eb49 0409 	adc.w	r4, r9, r9
 8007022:	4698      	mov	r8, r3
 8007024:	46a1      	mov	r9, r4
 8007026:	eb18 0805 	adds.w	r8, r8, r5
 800702a:	eb49 0906 	adc.w	r9, r9, r6
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800703a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800703e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007042:	4688      	mov	r8, r1
 8007044:	4691      	mov	r9, r2
 8007046:	eb18 0005 	adds.w	r0, r8, r5
 800704a:	eb49 0106 	adc.w	r1, r9, r6
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	461d      	mov	r5, r3
 8007054:	f04f 0600 	mov.w	r6, #0
 8007058:	196b      	adds	r3, r5, r5
 800705a:	eb46 0406 	adc.w	r4, r6, r6
 800705e:	461a      	mov	r2, r3
 8007060:	4623      	mov	r3, r4
 8007062:	f7f9 f8e1 	bl	8000228 <__aeabi_uldivmod>
 8007066:	4603      	mov	r3, r0
 8007068:	460c      	mov	r4, r1
 800706a:	461a      	mov	r2, r3
 800706c:	4ba7      	ldr	r3, [pc, #668]	; (800730c <UART_SetConfig+0x3a0>)
 800706e:	fba3 2302 	umull	r2, r3, r3, r2
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	461d      	mov	r5, r3
 800707c:	f04f 0600 	mov.w	r6, #0
 8007080:	46a9      	mov	r9, r5
 8007082:	46b2      	mov	sl, r6
 8007084:	eb19 0309 	adds.w	r3, r9, r9
 8007088:	eb4a 040a 	adc.w	r4, sl, sl
 800708c:	4699      	mov	r9, r3
 800708e:	46a2      	mov	sl, r4
 8007090:	eb19 0905 	adds.w	r9, r9, r5
 8007094:	eb4a 0a06 	adc.w	sl, sl, r6
 8007098:	f04f 0100 	mov.w	r1, #0
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070ac:	4689      	mov	r9, r1
 80070ae:	4692      	mov	sl, r2
 80070b0:	eb19 0005 	adds.w	r0, r9, r5
 80070b4:	eb4a 0106 	adc.w	r1, sl, r6
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	461d      	mov	r5, r3
 80070be:	f04f 0600 	mov.w	r6, #0
 80070c2:	196b      	adds	r3, r5, r5
 80070c4:	eb46 0406 	adc.w	r4, r6, r6
 80070c8:	461a      	mov	r2, r3
 80070ca:	4623      	mov	r3, r4
 80070cc:	f7f9 f8ac 	bl	8000228 <__aeabi_uldivmod>
 80070d0:	4603      	mov	r3, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	461a      	mov	r2, r3
 80070d6:	4b8d      	ldr	r3, [pc, #564]	; (800730c <UART_SetConfig+0x3a0>)
 80070d8:	fba3 1302 	umull	r1, r3, r3, r2
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	2164      	movs	r1, #100	; 0x64
 80070e0:	fb01 f303 	mul.w	r3, r1, r3
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	3332      	adds	r3, #50	; 0x32
 80070ea:	4a88      	ldr	r2, [pc, #544]	; (800730c <UART_SetConfig+0x3a0>)
 80070ec:	fba2 2303 	umull	r2, r3, r2, r3
 80070f0:	095b      	lsrs	r3, r3, #5
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070f8:	4498      	add	r8, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	461d      	mov	r5, r3
 80070fe:	f04f 0600 	mov.w	r6, #0
 8007102:	46a9      	mov	r9, r5
 8007104:	46b2      	mov	sl, r6
 8007106:	eb19 0309 	adds.w	r3, r9, r9
 800710a:	eb4a 040a 	adc.w	r4, sl, sl
 800710e:	4699      	mov	r9, r3
 8007110:	46a2      	mov	sl, r4
 8007112:	eb19 0905 	adds.w	r9, r9, r5
 8007116:	eb4a 0a06 	adc.w	sl, sl, r6
 800711a:	f04f 0100 	mov.w	r1, #0
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800712a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800712e:	4689      	mov	r9, r1
 8007130:	4692      	mov	sl, r2
 8007132:	eb19 0005 	adds.w	r0, r9, r5
 8007136:	eb4a 0106 	adc.w	r1, sl, r6
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	461d      	mov	r5, r3
 8007140:	f04f 0600 	mov.w	r6, #0
 8007144:	196b      	adds	r3, r5, r5
 8007146:	eb46 0406 	adc.w	r4, r6, r6
 800714a:	461a      	mov	r2, r3
 800714c:	4623      	mov	r3, r4
 800714e:	f7f9 f86b 	bl	8000228 <__aeabi_uldivmod>
 8007152:	4603      	mov	r3, r0
 8007154:	460c      	mov	r4, r1
 8007156:	461a      	mov	r2, r3
 8007158:	4b6c      	ldr	r3, [pc, #432]	; (800730c <UART_SetConfig+0x3a0>)
 800715a:	fba3 1302 	umull	r1, r3, r3, r2
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2164      	movs	r1, #100	; 0x64
 8007162:	fb01 f303 	mul.w	r3, r1, r3
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	3332      	adds	r3, #50	; 0x32
 800716c:	4a67      	ldr	r2, [pc, #412]	; (800730c <UART_SetConfig+0x3a0>)
 800716e:	fba2 2303 	umull	r2, r3, r2, r3
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f003 0207 	and.w	r2, r3, #7
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4442      	add	r2, r8
 800717e:	609a      	str	r2, [r3, #8]
 8007180:	e27d      	b.n	800767e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007182:	f7fe f9cd 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 8007186:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	461d      	mov	r5, r3
 800718c:	f04f 0600 	mov.w	r6, #0
 8007190:	46a8      	mov	r8, r5
 8007192:	46b1      	mov	r9, r6
 8007194:	eb18 0308 	adds.w	r3, r8, r8
 8007198:	eb49 0409 	adc.w	r4, r9, r9
 800719c:	4698      	mov	r8, r3
 800719e:	46a1      	mov	r9, r4
 80071a0:	eb18 0805 	adds.w	r8, r8, r5
 80071a4:	eb49 0906 	adc.w	r9, r9, r6
 80071a8:	f04f 0100 	mov.w	r1, #0
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071bc:	4688      	mov	r8, r1
 80071be:	4691      	mov	r9, r2
 80071c0:	eb18 0005 	adds.w	r0, r8, r5
 80071c4:	eb49 0106 	adc.w	r1, r9, r6
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	461d      	mov	r5, r3
 80071ce:	f04f 0600 	mov.w	r6, #0
 80071d2:	196b      	adds	r3, r5, r5
 80071d4:	eb46 0406 	adc.w	r4, r6, r6
 80071d8:	461a      	mov	r2, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	f7f9 f824 	bl	8000228 <__aeabi_uldivmod>
 80071e0:	4603      	mov	r3, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <UART_SetConfig+0x3a0>)
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	461d      	mov	r5, r3
 80071f6:	f04f 0600 	mov.w	r6, #0
 80071fa:	46a9      	mov	r9, r5
 80071fc:	46b2      	mov	sl, r6
 80071fe:	eb19 0309 	adds.w	r3, r9, r9
 8007202:	eb4a 040a 	adc.w	r4, sl, sl
 8007206:	4699      	mov	r9, r3
 8007208:	46a2      	mov	sl, r4
 800720a:	eb19 0905 	adds.w	r9, r9, r5
 800720e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007212:	f04f 0100 	mov.w	r1, #0
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800721e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007222:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007226:	4689      	mov	r9, r1
 8007228:	4692      	mov	sl, r2
 800722a:	eb19 0005 	adds.w	r0, r9, r5
 800722e:	eb4a 0106 	adc.w	r1, sl, r6
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	461d      	mov	r5, r3
 8007238:	f04f 0600 	mov.w	r6, #0
 800723c:	196b      	adds	r3, r5, r5
 800723e:	eb46 0406 	adc.w	r4, r6, r6
 8007242:	461a      	mov	r2, r3
 8007244:	4623      	mov	r3, r4
 8007246:	f7f8 ffef 	bl	8000228 <__aeabi_uldivmod>
 800724a:	4603      	mov	r3, r0
 800724c:	460c      	mov	r4, r1
 800724e:	461a      	mov	r2, r3
 8007250:	4b2e      	ldr	r3, [pc, #184]	; (800730c <UART_SetConfig+0x3a0>)
 8007252:	fba3 1302 	umull	r1, r3, r3, r2
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	2164      	movs	r1, #100	; 0x64
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	3332      	adds	r3, #50	; 0x32
 8007264:	4a29      	ldr	r2, [pc, #164]	; (800730c <UART_SetConfig+0x3a0>)
 8007266:	fba2 2303 	umull	r2, r3, r2, r3
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007272:	4498      	add	r8, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	461d      	mov	r5, r3
 8007278:	f04f 0600 	mov.w	r6, #0
 800727c:	46a9      	mov	r9, r5
 800727e:	46b2      	mov	sl, r6
 8007280:	eb19 0309 	adds.w	r3, r9, r9
 8007284:	eb4a 040a 	adc.w	r4, sl, sl
 8007288:	4699      	mov	r9, r3
 800728a:	46a2      	mov	sl, r4
 800728c:	eb19 0905 	adds.w	r9, r9, r5
 8007290:	eb4a 0a06 	adc.w	sl, sl, r6
 8007294:	f04f 0100 	mov.w	r1, #0
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072a8:	4689      	mov	r9, r1
 80072aa:	4692      	mov	sl, r2
 80072ac:	eb19 0005 	adds.w	r0, r9, r5
 80072b0:	eb4a 0106 	adc.w	r1, sl, r6
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	461d      	mov	r5, r3
 80072ba:	f04f 0600 	mov.w	r6, #0
 80072be:	196b      	adds	r3, r5, r5
 80072c0:	eb46 0406 	adc.w	r4, r6, r6
 80072c4:	461a      	mov	r2, r3
 80072c6:	4623      	mov	r3, r4
 80072c8:	f7f8 ffae 	bl	8000228 <__aeabi_uldivmod>
 80072cc:	4603      	mov	r3, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	461a      	mov	r2, r3
 80072d2:	4b0e      	ldr	r3, [pc, #56]	; (800730c <UART_SetConfig+0x3a0>)
 80072d4:	fba3 1302 	umull	r1, r3, r3, r2
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	2164      	movs	r1, #100	; 0x64
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	00db      	lsls	r3, r3, #3
 80072e4:	3332      	adds	r3, #50	; 0x32
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <UART_SetConfig+0x3a0>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	f003 0207 	and.w	r2, r3, #7
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4442      	add	r2, r8
 80072f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80072fa:	e1c0      	b.n	800767e <UART_SetConfig+0x712>
 80072fc:	40011000 	.word	0x40011000
 8007300:	40011400 	.word	0x40011400
 8007304:	40011800 	.word	0x40011800
 8007308:	40011c00 	.word	0x40011c00
 800730c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4adc      	ldr	r2, [pc, #880]	; (8007688 <UART_SetConfig+0x71c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00f      	beq.n	800733a <UART_SetConfig+0x3ce>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4adb      	ldr	r2, [pc, #876]	; (800768c <UART_SetConfig+0x720>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00a      	beq.n	800733a <UART_SetConfig+0x3ce>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4ad9      	ldr	r2, [pc, #868]	; (8007690 <UART_SetConfig+0x724>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d005      	beq.n	800733a <UART_SetConfig+0x3ce>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4ad8      	ldr	r2, [pc, #864]	; (8007694 <UART_SetConfig+0x728>)
 8007334:	4293      	cmp	r3, r2
 8007336:	f040 80d1 	bne.w	80074dc <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800733a:	f7fe f905 	bl	8005548 <HAL_RCC_GetPCLK2Freq>
 800733e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	469a      	mov	sl, r3
 8007344:	f04f 0b00 	mov.w	fp, #0
 8007348:	46d0      	mov	r8, sl
 800734a:	46d9      	mov	r9, fp
 800734c:	eb18 0308 	adds.w	r3, r8, r8
 8007350:	eb49 0409 	adc.w	r4, r9, r9
 8007354:	4698      	mov	r8, r3
 8007356:	46a1      	mov	r9, r4
 8007358:	eb18 080a 	adds.w	r8, r8, sl
 800735c:	eb49 090b 	adc.w	r9, r9, fp
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800736c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007370:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007374:	4688      	mov	r8, r1
 8007376:	4691      	mov	r9, r2
 8007378:	eb1a 0508 	adds.w	r5, sl, r8
 800737c:	eb4b 0609 	adc.w	r6, fp, r9
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4619      	mov	r1, r3
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	f04f 0400 	mov.w	r4, #0
 8007392:	0094      	lsls	r4, r2, #2
 8007394:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007398:	008b      	lsls	r3, r1, #2
 800739a:	461a      	mov	r2, r3
 800739c:	4623      	mov	r3, r4
 800739e:	4628      	mov	r0, r5
 80073a0:	4631      	mov	r1, r6
 80073a2:	f7f8 ff41 	bl	8000228 <__aeabi_uldivmod>
 80073a6:	4603      	mov	r3, r0
 80073a8:	460c      	mov	r4, r1
 80073aa:	461a      	mov	r2, r3
 80073ac:	4bba      	ldr	r3, [pc, #744]	; (8007698 <UART_SetConfig+0x72c>)
 80073ae:	fba3 2302 	umull	r2, r3, r3, r2
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	469b      	mov	fp, r3
 80073bc:	f04f 0c00 	mov.w	ip, #0
 80073c0:	46d9      	mov	r9, fp
 80073c2:	46e2      	mov	sl, ip
 80073c4:	eb19 0309 	adds.w	r3, r9, r9
 80073c8:	eb4a 040a 	adc.w	r4, sl, sl
 80073cc:	4699      	mov	r9, r3
 80073ce:	46a2      	mov	sl, r4
 80073d0:	eb19 090b 	adds.w	r9, r9, fp
 80073d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073d8:	f04f 0100 	mov.w	r1, #0
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073ec:	4689      	mov	r9, r1
 80073ee:	4692      	mov	sl, r2
 80073f0:	eb1b 0509 	adds.w	r5, fp, r9
 80073f4:	eb4c 060a 	adc.w	r6, ip, sl
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	4619      	mov	r1, r3
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	f04f 0400 	mov.w	r4, #0
 800740a:	0094      	lsls	r4, r2, #2
 800740c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007410:	008b      	lsls	r3, r1, #2
 8007412:	461a      	mov	r2, r3
 8007414:	4623      	mov	r3, r4
 8007416:	4628      	mov	r0, r5
 8007418:	4631      	mov	r1, r6
 800741a:	f7f8 ff05 	bl	8000228 <__aeabi_uldivmod>
 800741e:	4603      	mov	r3, r0
 8007420:	460c      	mov	r4, r1
 8007422:	461a      	mov	r2, r3
 8007424:	4b9c      	ldr	r3, [pc, #624]	; (8007698 <UART_SetConfig+0x72c>)
 8007426:	fba3 1302 	umull	r1, r3, r3, r2
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	2164      	movs	r1, #100	; 0x64
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	3332      	adds	r3, #50	; 0x32
 8007438:	4a97      	ldr	r2, [pc, #604]	; (8007698 <UART_SetConfig+0x72c>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007444:	4498      	add	r8, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	469b      	mov	fp, r3
 800744a:	f04f 0c00 	mov.w	ip, #0
 800744e:	46d9      	mov	r9, fp
 8007450:	46e2      	mov	sl, ip
 8007452:	eb19 0309 	adds.w	r3, r9, r9
 8007456:	eb4a 040a 	adc.w	r4, sl, sl
 800745a:	4699      	mov	r9, r3
 800745c:	46a2      	mov	sl, r4
 800745e:	eb19 090b 	adds.w	r9, r9, fp
 8007462:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007466:	f04f 0100 	mov.w	r1, #0
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800747a:	4689      	mov	r9, r1
 800747c:	4692      	mov	sl, r2
 800747e:	eb1b 0509 	adds.w	r5, fp, r9
 8007482:	eb4c 060a 	adc.w	r6, ip, sl
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	f04f 0400 	mov.w	r4, #0
 8007498:	0094      	lsls	r4, r2, #2
 800749a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800749e:	008b      	lsls	r3, r1, #2
 80074a0:	461a      	mov	r2, r3
 80074a2:	4623      	mov	r3, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	4631      	mov	r1, r6
 80074a8:	f7f8 febe 	bl	8000228 <__aeabi_uldivmod>
 80074ac:	4603      	mov	r3, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b79      	ldr	r3, [pc, #484]	; (8007698 <UART_SetConfig+0x72c>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	; 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	3332      	adds	r3, #50	; 0x32
 80074c6:	4a74      	ldr	r2, [pc, #464]	; (8007698 <UART_SetConfig+0x72c>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f003 020f 	and.w	r2, r3, #15
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4442      	add	r2, r8
 80074d8:	609a      	str	r2, [r3, #8]
 80074da:	e0d0      	b.n	800767e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80074dc:	f7fe f820 	bl	8005520 <HAL_RCC_GetPCLK1Freq>
 80074e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	469a      	mov	sl, r3
 80074e6:	f04f 0b00 	mov.w	fp, #0
 80074ea:	46d0      	mov	r8, sl
 80074ec:	46d9      	mov	r9, fp
 80074ee:	eb18 0308 	adds.w	r3, r8, r8
 80074f2:	eb49 0409 	adc.w	r4, r9, r9
 80074f6:	4698      	mov	r8, r3
 80074f8:	46a1      	mov	r9, r4
 80074fa:	eb18 080a 	adds.w	r8, r8, sl
 80074fe:	eb49 090b 	adc.w	r9, r9, fp
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800750e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007512:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007516:	4688      	mov	r8, r1
 8007518:	4691      	mov	r9, r2
 800751a:	eb1a 0508 	adds.w	r5, sl, r8
 800751e:	eb4b 0609 	adc.w	r6, fp, r9
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	4619      	mov	r1, r3
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	f04f 0400 	mov.w	r4, #0
 8007534:	0094      	lsls	r4, r2, #2
 8007536:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800753a:	008b      	lsls	r3, r1, #2
 800753c:	461a      	mov	r2, r3
 800753e:	4623      	mov	r3, r4
 8007540:	4628      	mov	r0, r5
 8007542:	4631      	mov	r1, r6
 8007544:	f7f8 fe70 	bl	8000228 <__aeabi_uldivmod>
 8007548:	4603      	mov	r3, r0
 800754a:	460c      	mov	r4, r1
 800754c:	461a      	mov	r2, r3
 800754e:	4b52      	ldr	r3, [pc, #328]	; (8007698 <UART_SetConfig+0x72c>)
 8007550:	fba3 2302 	umull	r2, r3, r3, r2
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	469b      	mov	fp, r3
 800755e:	f04f 0c00 	mov.w	ip, #0
 8007562:	46d9      	mov	r9, fp
 8007564:	46e2      	mov	sl, ip
 8007566:	eb19 0309 	adds.w	r3, r9, r9
 800756a:	eb4a 040a 	adc.w	r4, sl, sl
 800756e:	4699      	mov	r9, r3
 8007570:	46a2      	mov	sl, r4
 8007572:	eb19 090b 	adds.w	r9, r9, fp
 8007576:	eb4a 0a0c 	adc.w	sl, sl, ip
 800757a:	f04f 0100 	mov.w	r1, #0
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800758a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800758e:	4689      	mov	r9, r1
 8007590:	4692      	mov	sl, r2
 8007592:	eb1b 0509 	adds.w	r5, fp, r9
 8007596:	eb4c 060a 	adc.w	r6, ip, sl
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	4619      	mov	r1, r3
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	f04f 0400 	mov.w	r4, #0
 80075ac:	0094      	lsls	r4, r2, #2
 80075ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075b2:	008b      	lsls	r3, r1, #2
 80075b4:	461a      	mov	r2, r3
 80075b6:	4623      	mov	r3, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	4631      	mov	r1, r6
 80075bc:	f7f8 fe34 	bl	8000228 <__aeabi_uldivmod>
 80075c0:	4603      	mov	r3, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	461a      	mov	r2, r3
 80075c6:	4b34      	ldr	r3, [pc, #208]	; (8007698 <UART_SetConfig+0x72c>)
 80075c8:	fba3 1302 	umull	r1, r3, r3, r2
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	2164      	movs	r1, #100	; 0x64
 80075d0:	fb01 f303 	mul.w	r3, r1, r3
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	3332      	adds	r3, #50	; 0x32
 80075da:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <UART_SetConfig+0x72c>)
 80075dc:	fba2 2303 	umull	r2, r3, r2, r3
 80075e0:	095b      	lsrs	r3, r3, #5
 80075e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075e6:	4498      	add	r8, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	469b      	mov	fp, r3
 80075ec:	f04f 0c00 	mov.w	ip, #0
 80075f0:	46d9      	mov	r9, fp
 80075f2:	46e2      	mov	sl, ip
 80075f4:	eb19 0309 	adds.w	r3, r9, r9
 80075f8:	eb4a 040a 	adc.w	r4, sl, sl
 80075fc:	4699      	mov	r9, r3
 80075fe:	46a2      	mov	sl, r4
 8007600:	eb19 090b 	adds.w	r9, r9, fp
 8007604:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007608:	f04f 0100 	mov.w	r1, #0
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800761c:	4689      	mov	r9, r1
 800761e:	4692      	mov	sl, r2
 8007620:	eb1b 0509 	adds.w	r5, fp, r9
 8007624:	eb4c 060a 	adc.w	r6, ip, sl
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4619      	mov	r1, r3
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	f04f 0400 	mov.w	r4, #0
 800763a:	0094      	lsls	r4, r2, #2
 800763c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007640:	008b      	lsls	r3, r1, #2
 8007642:	461a      	mov	r2, r3
 8007644:	4623      	mov	r3, r4
 8007646:	4628      	mov	r0, r5
 8007648:	4631      	mov	r1, r6
 800764a:	f7f8 fded 	bl	8000228 <__aeabi_uldivmod>
 800764e:	4603      	mov	r3, r0
 8007650:	460c      	mov	r4, r1
 8007652:	461a      	mov	r2, r3
 8007654:	4b10      	ldr	r3, [pc, #64]	; (8007698 <UART_SetConfig+0x72c>)
 8007656:	fba3 1302 	umull	r1, r3, r3, r2
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	2164      	movs	r1, #100	; 0x64
 800765e:	fb01 f303 	mul.w	r3, r1, r3
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	3332      	adds	r3, #50	; 0x32
 8007668:	4a0b      	ldr	r2, [pc, #44]	; (8007698 <UART_SetConfig+0x72c>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4442      	add	r2, r8
 800767a:	609a      	str	r2, [r3, #8]
}
 800767c:	e7ff      	b.n	800767e <UART_SetConfig+0x712>
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	40011000 	.word	0x40011000
 800768c:	40011400 	.word	0x40011400
 8007690:	40011800 	.word	0x40011800
 8007694:	40011c00 	.word	0x40011c00
 8007698:	51eb851f 	.word	0x51eb851f

0800769c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4b2f      	ldr	r3, [pc, #188]	; (8007778 <FSMC_NORSRAM_Init+0xdc>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80076c6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80076cc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80076d2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80076d8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80076de:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80076e4:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80076ea:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80076f0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80076f6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80076fc:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8007702:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007708:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800770e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b08      	cmp	r3, #8
 800771c:	d103      	bne.n	8007726 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007724:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68f9      	ldr	r1, [r7, #12]
 800772e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800773a:	d10a      	bne.n	8007752 <FSMC_NORSRAM_Init+0xb6>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d006      	beq.n	8007768 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	ffc00480 	.word	0xffc00480

0800777c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800779e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80077aa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80077b2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80077ba:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80077c4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	3b02      	subs	r3, #2
 80077cc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80077ce:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80077d4:	4313      	orrs	r3, r2
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6979      	ldr	r1, [r7, #20]
 80077e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f4:	d10e      	bne.n	8007814 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077fe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	3b01      	subs	r3, #1
 8007806:	051b      	lsls	r3, r3, #20
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
	...

08007824 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800783c:	d122      	bne.n	8007884 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007846:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800784c:	4013      	ands	r3, r2
 800784e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800785a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007862:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800786a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007870:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6979      	ldr	r1, [r7, #20]
 800787e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007882:	e005      	b.n	8007890 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800788c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	cff00000 	.word	0xcff00000

080078a4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80078a4:	b084      	sub	sp, #16
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	f107 001c 	add.w	r0, r7, #28
 80078b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80078ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80078bc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80078be:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80078c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80078c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80078ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80078ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80078de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	b004      	add	sp, #16
 80078f8:	4770      	bx	lr

080078fa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2203      	movs	r2, #3
 8007920:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007922:	2002      	movs	r0, #2
 8007924:	f7fa f9d2 	bl	8001ccc <HAL_Delay>
  
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0303 	and.w	r3, r3, #3
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800796c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007972:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007978:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007988:	f023 030f 	bic.w	r3, r3, #15
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	b2db      	uxtb	r3, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3314      	adds	r3, #20
 80079ca:	461a      	mov	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	4413      	add	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
}  
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007a0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007a14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0

}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b088      	sub	sp, #32
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007a48:	2310      	movs	r3, #16
 8007a4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a5a:	f107 0308 	add.w	r3, r7, #8
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ff74 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6a:	2110      	movs	r1, #16
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f975 	bl	8007d5c <SDMMC_GetCmdResp1>
 8007a72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a74:	69fb      	ldr	r3, [r7, #28]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b08a      	sub	sp, #40	; 0x28
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a8e:	2307      	movs	r3, #7
 8007a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a92:	2340      	movs	r3, #64	; 0x40
 8007a94:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a9e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007aa0:	f107 0310 	add.w	r3, r7, #16
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7ff ff51 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab0:	2107      	movs	r1, #7
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f952 	bl	8007d5c <SDMMC_GetCmdResp1>
 8007ab8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3728      	adds	r7, #40	; 0x28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b088      	sub	sp, #32
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ae2:	f107 0308 	add.w	r3, r7, #8
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7ff ff30 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f90c 	bl	8007d0c <SDMMC_GetCmdError>
 8007af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007af6:	69fb      	ldr	r3, [r7, #28]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007b08:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007b0e:	2308      	movs	r3, #8
 8007b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b12:	2340      	movs	r3, #64	; 0x40
 8007b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b20:	f107 0308 	add.w	r3, r7, #8
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff ff11 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 faf5 	bl	800811c <SDMMC_GetCmdResp7>
 8007b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b34:	69fb      	ldr	r3, [r7, #28]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3720      	adds	r7, #32
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b088      	sub	sp, #32
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b4c:	2337      	movs	r3, #55	; 0x37
 8007b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b54:	2300      	movs	r3, #0
 8007b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b5e:	f107 0308 	add.w	r3, r7, #8
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff fef2 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b6e:	2137      	movs	r1, #55	; 0x37
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8f3 	bl	8007d5c <SDMMC_GetCmdResp1>
 8007b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b78:	69fb      	ldr	r3, [r7, #28]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b088      	sub	sp, #32
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b98:	2329      	movs	r3, #41	; 0x29
 8007b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b9c:	2340      	movs	r3, #64	; 0x40
 8007b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007baa:	f107 0308 	add.w	r3, r7, #8
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f7ff fecc 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa02 	bl	8007fc0 <SDMMC_GetCmdResp3>
 8007bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bbe:	69fb      	ldr	r3, [r7, #28]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007bd6:	2306      	movs	r3, #6
 8007bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bda:	2340      	movs	r3, #64	; 0x40
 8007bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007be8:	f107 0308 	add.w	r3, r7, #8
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fead 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf8:	2106      	movs	r1, #6
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8ae 	bl	8007d5c <SDMMC_GetCmdResp1>
 8007c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c02:	69fb      	ldr	r3, [r7, #28]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007c18:	2333      	movs	r3, #51	; 0x33
 8007c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c1c:	2340      	movs	r3, #64	; 0x40
 8007c1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c2a:	f107 0308 	add.w	r3, r7, #8
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fe8c 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3a:	2133      	movs	r1, #51	; 0x33
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f88d 	bl	8007d5c <SDMMC_GetCmdResp1>
 8007c42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c44:	69fb      	ldr	r3, [r7, #28]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c5e:	23c0      	movs	r3, #192	; 0xc0
 8007c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c6c:	f107 0308 	add.w	r3, r7, #8
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fe6b 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f95b 	bl	8007f34 <SDMMC_GetCmdResp2>
 8007c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c80:	69fb      	ldr	r3, [r7, #28]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b088      	sub	sp, #32
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007c98:	2309      	movs	r3, #9
 8007c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007c9c:	23c0      	movs	r3, #192	; 0xc0
 8007c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007caa:	f107 0308 	add.w	r3, r7, #8
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fe4c 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f93c 	bl	8007f34 <SDMMC_GetCmdResp2>
 8007cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cda:	2340      	movs	r3, #64	; 0x40
 8007cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ce6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ce8:	f107 0308 	add.w	r3, r7, #8
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff fe2d 	bl	800794e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	2103      	movs	r1, #3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f99b 	bl	8008034 <SDMMC_GetCmdResp6>
 8007cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d00:	69fb      	ldr	r3, [r7, #28]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3720      	adds	r7, #32
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007d0c:	b490      	push	{r4, r7}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <SDMMC_GetCmdError+0x48>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a0f      	ldr	r2, [pc, #60]	; (8007d58 <SDMMC_GetCmdError+0x4c>)
 8007d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d1e:	0a5b      	lsrs	r3, r3, #9
 8007d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d28:	4623      	mov	r3, r4
 8007d2a:	1e5c      	subs	r4, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d34:	e009      	b.n	8007d4a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0f2      	beq.n	8007d28 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	22c5      	movs	r2, #197	; 0xc5
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc90      	pop	{r4, r7}
 8007d52:	4770      	bx	lr
 8007d54:	20000000 	.word	0x20000000
 8007d58:	10624dd3 	.word	0x10624dd3

08007d5c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007d5c:	b590      	push	{r4, r7, lr}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	460b      	mov	r3, r1
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007d6a:	4b6f      	ldr	r3, [pc, #444]	; (8007f28 <SDMMC_GetCmdResp1+0x1cc>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a6f      	ldr	r2, [pc, #444]	; (8007f2c <SDMMC_GetCmdResp1+0x1d0>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	0a5b      	lsrs	r3, r3, #9
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007d7c:	4623      	mov	r3, r4
 8007d7e:	1e5c      	subs	r4, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007d88:	e0c9      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d8e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0f0      	beq.n	8007d7c <SDMMC_GetCmdResp1+0x20>
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1eb      	bne.n	8007d7c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2204      	movs	r2, #4
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007db6:	2304      	movs	r3, #4
 8007db8:	e0b1      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0a6      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	22c5      	movs	r2, #197	; 0xc5
 8007dd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f7ff fde3 	bl	80079a2 <SDIO_GetCommandResponse>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	7afb      	ldrb	r3, [r7, #11]
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d001      	beq.n	8007dea <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e099      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff fde5 	bl	80079bc <SDIO_GetResponse>
 8007df2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4b4e      	ldr	r3, [pc, #312]	; (8007f30 <SDMMC_GetCmdResp1+0x1d4>)
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e08d      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da02      	bge.n	8007e0e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e0c:	e087      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	e080      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007e26:	2380      	movs	r3, #128	; 0x80
 8007e28:	e079      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e38:	e071      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e48:	e069      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e58:	e061      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e68:	e059      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e78:	e051      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e88:	e049      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e98:	e041      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea8:	e039      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007eb8:	e031      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007ec4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007ec8:	e029      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ed4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ed8:	e021      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007ee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ee8:	e019      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ef8:	e011      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007f04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007f08:	e009      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f003 0308 	and.w	r3, r3, #8
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007f14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007f18:	e001      	b.n	8007f1e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd90      	pop	{r4, r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000000 	.word	0x20000000
 8007f2c:	10624dd3 	.word	0x10624dd3
 8007f30:	fdffe008 	.word	0xfdffe008

08007f34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007f34:	b490      	push	{r4, r7}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f3c:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <SDMMC_GetCmdResp2+0x84>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a1e      	ldr	r2, [pc, #120]	; (8007fbc <SDMMC_GetCmdResp2+0x88>)
 8007f42:	fba2 2303 	umull	r2, r3, r2, r3
 8007f46:	0a5b      	lsrs	r3, r3, #9
 8007f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007f50:	4623      	mov	r3, r4
 8007f52:	1e5c      	subs	r4, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f5c:	e026      	b.n	8007fac <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f0      	beq.n	8007f50 <SDMMC_GetCmdResp2+0x1c>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1eb      	bne.n	8007f50 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2204      	movs	r2, #4
 8007f88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f8a:	2304      	movs	r3, #4
 8007f8c:	e00e      	b.n	8007fac <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e003      	b.n	8007fac <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	22c5      	movs	r2, #197	; 0xc5
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc90      	pop	{r4, r7}
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000000 	.word	0x20000000
 8007fbc:	10624dd3 	.word	0x10624dd3

08007fc0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007fc0:	b490      	push	{r4, r7}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fc8:	4b18      	ldr	r3, [pc, #96]	; (800802c <SDMMC_GetCmdResp3+0x6c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	; (8008030 <SDMMC_GetCmdResp3+0x70>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	0a5b      	lsrs	r3, r3, #9
 8007fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007fdc:	4623      	mov	r3, r4
 8007fde:	1e5c      	subs	r4, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d102      	bne.n	8007fea <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fe8:	e01b      	b.n	8008022 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f0      	beq.n	8007fdc <SDMMC_GetCmdResp3+0x1c>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1eb      	bne.n	8007fdc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d004      	beq.n	800801a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2204      	movs	r2, #4
 8008014:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008016:	2304      	movs	r3, #4
 8008018:	e003      	b.n	8008022 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	22c5      	movs	r2, #197	; 0xc5
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bc90      	pop	{r4, r7}
 800802a:	4770      	bx	lr
 800802c:	20000000 	.word	0x20000000
 8008030:	10624dd3 	.word	0x10624dd3

08008034 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008034:	b590      	push	{r4, r7, lr}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008042:	4b34      	ldr	r3, [pc, #208]	; (8008114 <SDMMC_GetCmdResp6+0xe0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a34      	ldr	r2, [pc, #208]	; (8008118 <SDMMC_GetCmdResp6+0xe4>)
 8008048:	fba2 2303 	umull	r2, r3, r2, r3
 800804c:	0a5b      	lsrs	r3, r3, #9
 800804e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008052:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008056:	4623      	mov	r3, r4
 8008058:	1e5c      	subs	r4, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d102      	bne.n	8008064 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800805e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008062:	e052      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008068:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008070:	2b00      	cmp	r3, #0
 8008072:	d0f0      	beq.n	8008056 <SDMMC_GetCmdResp6+0x22>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1eb      	bne.n	8008056 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2204      	movs	r2, #4
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008090:	2304      	movs	r3, #4
 8008092:	e03a      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d004      	beq.n	80080aa <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e02f      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff fc79 	bl	80079a2 <SDIO_GetCommandResponse>
 80080b0:	4603      	mov	r3, r0
 80080b2:	461a      	mov	r2, r3
 80080b4:	7afb      	ldrb	r3, [r7, #11]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d001      	beq.n	80080be <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e025      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	22c5      	movs	r2, #197	; 0xc5
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80080c4:	2100      	movs	r1, #0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fc78 	bl	80079bc <SDIO_GetResponse>
 80080cc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d106      	bne.n	80080e6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	0c1b      	lsrs	r3, r3, #16
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e011      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80080f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080f4:	e009      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008104:	e001      	b.n	800810a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	bd90      	pop	{r4, r7, pc}
 8008112:	bf00      	nop
 8008114:	20000000 	.word	0x20000000
 8008118:	10624dd3 	.word	0x10624dd3

0800811c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800811c:	b490      	push	{r4, r7}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008124:	4b21      	ldr	r3, [pc, #132]	; (80081ac <SDMMC_GetCmdResp7+0x90>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a21      	ldr	r2, [pc, #132]	; (80081b0 <SDMMC_GetCmdResp7+0x94>)
 800812a:	fba2 2303 	umull	r2, r3, r2, r3
 800812e:	0a5b      	lsrs	r3, r3, #9
 8008130:	f241 3288 	movw	r2, #5000	; 0x1388
 8008134:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008138:	4623      	mov	r3, r4
 800813a:	1e5c      	subs	r4, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d102      	bne.n	8008146 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008144:	e02c      	b.n	80081a0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <SDMMC_GetCmdResp7+0x1c>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1eb      	bne.n	8008138 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2204      	movs	r2, #4
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008172:	2304      	movs	r3, #4
 8008174:	e014      	b.n	80081a0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008188:	2301      	movs	r3, #1
 800818a:	e009      	b.n	80081a0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800819e:	2300      	movs	r3, #0
  
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc90      	pop	{r4, r7}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000000 	.word	0x20000000
 80081b0:	10624dd3 	.word	0x10624dd3

080081b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081b4:	b084      	sub	sp, #16
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	f107 001c 	add.w	r0, r7, #28
 80081c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d122      	bne.n	8008212 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80081e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d105      	bne.n	8008206 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f94a 	bl	80084a0 <USB_CoreReset>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	e01a      	b.n	8008248 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f93e 	bl	80084a0 <USB_CoreReset>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	639a      	str	r2, [r3, #56]	; 0x38
 800823a:	e005      	b.n	8008248 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	2b01      	cmp	r3, #1
 800824c:	d10b      	bne.n	8008266 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f043 0206 	orr.w	r2, r3, #6
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f043 0220 	orr.w	r2, r3, #32
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008272:	b004      	add	sp, #16
 8008274:	4770      	bx	lr

08008276 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f043 0201 	orr.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f023 0201 	bic.w	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d106      	bne.n	80082e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60da      	str	r2, [r3, #12]
 80082e4:	e00b      	b.n	80082fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	e001      	b.n	80082fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e003      	b.n	8008306 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80082fe:	2032      	movs	r0, #50	; 0x32
 8008300:	f7f9 fce4 	bl	8001ccc <HAL_Delay>

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	019b      	lsls	r3, r3, #6
 8008322:	f043 0220 	orr.w	r2, r3, #32
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <USB_FlushTxFifo+0x48>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d901      	bls.n	800833c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e006      	b.n	800834a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b20      	cmp	r3, #32
 8008346:	d0f0      	beq.n	800832a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	00030d40 	.word	0x00030d40

0800835c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2210      	movs	r2, #16
 800836c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a09      	ldr	r2, [pc, #36]	; (800839c <USB_FlushRxFifo+0x40>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d901      	bls.n	8008380 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e006      	b.n	800838e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b10      	cmp	r3, #16
 800838a:	d0f0      	beq.n	800836e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	00030d40 	.word	0x00030d40

080083a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b089      	sub	sp, #36	; 0x24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4611      	mov	r1, r2
 80083ac:	461a      	mov	r2, r3
 80083ae:	460b      	mov	r3, r1
 80083b0:	71fb      	strb	r3, [r7, #7]
 80083b2:	4613      	mov	r3, r2
 80083b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80083be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d11a      	bne.n	80083fc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083c6:	88bb      	ldrh	r3, [r7, #4]
 80083c8:	3303      	adds	r3, #3
 80083ca:	089b      	lsrs	r3, r3, #2
 80083cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083ce:	2300      	movs	r3, #0
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	e00f      	b.n	80083f4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	031a      	lsls	r2, r3, #12
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e0:	461a      	mov	r2, r3
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	3304      	adds	r3, #4
 80083ec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	3301      	adds	r3, #1
 80083f2:	61bb      	str	r3, [r7, #24]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d3eb      	bcc.n	80083d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3724      	adds	r7, #36	; 0x24
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800840a:	b480      	push	{r7}
 800840c:	b089      	sub	sp, #36	; 0x24
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	4613      	mov	r3, r2
 8008416:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008420:	88fb      	ldrh	r3, [r7, #6]
 8008422:	3303      	adds	r3, #3
 8008424:	089b      	lsrs	r3, r3, #2
 8008426:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008428:	2300      	movs	r3, #0
 800842a:	61bb      	str	r3, [r7, #24]
 800842c:	e00b      	b.n	8008446 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	601a      	str	r2, [r3, #0]
    pDest++;
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	3304      	adds	r3, #4
 800843e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	3301      	adds	r3, #1
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d3ef      	bcc.n	800842e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800844e:	69fb      	ldr	r3, [r7, #28]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3724      	adds	r7, #36	; 0x24
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	4013      	ands	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	f003 0301 	and.w	r3, r3, #1
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4a13      	ldr	r2, [pc, #76]	; (8008504 <USB_CoreReset+0x64>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e01b      	b.n	80084f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	daf2      	bge.n	80084ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f043 0201 	orr.w	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4a09      	ldr	r2, [pc, #36]	; (8008504 <USB_CoreReset+0x64>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d901      	bls.n	80084e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e006      	b.n	80084f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d0f0      	beq.n	80084d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	00030d40 	.word	0x00030d40

08008508 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008508:	b084      	sub	sp, #16
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	f107 001c 	add.w	r0, r7, #28
 8008516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008524:	461a      	mov	r2, r3
 8008526:	2300      	movs	r3, #0
 8008528:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d018      	beq.n	8008580 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	2b01      	cmp	r3, #1
 8008552:	d10a      	bne.n	800856a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008562:	f043 0304 	orr.w	r3, r3, #4
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	e014      	b.n	8008594 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008578:	f023 0304 	bic.w	r3, r3, #4
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	e009      	b.n	8008594 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800858e:	f023 0304 	bic.w	r3, r3, #4
 8008592:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008594:	2110      	movs	r1, #16
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff feba 	bl	8008310 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff fedd 	bl	800835c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	e015      	b.n	80085d4 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b4:	461a      	mov	r2, r3
 80085b6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c8:	461a      	mov	r2, r3
 80085ca:	2300      	movs	r3, #0
 80085cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d3e5      	bcc.n	80085a8 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80085dc:	2101      	movs	r1, #1
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f8ac 	bl	800873c <USB_DriveVbus>

  HAL_Delay(200U);
 80085e4:	20c8      	movs	r0, #200	; 0xc8
 80085e6:	f7f9 fb71 	bl	8001ccc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f04f 32ff 	mov.w	r2, #4294967295
 80085f6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a14      	ldr	r2, [pc, #80]	; (8008660 <USB_HostInit+0x158>)
 8008610:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a13      	ldr	r2, [pc, #76]	; (8008664 <USB_HostInit+0x15c>)
 8008616:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800861a:	e009      	b.n	8008630 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2280      	movs	r2, #128	; 0x80
 8008620:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a10      	ldr	r2, [pc, #64]	; (8008668 <USB_HostInit+0x160>)
 8008626:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a10      	ldr	r2, [pc, #64]	; (800866c <USB_HostInit+0x164>)
 800862c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d105      	bne.n	8008642 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f043 0210 	orr.w	r2, r3, #16
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <USB_HostInit+0x168>)
 8008648:	4313      	orrs	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800865a:	b004      	add	sp, #16
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	01000200 	.word	0x01000200
 8008664:	00e00300 	.word	0x00e00300
 8008668:	00600080 	.word	0x00600080
 800866c:	004000e0 	.word	0x004000e0
 8008670:	a3200008 	.word	0xa3200008

08008674 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	460b      	mov	r3, r1
 800867e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008692:	f023 0303 	bic.w	r3, r3, #3
 8008696:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086ac:	4313      	orrs	r3, r2
 80086ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d107      	bne.n	80086c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086bc:	461a      	mov	r2, r3
 80086be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80086c2:	6053      	str	r3, [r2, #4]
 80086c4:	e009      	b.n	80086da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d106      	bne.n	80086da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086d2:	461a      	mov	r2, r3
 80086d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80086d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008708:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008716:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008718:	2064      	movs	r0, #100	; 0x64
 800871a:	f7f9 fad7 	bl	8001ccc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800872a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800872c:	200a      	movs	r0, #10
 800872e:	f7f9 facd 	bl	8001ccc <HAL_Delay>

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008760:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <USB_DriveVbus+0x44>
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d106      	bne.n	8008780 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800877a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800877e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800878a:	d109      	bne.n	80087a0 <USB_DriveVbus+0x64>
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d106      	bne.n	80087a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800879a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800879e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b085      	sub	sp, #20
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	0c5b      	lsrs	r3, r3, #17
 80087cc:	f003 0303 	and.w	r3, r3, #3
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	b29b      	uxth	r3, r3
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	461a      	mov	r2, r3
 800880e:	4603      	mov	r3, r0
 8008810:	70fb      	strb	r3, [r7, #3]
 8008812:	460b      	mov	r3, r1
 8008814:	70bb      	strb	r3, [r7, #2]
 8008816:	4613      	mov	r3, r2
 8008818:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	015a      	lsls	r2, r3, #5
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4413      	add	r3, r2
 800882a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882e:	461a      	mov	r2, r3
 8008830:	f04f 33ff 	mov.w	r3, #4294967295
 8008834:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008836:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800883a:	2b03      	cmp	r3, #3
 800883c:	d87e      	bhi.n	800893c <USB_HC_Init+0x13c>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <USB_HC_Init+0x44>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008855 	.word	0x08008855
 8008848:	080088ff 	.word	0x080088ff
 800884c:	08008855 	.word	0x08008855
 8008850:	080088c1 	.word	0x080088c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4413      	add	r3, r2
 800885c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008860:	461a      	mov	r2, r3
 8008862:	f240 439d 	movw	r3, #1181	; 0x49d
 8008866:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008868:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800886c:	2b00      	cmp	r3, #0
 800886e:	da10      	bge.n	8008892 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	78fa      	ldrb	r2, [r7, #3]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800888a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800888e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008890:	e057      	b.n	8008942 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	2b00      	cmp	r3, #0
 800889c:	d051      	beq.n	8008942 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	78fa      	ldrb	r2, [r7, #3]
 80088ae:	0151      	lsls	r1, r2, #5
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	440a      	add	r2, r1
 80088b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80088bc:	60d3      	str	r3, [r2, #12]
      break;
 80088be:	e040      	b.n	8008942 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088cc:	461a      	mov	r2, r3
 80088ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80088d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80088d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	da34      	bge.n	8008946 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	78fa      	ldrb	r2, [r7, #3]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80088fc:	e023      	b.n	8008946 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890a:	461a      	mov	r2, r3
 800890c:	f240 2325 	movw	r3, #549	; 0x225
 8008910:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008912:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008916:	2b00      	cmp	r3, #0
 8008918:	da17      	bge.n	800894a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	78fa      	ldrb	r2, [r7, #3]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	440a      	add	r2, r1
 8008930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008934:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008938:	60d3      	str	r3, [r2, #12]
      }
      break;
 800893a:	e006      	b.n	800894a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
      break;
 8008940:	e004      	b.n	800894c <USB_HC_Init+0x14c>
      break;
 8008942:	bf00      	nop
 8008944:	e002      	b.n	800894c <USB_HC_Init+0x14c>
      break;
 8008946:	bf00      	nop
 8008948:	e000      	b.n	800894c <USB_HC_Init+0x14c>
      break;
 800894a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	2101      	movs	r1, #1
 800895c:	fa01 f303 	lsl.w	r3, r1, r3
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008966:	4313      	orrs	r3, r2
 8008968:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008976:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800897a:	2b00      	cmp	r3, #0
 800897c:	da03      	bge.n	8008986 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800897e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	e001      	b.n	800898a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800898a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d103      	bne.n	800899a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	e001      	b.n	800899e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800899e:	787b      	ldrb	r3, [r7, #1]
 80089a0:	059b      	lsls	r3, r3, #22
 80089a2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089a6:	78bb      	ldrb	r3, [r7, #2]
 80089a8:	02db      	lsls	r3, r3, #11
 80089aa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089b4:	049b      	lsls	r3, r3, #18
 80089b6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	0159      	lsls	r1, r3, #5
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	440b      	add	r3, r1
 80089d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089da:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80089dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d10f      	bne.n	8008a04 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	0151      	lsls	r1, r2, #5
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	440a      	add	r2, r1
 80089fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a02:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop

08008a14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08c      	sub	sp, #48	; 0x30
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d028      	beq.n	8008a90 <USB_HC_StartXfer+0x7c>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	791b      	ldrb	r3, [r3, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d124      	bne.n	8008a90 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10b      	bne.n	8008a64 <USB_HC_StartXfer+0x50>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	795b      	ldrb	r3, [r3, #5]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d107      	bne.n	8008a64 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fa30 	bl	8008ec0 <USB_DoPing>
      return HAL_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	e114      	b.n	8008c8e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d112      	bne.n	8008a90 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a84:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008a88:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d018      	beq.n	8008aca <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	8912      	ldrh	r2, [r2, #8]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	8912      	ldrh	r2, [r2, #8]
 8008aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aac:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008aae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ab0:	8b7b      	ldrh	r3, [r7, #26]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d90b      	bls.n	8008ace <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008ab6:	8b7b      	ldrh	r3, [r7, #26]
 8008ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	8912      	ldrh	r2, [r2, #8]
 8008ac0:	fb02 f203 	mul.w	r2, r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	611a      	str	r2, [r3, #16]
 8008ac8:	e001      	b.n	8008ace <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008aca:	2301      	movs	r3, #1
 8008acc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	78db      	ldrb	r3, [r3, #3]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d006      	beq.n	8008ae4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	8912      	ldrh	r2, [r2, #8]
 8008adc:	fb02 f203 	mul.w	r2, r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008aec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008aee:	04d9      	lsls	r1, r3, #19
 8008af0:	4b69      	ldr	r3, [pc, #420]	; (8008c98 <USB_HC_StartXfer+0x284>)
 8008af2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008af4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	7a9b      	ldrb	r3, [r3, #10]
 8008afa:	075b      	lsls	r3, r3, #29
 8008afc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	0148      	lsls	r0, r1, #5
 8008b04:	6a39      	ldr	r1, [r7, #32]
 8008b06:	4401      	add	r1, r0
 8008b08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	68d9      	ldr	r1, [r3, #12]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b26:	460a      	mov	r2, r1
 8008b28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf0c      	ite	eq
 8008b3a:	2301      	moveq	r3, #1
 8008b3c:	2300      	movne	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	6a3a      	ldr	r2, [r7, #32]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	7e7b      	ldrb	r3, [r7, #25]
 8008b72:	075b      	lsls	r3, r3, #29
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	0148      	lsls	r0, r1, #5
 8008b78:	6a39      	ldr	r1, [r7, #32]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008b80:	4313      	orrs	r3, r2
 8008b82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a42      	ldr	r2, [pc, #264]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008b94:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b96:	4b41      	ldr	r3, [pc, #260]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b9e:	4a3f      	ldr	r2, [pc, #252]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008ba0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008baa:	4b3c      	ldr	r3, [pc, #240]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb2:	4a3a      	ldr	r2, [pc, #232]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	e005      	b.n	8008bc4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008bb8:	4b38      	ldr	r3, [pc, #224]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bc0:	4a36      	ldr	r2, [pc, #216]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008bc2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bc4:	4b35      	ldr	r3, [pc, #212]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bcc:	4a33      	ldr	r2, [pc, #204]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008bce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b2f      	ldr	r3, [pc, #188]	; (8008c9c <USB_HC_StartXfer+0x288>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e04f      	b.n	8008c8e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	78db      	ldrb	r3, [r3, #3]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d14a      	bne.n	8008c8c <USB_HC_StartXfer+0x278>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d046      	beq.n	8008c8c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	79db      	ldrb	r3, [r3, #7]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d830      	bhi.n	8008c68 <USB_HC_StartXfer+0x254>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <USB_HC_StartXfer+0x1f8>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c1d 	.word	0x08008c1d
 8008c10:	08008c41 	.word	0x08008c41
 8008c14:	08008c1d 	.word	0x08008c1d
 8008c18:	08008c41 	.word	0x08008c41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	3303      	adds	r3, #3
 8008c22:	089b      	lsrs	r3, r3, #2
 8008c24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c26:	8afa      	ldrh	r2, [r7, #22]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d91c      	bls.n	8008c6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f043 0220 	orr.w	r2, r3, #32
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c3e:	e015      	b.n	8008c6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	3303      	adds	r3, #3
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c4a:	8afa      	ldrh	r2, [r7, #22]
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d90a      	bls.n	8008c70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c66:	e003      	b.n	8008c70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <USB_HC_StartXfer+0x25e>
        break;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <USB_HC_StartXfer+0x25e>
        break;
 8008c70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	68d9      	ldr	r1, [r3, #12]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	785a      	ldrb	r2, [r3, #1]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	b298      	uxth	r0, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	4603      	mov	r3, r0
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff fb8a 	bl	80083a0 <USB_WritePacket>
  }

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3728      	adds	r7, #40	; 0x28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	1ff80000 	.word	0x1ff80000
 8008c9c:	200000f4 	.word	0x200000f4

08008ca0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	b29b      	uxth	r3, r3
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	0c9b      	lsrs	r3, r3, #18
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <USB_HC_Halt+0x3a>
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d16c      	bne.n	8008dd6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d1a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d143      	bne.n	8008db0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	0151      	lsls	r1, r2, #5
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	440a      	add	r2, r1
 8008d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d46:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	0151      	lsls	r1, r2, #5
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	440a      	add	r2, r1
 8008d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d66:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d86:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d94:	d81d      	bhi.n	8008dd2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dac:	d0ec      	beq.n	8008d88 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008dae:	e080      	b.n	8008eb2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	0151      	lsls	r1, r2, #5
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	440a      	add	r2, r1
 8008dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dce:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008dd0:	e06f      	b.n	8008eb2 <USB_HC_Halt+0x1f0>
          break;
 8008dd2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008dd4:	e06d      	b.n	8008eb2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008df4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d143      	bne.n	8008e8e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e24:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e44:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e64:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e72:	d81d      	bhi.n	8008eb0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e8a:	d0ec      	beq.n	8008e66 <USB_HC_Halt+0x1a4>
 8008e8c:	e011      	b.n	8008eb2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e000      	b.n	8008eb2 <USB_HC_Halt+0x1f0>
          break;
 8008eb0:	bf00      	nop
    }
  }

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	04da      	lsls	r2, r3, #19
 8008edc:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <USB_DoPing+0x74>)
 8008ede:	4013      	ands	r3, r2
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ef0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1e:	461a      	mov	r2, r3
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	1ff80000 	.word	0x1ff80000

08008f38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff f9a5 	bl	8008298 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008f4e:	2110      	movs	r1, #16
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff f9dd 	bl	8008310 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fa00 	bl	800835c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	613b      	str	r3, [r7, #16]
 8008f60:	e01f      	b.n	8008fa2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f78:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f88:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f96:	461a      	mov	r2, r3
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	613b      	str	r3, [r7, #16]
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	2b0f      	cmp	r3, #15
 8008fa6:	d9dc      	bls.n	8008f62 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	e034      	b.n	8009018 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fc4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fcc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fd4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	3301      	adds	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ff4:	d80c      	bhi.n	8009010 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900c:	d0ec      	beq.n	8008fe8 <USB_StopHost+0xb0>
 800900e:	e000      	b.n	8009012 <USB_StopHost+0xda>
        break;
 8009010:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	3301      	adds	r3, #1
 8009016:	613b      	str	r3, [r7, #16]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d9c7      	bls.n	8008fae <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009024:	461a      	mov	r2, r3
 8009026:	f04f 33ff 	mov.w	r3, #4294967295
 800902a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f04f 32ff 	mov.w	r2, #4294967295
 8009032:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff f91e 	bl	8008276 <USB_EnableGlobalInt>

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b089      	sub	sp, #36	; 0x24
 8009048:	af04      	add	r7, sp, #16
 800904a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800904c:	2301      	movs	r3, #1
 800904e:	2202      	movs	r2, #2
 8009050:	2102      	movs	r1, #2
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc68 	bl	8009928 <USBH_FindInterface>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	2bff      	cmp	r3, #255	; 0xff
 8009060:	d002      	beq.n	8009068 <USBH_CDC_InterfaceInit+0x24>
 8009062:	7bfb      	ldrb	r3, [r7, #15]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d901      	bls.n	800906c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009068:	2302      	movs	r3, #2
 800906a:	e13d      	b.n	80092e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc3d 	bl	80098f0 <USBH_SelectInterface>
 8009076:	4603      	mov	r3, r0
 8009078:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009080:	2302      	movs	r3, #2
 8009082:	e131      	b.n	80092e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800908a:	2050      	movs	r0, #80	; 0x50
 800908c:	f002 fa04 	bl	800b498 <malloc>
 8009090:	4603      	mov	r3, r0
 8009092:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80090a4:	2302      	movs	r3, #2
 80090a6:	e11f      	b.n	80092e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80090a8:	2250      	movs	r2, #80	; 0x50
 80090aa:	2100      	movs	r1, #0
 80090ac:	68b8      	ldr	r0, [r7, #8]
 80090ae:	f002 fa03 	bl	800b4b8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	211a      	movs	r1, #26
 80090b8:	fb01 f303 	mul.w	r3, r1, r3
 80090bc:	4413      	add	r3, r2
 80090be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	b25b      	sxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	da15      	bge.n	80090f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	211a      	movs	r1, #26
 80090d0:	fb01 f303 	mul.w	r3, r1, r3
 80090d4:	4413      	add	r3, r2
 80090d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090da:	781a      	ldrb	r2, [r3, #0]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	211a      	movs	r1, #26
 80090e6:	fb01 f303 	mul.w	r3, r1, r3
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80090f0:	881a      	ldrh	r2, [r3, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fe36 	bl	800ad6e <USBH_AllocPipe>
 8009102:	4603      	mov	r3, r0
 8009104:	461a      	mov	r2, r3
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	7819      	ldrb	r1, [r3, #0]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	7858      	ldrb	r0, [r3, #1]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	8952      	ldrh	r2, [r2, #10]
 8009122:	9202      	str	r2, [sp, #8]
 8009124:	2203      	movs	r2, #3
 8009126:	9201      	str	r2, [sp, #4]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	4623      	mov	r3, r4
 800912c:	4602      	mov	r2, r0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fdee 	bl	800ad10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f002 f8fb 	bl	800b338 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009142:	2300      	movs	r3, #0
 8009144:	2200      	movs	r2, #0
 8009146:	210a      	movs	r1, #10
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fbed 	bl	8009928 <USBH_FindInterface>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2bff      	cmp	r3, #255	; 0xff
 8009156:	d002      	beq.n	800915e <USBH_CDC_InterfaceInit+0x11a>
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d901      	bls.n	8009162 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800915e:	2302      	movs	r3, #2
 8009160:	e0c2      	b.n	80092e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	211a      	movs	r1, #26
 8009168:	fb01 f303 	mul.w	r3, r1, r3
 800916c:	4413      	add	r3, r2
 800916e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b25b      	sxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	da16      	bge.n	80091a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	211a      	movs	r1, #26
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	4413      	add	r3, r2
 8009186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	211a      	movs	r1, #26
 8009196:	fb01 f303 	mul.w	r3, r1, r3
 800919a:	4413      	add	r3, r2
 800919c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091a0:	881a      	ldrh	r2, [r3, #0]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	835a      	strh	r2, [r3, #26]
 80091a6:	e015      	b.n	80091d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	211a      	movs	r1, #26
 80091ae:	fb01 f303 	mul.w	r3, r1, r3
 80091b2:	4413      	add	r3, r2
 80091b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	211a      	movs	r1, #26
 80091c4:	fb01 f303 	mul.w	r3, r1, r3
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091ce:	881a      	ldrh	r2, [r3, #0]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	211a      	movs	r1, #26
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	b25b      	sxtb	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	da16      	bge.n	800921a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	211a      	movs	r1, #26
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091fc:	781a      	ldrb	r2, [r3, #0]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	211a      	movs	r1, #26
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	4413      	add	r3, r2
 800920e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009212:	881a      	ldrh	r2, [r3, #0]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	835a      	strh	r2, [r3, #26]
 8009218:	e015      	b.n	8009246 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	211a      	movs	r1, #26
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
 8009226:	f203 3356 	addw	r3, r3, #854	; 0x356
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	211a      	movs	r1, #26
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	4413      	add	r3, r2
 800923c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009240:	881a      	ldrh	r2, [r3, #0]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	7b9b      	ldrb	r3, [r3, #14]
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 fd8e 	bl	800ad6e <USBH_AllocPipe>
 8009252:	4603      	mov	r3, r0
 8009254:	461a      	mov	r2, r3
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	7bdb      	ldrb	r3, [r3, #15]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fd84 	bl	800ad6e <USBH_AllocPipe>
 8009266:	4603      	mov	r3, r0
 8009268:	461a      	mov	r2, r3
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	7b59      	ldrb	r1, [r3, #13]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	7b98      	ldrb	r0, [r3, #14]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	8b12      	ldrh	r2, [r2, #24]
 8009286:	9202      	str	r2, [sp, #8]
 8009288:	2202      	movs	r2, #2
 800928a:	9201      	str	r2, [sp, #4]
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	4623      	mov	r3, r4
 8009290:	4602      	mov	r2, r0
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f001 fd3c 	bl	800ad10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	7b19      	ldrb	r1, [r3, #12]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	7bd8      	ldrb	r0, [r3, #15]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	8b52      	ldrh	r2, [r2, #26]
 80092b0:	9202      	str	r2, [sp, #8]
 80092b2:	2202      	movs	r2, #2
 80092b4:	9201      	str	r2, [sp, #4]
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	4623      	mov	r3, r4
 80092ba:	4602      	mov	r2, r0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 fd27 	bl	800ad10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	7b5b      	ldrb	r3, [r3, #13]
 80092ce:	2200      	movs	r2, #0
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f002 f830 	bl	800b338 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	7b1b      	ldrb	r3, [r3, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f002 f829 	bl	800b338 <USBH_LL_SetToggle>

  return USBH_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd90      	pop	{r4, r7, pc}

080092f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00e      	beq.n	8009328 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 fd1c 	bl	800ad4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f001 fd47 	bl	800adb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	7b1b      	ldrb	r3, [r3, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00e      	beq.n	800934e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	7b1b      	ldrb	r3, [r3, #12]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f001 fd09 	bl	800ad4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	7b1b      	ldrb	r3, [r3, #12]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fd34 	bl	800adb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	7b5b      	ldrb	r3, [r3, #13]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00e      	beq.n	8009374 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	7b5b      	ldrb	r3, [r3, #13]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 fcf6 	bl	800ad4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	7b5b      	ldrb	r3, [r3, #13]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 fd21 	bl	800adb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00b      	beq.n	8009398 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	4618      	mov	r0, r3
 800938a:	f002 f88d 	bl	800b4a8 <free>
    phost->pActiveClass->pData = 0U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009394:	2200      	movs	r2, #0
 8009396:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3340      	adds	r3, #64	; 0x40
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8b1 	bl	8009522 <GetLineCoding>
 80093c0:	4603      	mov	r3, r0
 80093c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093d0:	2102      	movs	r1, #2
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80093d6:	7afb      	ldrb	r3, [r7, #11]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009400:	2b04      	cmp	r3, #4
 8009402:	d877      	bhi.n	80094f4 <USBH_CDC_Process+0x114>
 8009404:	a201      	add	r2, pc, #4	; (adr r2, 800940c <USBH_CDC_Process+0x2c>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	08009421 	.word	0x08009421
 8009410:	08009427 	.word	0x08009427
 8009414:	08009457 	.word	0x08009457
 8009418:	080094cb 	.word	0x080094cb
 800941c:	080094d9 	.word	0x080094d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
      break;
 8009424:	e06d      	b.n	8009502 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f897 	bl	8009560 <SetLineCoding>
 8009432:	4603      	mov	r3, r0
 8009434:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009444:	e058      	b.n	80094f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d055      	beq.n	80094f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2204      	movs	r2, #4
 8009450:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009454:	e050      	b.n	80094f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	3340      	adds	r3, #64	; 0x40
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f860 	bl	8009522 <GetLineCoding>
 8009462:	4603      	mov	r3, r0
 8009464:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d126      	bne.n	80094ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800947e:	791b      	ldrb	r3, [r3, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d13b      	bne.n	80094fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009490:	429a      	cmp	r2, r3
 8009492:	d133      	bne.n	80094fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800949e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d12b      	bne.n	80094fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d124      	bne.n	80094fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f95a 	bl	800976c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094b8:	e020      	b.n	80094fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d01d      	beq.n	80094fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2204      	movs	r2, #4
 80094c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80094c8:	e018      	b.n	80094fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f867 	bl	800959e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f8dc 	bl	800968e <CDC_ProcessReception>
      break;
 80094d6:	e014      	b.n	8009502 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80094d8:	2100      	movs	r1, #0
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 ffe5 	bl	800a4aa <USBH_ClrFeature>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80094f2:	e005      	b.n	8009500 <USBH_CDC_Process+0x120>

    default:
      break;
 80094f4:	bf00      	nop
 80094f6:	e004      	b.n	8009502 <USBH_CDC_Process+0x122>
      break;
 80094f8:	bf00      	nop
 80094fa:	e002      	b.n	8009502 <USBH_CDC_Process+0x122>
      break;
 80094fc:	bf00      	nop
 80094fe:	e000      	b.n	8009502 <USBH_CDC_Process+0x122>
      break;
 8009500:	bf00      	nop

  }

  return status;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	22a1      	movs	r2, #161	; 0xa1
 8009530:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2221      	movs	r2, #33	; 0x21
 8009536:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2207      	movs	r2, #7
 8009548:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2207      	movs	r2, #7
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 f98a 	bl	800a86a <USBH_CtlReq>
 8009556:	4603      	mov	r3, r0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2221      	movs	r2, #33	; 0x21
 800956e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2207      	movs	r2, #7
 8009586:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2207      	movs	r2, #7
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f96b 	bl	800a86a <USBH_CtlReq>
 8009594:	4603      	mov	r3, r0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af02      	add	r7, sp, #8
 80095a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d002      	beq.n	80095c4 <CDC_ProcessTransmission+0x26>
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d025      	beq.n	800960e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80095c2:	e060      	b.n	8009686 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	8b12      	ldrh	r2, [r2, #24]
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d90c      	bls.n	80095ea <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	69d9      	ldr	r1, [r3, #28]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8b1a      	ldrh	r2, [r3, #24]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	7b58      	ldrb	r0, [r3, #13]
 80095dc:	2301      	movs	r3, #1
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	4603      	mov	r3, r0
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f001 fb51 	bl	800ac8a <USBH_BulkSendData>
 80095e8:	e00c      	b.n	8009604 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	7b58      	ldrb	r0, [r3, #13]
 80095f8:	2301      	movs	r3, #1
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	4603      	mov	r3, r0
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fb43 	bl	800ac8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800960c:	e03b      	b.n	8009686 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	7b5b      	ldrb	r3, [r3, #13]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 fe65 	bl	800b2e4 <USBH_LL_GetURBState>
 800961a:	4603      	mov	r3, r0
 800961c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d128      	bne.n	8009676 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	8b12      	ldrh	r2, [r2, #24]
 800962c:	4293      	cmp	r3, r2
 800962e:	d90e      	bls.n	800964e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	8b12      	ldrh	r2, [r2, #24]
 8009638:	1a9a      	subs	r2, r3, r2
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	8b12      	ldrh	r2, [r2, #24]
 8009646:	441a      	add	r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	61da      	str	r2, [r3, #28]
 800964c:	e002      	b.n	8009654 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009664:	e00e      	b.n	8009684 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f868 	bl	8009744 <USBH_CDC_TransmitCallback>
      break;
 8009674:	e006      	b.n	8009684 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8009676:	7afb      	ldrb	r3, [r7, #11]
 8009678:	2b02      	cmp	r3, #2
 800967a:	d103      	bne.n	8009684 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009684:	bf00      	nop
  }
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b086      	sub	sp, #24
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d002      	beq.n	80096b4 <CDC_ProcessReception+0x26>
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d00e      	beq.n	80096d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80096b2:	e043      	b.n	800973c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	6a19      	ldr	r1, [r3, #32]
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	8b5a      	ldrh	r2, [r3, #26]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	7b1b      	ldrb	r3, [r3, #12]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 fb07 	bl	800acd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	2204      	movs	r2, #4
 80096ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80096ce:	e035      	b.n	800973c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	7b1b      	ldrb	r3, [r3, #12]
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 fe04 	bl	800b2e4 <USBH_LL_GetURBState>
 80096dc:	4603      	mov	r3, r0
 80096de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80096e0:	7cfb      	ldrb	r3, [r7, #19]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d129      	bne.n	800973a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	7b1b      	ldrb	r3, [r3, #12]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fd67 	bl	800b1c0 <USBH_LL_GetLastXferSize>
 80096f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d016      	beq.n	800972c <CDC_ProcessReception+0x9e>
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	8b5b      	ldrh	r3, [r3, #26]
 8009702:	461a      	mov	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4293      	cmp	r3, r2
 8009708:	d910      	bls.n	800972c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1ad2      	subs	r2, r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	6a1a      	ldr	r2, [r3, #32]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	441a      	add	r2, r3
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2203      	movs	r2, #3
 8009726:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800972a:	e006      	b.n	800973a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f80f 	bl	8009758 <USBH_CDC_ReceiveCallback>
      break;
 800973a:	bf00      	nop
  }
}
 800973c:	bf00      	nop
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009794:	2302      	movs	r3, #2
 8009796:	e029      	b.n	80097ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	79fa      	ldrb	r2, [r7, #7]
 800979c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f81f 	bl	80097f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f001 fc39 	bl	800b05c <USBH_LL_Init>

  return USBH_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e009      	b.n	800981a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	33e0      	adds	r3, #224	; 0xe0
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	2200      	movs	r2, #0
 8009812:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b0e      	cmp	r3, #14
 800981e:	d9f2      	bls.n	8009806 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009820:	2300      	movs	r3, #0
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	e009      	b.n	800983a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009840:	d3f1      	bcc.n	8009826 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2240      	movs	r2, #64	; 0x40
 8009866:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d016      	beq.n	80098de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10e      	bne.n	80098d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098c0:	1c59      	adds	r1, r3, #1
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	33de      	adds	r3, #222	; 0xde
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	e004      	b.n	80098e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098d8:	2302      	movs	r3, #2
 80098da:	73fb      	strb	r3, [r7, #15]
 80098dc:	e001      	b.n	80098e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098de:	2302      	movs	r3, #2
 80098e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	429a      	cmp	r2, r3
 800990a:	d204      	bcs.n	8009916 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	78fa      	ldrb	r2, [r7, #3]
 8009910:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009914:	e001      	b.n	800991a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009916:	2302      	movs	r3, #2
 8009918:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	4608      	mov	r0, r1
 8009932:	4611      	mov	r1, r2
 8009934:	461a      	mov	r2, r3
 8009936:	4603      	mov	r3, r0
 8009938:	70fb      	strb	r3, [r7, #3]
 800993a:	460b      	mov	r3, r1
 800993c:	70bb      	strb	r3, [r7, #2]
 800993e:	4613      	mov	r3, r2
 8009940:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009946:	2300      	movs	r3, #0
 8009948:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009950:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009952:	e025      	b.n	80099a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	221a      	movs	r2, #26
 8009958:	fb02 f303 	mul.w	r3, r2, r3
 800995c:	3308      	adds	r3, #8
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4413      	add	r3, r2
 8009962:	3302      	adds	r3, #2
 8009964:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	795b      	ldrb	r3, [r3, #5]
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	429a      	cmp	r2, r3
 800996e:	d002      	beq.n	8009976 <USBH_FindInterface+0x4e>
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	2bff      	cmp	r3, #255	; 0xff
 8009974:	d111      	bne.n	800999a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800997a:	78ba      	ldrb	r2, [r7, #2]
 800997c:	429a      	cmp	r2, r3
 800997e:	d002      	beq.n	8009986 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009980:	78bb      	ldrb	r3, [r7, #2]
 8009982:	2bff      	cmp	r3, #255	; 0xff
 8009984:	d109      	bne.n	800999a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800998a:	787a      	ldrb	r2, [r7, #1]
 800998c:	429a      	cmp	r2, r3
 800998e:	d002      	beq.n	8009996 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009990:	787b      	ldrb	r3, [r7, #1]
 8009992:	2bff      	cmp	r3, #255	; 0xff
 8009994:	d101      	bne.n	800999a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
 8009998:	e006      	b.n	80099a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	3301      	adds	r3, #1
 800999e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d9d6      	bls.n	8009954 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80099a6:	23ff      	movs	r3, #255	; 0xff
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 fb89 	bl	800b0d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80099c2:	2101      	movs	r1, #1
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fca0 	bl	800b30a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af04      	add	r7, sp, #16
 80099da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099dc:	2302      	movs	r3, #2
 80099de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d102      	bne.n	80099f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2203      	movs	r2, #3
 80099f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b0b      	cmp	r3, #11
 80099fe:	f200 81b3 	bhi.w	8009d68 <USBH_Process+0x394>
 8009a02:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <USBH_Process+0x34>)
 8009a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a08:	08009a39 	.word	0x08009a39
 8009a0c:	08009a6b 	.word	0x08009a6b
 8009a10:	08009ad3 	.word	0x08009ad3
 8009a14:	08009d03 	.word	0x08009d03
 8009a18:	08009d69 	.word	0x08009d69
 8009a1c:	08009b77 	.word	0x08009b77
 8009a20:	08009ca9 	.word	0x08009ca9
 8009a24:	08009bad 	.word	0x08009bad
 8009a28:	08009bcd 	.word	0x08009bcd
 8009a2c:	08009bed 	.word	0x08009bed
 8009a30:	08009c1b 	.word	0x08009c1b
 8009a34:	08009ceb 	.word	0x08009ceb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 8193 	beq.w	8009d6c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a4c:	20c8      	movs	r0, #200	; 0xc8
 8009a4e:	f001 fca6 	bl	800b39e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fb99 	bl	800b18a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009a68:	e180      	b.n	8009d6c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d107      	bne.n	8009a84 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009a82:	e182      	b.n	8009d8a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a8e:	d914      	bls.n	8009aba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a96:	3301      	adds	r3, #1
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d903      	bls.n	8009ab2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	220d      	movs	r2, #13
 8009aae:	701a      	strb	r2, [r3, #0]
      break;
 8009ab0:	e16b      	b.n	8009d8a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
      break;
 8009ab8:	e167      	b.n	8009d8a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ac0:	f103 020a 	add.w	r2, r3, #10
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009aca:	200a      	movs	r0, #10
 8009acc:	f001 fc67 	bl	800b39e <USBH_Delay>
      break;
 8009ad0:	e15b      	b.n	8009d8a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d005      	beq.n	8009ae8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ae8:	2064      	movs	r0, #100	; 0x64
 8009aea:	f001 fc58 	bl	800b39e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fb26 	bl	800b140 <USBH_LL_GetSpeed>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2205      	movs	r2, #5
 8009b02:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b04:	2100      	movs	r1, #0
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f001 f931 	bl	800ad6e <USBH_AllocPipe>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b14:	2180      	movs	r1, #128	; 0x80
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 f929 	bl	800ad6e <USBH_AllocPipe>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7919      	ldrb	r1, [r3, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b38:	b292      	uxth	r2, r2
 8009b3a:	9202      	str	r2, [sp, #8]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	9201      	str	r2, [sp, #4]
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	4603      	mov	r3, r0
 8009b44:	2280      	movs	r2, #128	; 0x80
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 f8e2 	bl	800ad10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	7959      	ldrb	r1, [r3, #5]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b60:	b292      	uxth	r2, r2
 8009b62:	9202      	str	r2, [sp, #8]
 8009b64:	2200      	movs	r2, #0
 8009b66:	9201      	str	r2, [sp, #4]
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 f8ce 	bl	800ad10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009b74:	e109      	b.n	8009d8a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f90c 	bl	8009d94 <USBH_HandleEnum>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 80f3 	bne.w	8009d70 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d103      	bne.n	8009ba4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009ba2:	e0e5      	b.n	8009d70 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2207      	movs	r2, #7
 8009ba8:	701a      	strb	r2, [r3, #0]
      break;
 8009baa:	e0e1      	b.n	8009d70 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 80de 	beq.w	8009d74 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2208      	movs	r2, #8
 8009bc8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009bca:	e0d3      	b.n	8009d74 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fc20 	bl	800a41c <USBH_SetCfg>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f040 80ca 	bne.w	8009d78 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2209      	movs	r2, #9
 8009be8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009bea:	e0c5      	b.n	8009d78 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fc30 	bl	800a462 <USBH_SetFeature>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 80b9 	bne.w	8009d7c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	220a      	movs	r2, #10
 8009c0e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c10:	e0b4      	b.n	8009d7c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	220a      	movs	r2, #10
 8009c16:	701a      	strb	r2, [r3, #0]
      break;
 8009c18:	e0b0      	b.n	8009d7c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80ad 	beq.w	8009d80 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
 8009c32:	e016      	b.n	8009c62 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009c34:	7bfa      	ldrb	r2, [r7, #15]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	32de      	adds	r2, #222	; 0xde
 8009c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3e:	791a      	ldrb	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d108      	bne.n	8009c5c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009c4a:	7bfa      	ldrb	r2, [r7, #15]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	32de      	adds	r2, #222	; 0xde
 8009c50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009c5a:	e005      	b.n	8009c68 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	73fb      	strb	r3, [r7, #15]
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0e5      	beq.n	8009c34 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d016      	beq.n	8009ca0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	4798      	blx	r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d109      	bne.n	8009c98 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2206      	movs	r2, #6
 8009c88:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c90:	2103      	movs	r1, #3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009c96:	e073      	b.n	8009d80 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	220d      	movs	r2, #13
 8009c9c:	701a      	strb	r2, [r3, #0]
      break;
 8009c9e:	e06f      	b.n	8009d80 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	220d      	movs	r2, #13
 8009ca4:	701a      	strb	r2, [r3, #0]
      break;
 8009ca6:	e06b      	b.n	8009d80 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d017      	beq.n	8009ce2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4798      	blx	r3
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d103      	bne.n	8009cd2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	220b      	movs	r2, #11
 8009cce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009cd0:	e058      	b.n	8009d84 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d154      	bne.n	8009d84 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	220d      	movs	r2, #13
 8009cde:	701a      	strb	r2, [r3, #0]
      break;
 8009ce0:	e050      	b.n	8009d84 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	220d      	movs	r2, #13
 8009ce6:	701a      	strb	r2, [r3, #0]
      break;
 8009ce8:	e04c      	b.n	8009d84 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d049      	beq.n	8009d88 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
      }
      break;
 8009d00:	e042      	b.n	8009d88 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff fd72 	bl	80097f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d009      	beq.n	8009d2e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d005      	beq.n	8009d44 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d3e:	2105      	movs	r1, #5
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d107      	bne.n	8009d60 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff fe2b 	bl	80099b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009d5e:	e014      	b.n	8009d8a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 f9b7 	bl	800b0d4 <USBH_LL_Start>
      break;
 8009d66:	e010      	b.n	8009d8a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009d68:	bf00      	nop
 8009d6a:	e00e      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e00c      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d70:	bf00      	nop
 8009d72:	e00a      	b.n	8009d8a <USBH_Process+0x3b6>
    break;
 8009d74:	bf00      	nop
 8009d76:	e008      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e006      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e004      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d80:	bf00      	nop
 8009d82:	e002      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <USBH_Process+0x3b6>
      break;
 8009d88:	bf00      	nop
  }
  return USBH_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b088      	sub	sp, #32
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009da0:	2301      	movs	r3, #1
 8009da2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b07      	cmp	r3, #7
 8009daa:	f200 81c1 	bhi.w	800a130 <USBH_HandleEnum+0x39c>
 8009dae:	a201      	add	r2, pc, #4	; (adr r2, 8009db4 <USBH_HandleEnum+0x20>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009e93 	.word	0x08009e93
 8009dbc:	08009efd 	.word	0x08009efd
 8009dc0:	08009f8b 	.word	0x08009f8b
 8009dc4:	08009ff5 	.word	0x08009ff5
 8009dc8:	0800a065 	.word	0x0800a065
 8009dcc:	0800a0ab 	.word	0x0800a0ab
 8009dd0:	0800a0f1 	.word	0x0800a0f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fa50 	bl	800a27c <USBH_Get_DevDesc>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009de0:	7bbb      	ldrb	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d130      	bne.n	8009e48 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	7919      	ldrb	r1, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	9202      	str	r2, [sp, #8]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	9201      	str	r2, [sp, #4]
 8009e12:	9300      	str	r3, [sp, #0]
 8009e14:	4603      	mov	r3, r0
 8009e16:	2280      	movs	r2, #128	; 0x80
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 ff79 	bl	800ad10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7959      	ldrb	r1, [r3, #5]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e32:	b292      	uxth	r2, r2
 8009e34:	9202      	str	r2, [sp, #8]
 8009e36:	2200      	movs	r2, #0
 8009e38:	9201      	str	r2, [sp, #4]
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 ff65 	bl	800ad10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e46:	e175      	b.n	800a134 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	f040 8172 	bne.w	800a134 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e56:	3301      	adds	r3, #1
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d903      	bls.n	8009e72 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	220d      	movs	r2, #13
 8009e6e:	701a      	strb	r2, [r3, #0]
      break;
 8009e70:	e160      	b.n	800a134 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	795b      	ldrb	r3, [r3, #5]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 ff99 	bl	800adb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	791b      	ldrb	r3, [r3, #4]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 ff93 	bl	800adb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
      break;
 8009e90:	e150      	b.n	800a134 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009e92:	2112      	movs	r1, #18
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f9f1 	bl	800a27c <USBH_Get_DevDesc>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eaa:	e145      	b.n	800a138 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	f040 8142 	bne.w	800a138 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eba:	3301      	adds	r3, #1
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	d903      	bls.n	8009ed6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	220d      	movs	r2, #13
 8009ed2:	701a      	strb	r2, [r3, #0]
      break;
 8009ed4:	e130      	b.n	800a138 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	795b      	ldrb	r3, [r3, #5]
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 ff67 	bl	800adb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	791b      	ldrb	r3, [r3, #4]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 ff61 	bl	800adb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
      break;
 8009efa:	e11d      	b.n	800a138 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009efc:	2101      	movs	r1, #1
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa68 	bl	800a3d4 <USBH_SetAddress>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d132      	bne.n	8009f74 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009f0e:	2002      	movs	r0, #2
 8009f10:	f001 fa45 	bl	800b39e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2203      	movs	r2, #3
 8009f20:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	7919      	ldrb	r1, [r3, #4]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f36:	b292      	uxth	r2, r2
 8009f38:	9202      	str	r2, [sp, #8]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	9201      	str	r2, [sp, #4]
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4603      	mov	r3, r0
 8009f42:	2280      	movs	r2, #128	; 0x80
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fee3 	bl	800ad10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	7959      	ldrb	r1, [r3, #5]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f5e:	b292      	uxth	r2, r2
 8009f60:	9202      	str	r2, [sp, #8]
 8009f62:	2200      	movs	r2, #0
 8009f64:	9201      	str	r2, [sp, #4]
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fecf 	bl	800ad10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f72:	e0e3      	b.n	800a13c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	f040 80e0 	bne.w	800a13c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	220d      	movs	r2, #13
 8009f80:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	705a      	strb	r2, [r3, #1]
      break;
 8009f88:	e0d8      	b.n	800a13c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009f8a:	2109      	movs	r1, #9
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f99d 	bl	800a2cc <USBH_Get_CfgDesc>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2204      	movs	r2, #4
 8009fa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fa2:	e0cd      	b.n	800a140 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	f040 80ca 	bne.w	800a140 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d903      	bls.n	8009fce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	220d      	movs	r2, #13
 8009fca:	701a      	strb	r2, [r3, #0]
      break;
 8009fcc:	e0b8      	b.n	800a140 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	795b      	ldrb	r3, [r3, #5]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 feeb 	bl	800adb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	791b      	ldrb	r3, [r3, #4]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fee5 	bl	800adb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	701a      	strb	r2, [r3, #0]
      break;
 8009ff2:	e0a5      	b.n	800a140 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f965 	bl	800a2cc <USBH_Get_CfgDesc>
 800a002:	4603      	mov	r3, r0
 800a004:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a006:	7bbb      	ldrb	r3, [r7, #14]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2205      	movs	r2, #5
 800a010:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a012:	e097      	b.n	800a144 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a014:	7bbb      	ldrb	r3, [r7, #14]
 800a016:	2b03      	cmp	r3, #3
 800a018:	f040 8094 	bne.w	800a144 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a022:	3301      	adds	r3, #1
 800a024:	b2da      	uxtb	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a032:	2b03      	cmp	r3, #3
 800a034:	d903      	bls.n	800a03e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	220d      	movs	r2, #13
 800a03a:	701a      	strb	r2, [r3, #0]
      break;
 800a03c:	e082      	b.n	800a144 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	795b      	ldrb	r3, [r3, #5]
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 feb3 	bl	800adb0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	791b      	ldrb	r3, [r3, #4]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fead 	bl	800adb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	701a      	strb	r2, [r3, #0]
      break;
 800a062:	e06f      	b.n	800a144 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d019      	beq.n	800a0a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a07a:	23ff      	movs	r3, #255	; 0xff
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f949 	bl	800a314 <USBH_Get_StringDesc>
 800a082:	4603      	mov	r3, r0
 800a084:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2206      	movs	r2, #6
 800a090:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a092:	e059      	b.n	800a148 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d156      	bne.n	800a148 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2206      	movs	r2, #6
 800a09e:	705a      	strb	r2, [r3, #1]
      break;
 800a0a0:	e052      	b.n	800a148 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2206      	movs	r2, #6
 800a0a6:	705a      	strb	r2, [r3, #1]
      break;
 800a0a8:	e04e      	b.n	800a148 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d019      	beq.n	800a0e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0c0:	23ff      	movs	r3, #255	; 0xff
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f926 	bl	800a314 <USBH_Get_StringDesc>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d103      	bne.n	800a0da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2207      	movs	r2, #7
 800a0d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a0d8:	e038      	b.n	800a14c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0da:	7bbb      	ldrb	r3, [r7, #14]
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d135      	bne.n	800a14c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2207      	movs	r2, #7
 800a0e4:	705a      	strb	r2, [r3, #1]
      break;
 800a0e6:	e031      	b.n	800a14c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2207      	movs	r2, #7
 800a0ec:	705a      	strb	r2, [r3, #1]
      break;
 800a0ee:	e02d      	b.n	800a14c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d017      	beq.n	800a12a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a106:	23ff      	movs	r3, #255	; 0xff
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f903 	bl	800a314 <USBH_Get_StringDesc>
 800a10e:	4603      	mov	r3, r0
 800a110:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a11c:	e018      	b.n	800a150 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b03      	cmp	r3, #3
 800a122:	d115      	bne.n	800a150 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
      break;
 800a128:	e012      	b.n	800a150 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73fb      	strb	r3, [r7, #15]
      break;
 800a12e:	e00f      	b.n	800a150 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a130:	bf00      	nop
 800a132:	e00e      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a134:	bf00      	nop
 800a136:	e00c      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a138:	bf00      	nop
 800a13a:	e00a      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a13c:	bf00      	nop
 800a13e:	e008      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a140:	bf00      	nop
 800a142:	e006      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a144:	bf00      	nop
 800a146:	e004      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a148:	bf00      	nop
 800a14a:	e002      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <USBH_HandleEnum+0x3be>
      break;
 800a150:	bf00      	nop
  }
  return Status;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f804 	bl	800a19e <USBH_HandleSof>
}
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b082      	sub	sp, #8
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	2b0b      	cmp	r3, #11
 800a1ae:	d10a      	bne.n	800a1c6 <USBH_HandleSof+0x28>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d005      	beq.n	800a1c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
  }
}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a1de:	bf00      	nop
}
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a1fa:	bf00      	nop
}
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 ff58 	bl	800b10a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	791b      	ldrb	r3, [r3, #4]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fda5 	bl	800adb0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	795b      	ldrb	r3, [r3, #5]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fd9f 	bl	800adb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af02      	add	r7, sp, #8
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	b29b      	uxth	r3, r3
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4613      	mov	r3, r2
 800a296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a29a:	2100      	movs	r1, #0
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f864 	bl	800a36a <USBH_GetDescriptor>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10a      	bne.n	800a2c2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	b292      	uxth	r2, r2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	f000 f918 	bl	800a4f2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	331c      	adds	r3, #28
 800a2dc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a2de:	887b      	ldrh	r3, [r7, #2]
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f83d 	bl	800a36a <USBH_GetDescriptor>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	72fb      	strb	r3, [r7, #11]
 800a2f4:	7afb      	ldrb	r3, [r7, #11]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d107      	bne.n	800a30a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a300:	887a      	ldrh	r2, [r7, #2]
 800a302:	68f9      	ldr	r1, [r7, #12]
 800a304:	4618      	mov	r0, r3
 800a306:	f000 f964 	bl	800a5d2 <USBH_ParseCfgDesc>
  }

  return status;
 800a30a:	7afb      	ldrb	r3, [r7, #11]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af02      	add	r7, sp, #8
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	607a      	str	r2, [r7, #4]
 800a31e:	461a      	mov	r2, r3
 800a320:	460b      	mov	r3, r1
 800a322:	72fb      	strb	r3, [r7, #11]
 800a324:	4613      	mov	r3, r2
 800a326:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a330:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a338:	893b      	ldrh	r3, [r7, #8]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	460b      	mov	r3, r1
 800a33e:	2100      	movs	r1, #0
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f812 	bl	800a36a <USBH_GetDescriptor>
 800a346:	4603      	mov	r3, r0
 800a348:	75fb      	strb	r3, [r7, #23]
 800a34a:	7dfb      	ldrb	r3, [r7, #23]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d107      	bne.n	800a360 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a356:	893a      	ldrh	r2, [r7, #8]
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fa37 	bl	800a7ce <USBH_ParseStringDesc>
  }

  return status;
 800a360:	7dfb      	ldrb	r3, [r7, #23]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	607b      	str	r3, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	72fb      	strb	r3, [r7, #11]
 800a378:	4613      	mov	r3, r2
 800a37a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	789b      	ldrb	r3, [r3, #2]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d11c      	bne.n	800a3be <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a384:	7afb      	ldrb	r3, [r7, #11]
 800a386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2206      	movs	r2, #6
 800a394:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	893a      	ldrh	r2, [r7, #8]
 800a39a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a39c:	893b      	ldrh	r3, [r7, #8]
 800a39e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3a6:	d104      	bne.n	800a3b2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f240 4209 	movw	r2, #1033	; 0x409
 800a3ae:	829a      	strh	r2, [r3, #20]
 800a3b0:	e002      	b.n	800a3b8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8b3a      	ldrh	r2, [r7, #24]
 800a3bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a3be:	8b3b      	ldrh	r3, [r7, #24]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 fa50 	bl	800a86a <USBH_CtlReq>
 800a3ca:	4603      	mov	r3, r0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	789b      	ldrb	r3, [r3, #2]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d10f      	bne.n	800a408 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2205      	movs	r2, #5
 800a3f2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a408:	2200      	movs	r2, #0
 800a40a:	2100      	movs	r1, #0
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fa2c 	bl	800a86a <USBH_CtlReq>
 800a412:	4603      	mov	r3, r0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	789b      	ldrb	r3, [r3, #2]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d10e      	bne.n	800a44e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2209      	movs	r2, #9
 800a43a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	887a      	ldrh	r2, [r7, #2]
 800a440:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a44e:	2200      	movs	r2, #0
 800a450:	2100      	movs	r1, #0
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa09 	bl	800a86a <USBH_CtlReq>
 800a458:	4603      	mov	r3, r0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	789b      	ldrb	r3, [r3, #2]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d10f      	bne.n	800a496 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2203      	movs	r2, #3
 800a480:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a482:	78fb      	ldrb	r3, [r7, #3]
 800a484:	b29a      	uxth	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a496:	2200      	movs	r2, #0
 800a498:	2100      	movs	r1, #0
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f9e5 	bl	800a86a <USBH_CtlReq>
 800a4a0:	4603      	mov	r3, r0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	789b      	ldrb	r3, [r3, #2]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d10f      	bne.n	800a4de <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2202      	movs	r2, #2
 800a4c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f9c1 	bl	800a86a <USBH_CtlReq>
 800a4e8:	4603      	mov	r3, r0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	781a      	ldrb	r2, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	785a      	ldrb	r2, [r3, #1]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	3302      	adds	r3, #2
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	b29a      	uxth	r2, r3
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	3303      	adds	r3, #3
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	b29b      	uxth	r3, r3
 800a524:	4313      	orrs	r3, r2
 800a526:	b29a      	uxth	r2, r3
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	791a      	ldrb	r2, [r3, #4]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	795a      	ldrb	r2, [r3, #5]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	799a      	ldrb	r2, [r3, #6]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	79da      	ldrb	r2, [r3, #7]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d939      	bls.n	800a5c6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	3308      	adds	r3, #8
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	3309      	adds	r3, #9
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	b29b      	uxth	r3, r3
 800a566:	4313      	orrs	r3, r2
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	330a      	adds	r3, #10
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	b29a      	uxth	r2, r3
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	330b      	adds	r3, #11
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	b29b      	uxth	r3, r3
 800a582:	4313      	orrs	r3, r2
 800a584:	b29a      	uxth	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	330c      	adds	r3, #12
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	b29a      	uxth	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	330d      	adds	r3, #13
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	021b      	lsls	r3, r3, #8
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	7b9a      	ldrb	r2, [r3, #14]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	7bda      	ldrb	r2, [r3, #15]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	7c1a      	ldrb	r2, [r3, #16]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	7c5a      	ldrb	r2, [r3, #17]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	745a      	strb	r2, [r3, #17]
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b08a      	sub	sp, #40	; 0x28
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	781a      	ldrb	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	785a      	ldrb	r2, [r3, #1]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	3302      	adds	r3, #2
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	3303      	adds	r3, #3
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	b29b      	uxth	r3, r3
 800a614:	021b      	lsls	r3, r3, #8
 800a616:	b29b      	uxth	r3, r3
 800a618:	4313      	orrs	r3, r2
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	791a      	ldrb	r2, [r3, #4]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	795a      	ldrb	r2, [r3, #5]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	799a      	ldrb	r2, [r3, #6]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	79da      	ldrb	r2, [r3, #7]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	7a1a      	ldrb	r2, [r3, #8]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a648:	88fb      	ldrh	r3, [r7, #6]
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	d95f      	bls.n	800a70e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a64e:	2309      	movs	r3, #9
 800a650:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a652:	2300      	movs	r3, #0
 800a654:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a656:	e051      	b.n	800a6fc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a658:	f107 0316 	add.w	r3, r7, #22
 800a65c:	4619      	mov	r1, r3
 800a65e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a660:	f000 f8e8 	bl	800a834 <USBH_GetNextDesc>
 800a664:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d146      	bne.n	800a6fc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a66e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a672:	221a      	movs	r2, #26
 800a674:	fb02 f303 	mul.w	r3, r2, r3
 800a678:	3308      	adds	r3, #8
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	4413      	add	r3, r2
 800a67e:	3302      	adds	r3, #2
 800a680:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a684:	69f8      	ldr	r0, [r7, #28]
 800a686:	f000 f846 	bl	800a716 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a690:	2300      	movs	r3, #0
 800a692:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a694:	e022      	b.n	800a6dc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a696:	f107 0316 	add.w	r3, r7, #22
 800a69a:	4619      	mov	r1, r3
 800a69c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a69e:	f000 f8c9 	bl	800a834 <USBH_GetNextDesc>
 800a6a2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	2b05      	cmp	r3, #5
 800a6aa:	d117      	bne.n	800a6dc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a6ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a6b4:	3201      	adds	r2, #1
 800a6b6:	00d2      	lsls	r2, r2, #3
 800a6b8:	211a      	movs	r1, #26
 800a6ba:	fb01 f303 	mul.w	r3, r1, r3
 800a6be:	4413      	add	r3, r2
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a6ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6cc:	69b8      	ldr	r0, [r7, #24]
 800a6ce:	f000 f851 	bl	800a774 <USBH_ParseEPDesc>
            ep_ix++;
 800a6d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	791b      	ldrb	r3, [r3, #4]
 800a6e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d204      	bcs.n	800a6f2 <USBH_ParseCfgDesc+0x120>
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	885a      	ldrh	r2, [r3, #2]
 800a6ec:	8afb      	ldrh	r3, [r7, #22]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d8d1      	bhi.n	800a696 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a6f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a700:	2b01      	cmp	r3, #1
 800a702:	d804      	bhi.n	800a70e <USBH_ParseCfgDesc+0x13c>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	885a      	ldrh	r2, [r3, #2]
 800a708:	8afb      	ldrh	r3, [r7, #22]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d8a4      	bhi.n	800a658 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a70e:	bf00      	nop
 800a710:	3728      	adds	r7, #40	; 0x28
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	785a      	ldrb	r2, [r3, #1]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	789a      	ldrb	r2, [r3, #2]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	78da      	ldrb	r2, [r3, #3]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	791a      	ldrb	r2, [r3, #4]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	795a      	ldrb	r2, [r3, #5]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	799a      	ldrb	r2, [r3, #6]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	79da      	ldrb	r2, [r3, #7]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	7a1a      	ldrb	r2, [r3, #8]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	721a      	strb	r2, [r3, #8]
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	785a      	ldrb	r2, [r3, #1]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	789a      	ldrb	r2, [r3, #2]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	78da      	ldrb	r2, [r3, #3]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	3305      	adds	r3, #5
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	021b      	lsls	r3, r3, #8
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	799a      	ldrb	r2, [r3, #6]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	719a      	strb	r2, [r3, #6]
}
 800a7c2:	bf00      	nop
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b087      	sub	sp, #28
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d120      	bne.n	800a828 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	1e9a      	subs	r2, r3, #2
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	bf28      	it	cs
 800a7f2:	4613      	movcs	r3, r2
 800a7f4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	82fb      	strh	r3, [r7, #22]
 800a800:	e00b      	b.n	800a81a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a802:	8afb      	ldrh	r3, [r7, #22]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	3301      	adds	r3, #1
 800a812:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a814:	8afb      	ldrh	r3, [r7, #22]
 800a816:	3302      	adds	r3, #2
 800a818:	82fb      	strh	r3, [r7, #22]
 800a81a:	8afa      	ldrh	r2, [r7, #22]
 800a81c:	8abb      	ldrh	r3, [r7, #20]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d3ef      	bcc.n	800a802 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	701a      	strb	r2, [r3, #0]
  }
}
 800a828:	bf00      	nop
 800a82a:	371c      	adds	r7, #28
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	881a      	ldrh	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	b29b      	uxth	r3, r3
 800a848:	4413      	add	r3, r2
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	4613      	mov	r3, r2
 800a876:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a878:	2301      	movs	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	789b      	ldrb	r3, [r3, #2]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d002      	beq.n	800a88a <USBH_CtlReq+0x20>
 800a884:	2b02      	cmp	r3, #2
 800a886:	d00f      	beq.n	800a8a8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a888:	e027      	b.n	800a8da <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	88fa      	ldrh	r2, [r7, #6]
 800a894:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a6:	e018      	b.n	800a8da <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 f81b 	bl	800a8e4 <USBH_HandleControl>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <USBH_CtlReq+0x54>
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d106      	bne.n	800a8cc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ca:	e005      	b.n	800a8d8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d102      	bne.n	800a8d8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	709a      	strb	r2, [r3, #2]
      break;
 800a8d8:	bf00      	nop
  }
  return status;
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7e1b      	ldrb	r3, [r3, #24]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	2b0a      	cmp	r3, #10
 800a8fc:	f200 8158 	bhi.w	800abb0 <USBH_HandleControl+0x2cc>
 800a900:	a201      	add	r2, pc, #4	; (adr r2, 800a908 <USBH_HandleControl+0x24>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a935 	.word	0x0800a935
 800a90c:	0800a94f 	.word	0x0800a94f
 800a910:	0800a9b9 	.word	0x0800a9b9
 800a914:	0800a9df 	.word	0x0800a9df
 800a918:	0800aa17 	.word	0x0800aa17
 800a91c:	0800aa43 	.word	0x0800aa43
 800a920:	0800aa95 	.word	0x0800aa95
 800a924:	0800aab7 	.word	0x0800aab7
 800a928:	0800aaf3 	.word	0x0800aaf3
 800a92c:	0800ab1b 	.word	0x0800ab1b
 800a930:	0800ab59 	.word	0x0800ab59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f103 0110 	add.w	r1, r3, #16
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	795b      	ldrb	r3, [r3, #5]
 800a93e:	461a      	mov	r2, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f945 	bl	800abd0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2202      	movs	r2, #2
 800a94a:	761a      	strb	r2, [r3, #24]
      break;
 800a94c:	e13b      	b.n	800abc6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	795b      	ldrb	r3, [r3, #5]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fcc5 	bl	800b2e4 <USBH_LL_GetURBState>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d11e      	bne.n	800a9a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7c1b      	ldrb	r3, [r3, #16]
 800a968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a96c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8adb      	ldrh	r3, [r3, #22]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a976:	7b7b      	ldrb	r3, [r7, #13]
 800a978:	2b80      	cmp	r3, #128	; 0x80
 800a97a:	d103      	bne.n	800a984 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2203      	movs	r2, #3
 800a980:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a982:	e117      	b.n	800abb4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2205      	movs	r2, #5
 800a988:	761a      	strb	r2, [r3, #24]
      break;
 800a98a:	e113      	b.n	800abb4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a98c:	7b7b      	ldrb	r3, [r7, #13]
 800a98e:	2b80      	cmp	r3, #128	; 0x80
 800a990:	d103      	bne.n	800a99a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2209      	movs	r2, #9
 800a996:	761a      	strb	r2, [r3, #24]
      break;
 800a998:	e10c      	b.n	800abb4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2207      	movs	r2, #7
 800a99e:	761a      	strb	r2, [r3, #24]
      break;
 800a9a0:	e108      	b.n	800abb4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d003      	beq.n	800a9b0 <USBH_HandleControl+0xcc>
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	f040 8102 	bne.w	800abb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	220b      	movs	r2, #11
 800a9b4:	761a      	strb	r2, [r3, #24]
      break;
 800a9b6:	e0fd      	b.n	800abb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6899      	ldr	r1, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	899a      	ldrh	r2, [r3, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	791b      	ldrb	r3, [r3, #4]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f93c 	bl	800ac4e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2204      	movs	r2, #4
 800a9da:	761a      	strb	r2, [r3, #24]
      break;
 800a9dc:	e0f3      	b.n	800abc6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	791b      	ldrb	r3, [r3, #4]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fc7d 	bl	800b2e4 <USBH_LL_GetURBState>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d102      	bne.n	800a9fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2209      	movs	r2, #9
 800a9f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b05      	cmp	r3, #5
 800a9fe:	d102      	bne.n	800aa06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aa00:	2303      	movs	r3, #3
 800aa02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa04:	e0d8      	b.n	800abb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	f040 80d5 	bne.w	800abb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	220b      	movs	r2, #11
 800aa12:	761a      	strb	r2, [r3, #24]
      break;
 800aa14:	e0d0      	b.n	800abb8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6899      	ldr	r1, [r3, #8]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	899a      	ldrh	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	7958      	ldrb	r0, [r3, #5]
 800aa22:	2301      	movs	r3, #1
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	4603      	mov	r3, r0
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f8eb 	bl	800ac04 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	761a      	strb	r2, [r3, #24]
      break;
 800aa40:	e0c1      	b.n	800abc6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	795b      	ldrb	r3, [r3, #5]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fc4b 	bl	800b2e4 <USBH_LL_GetURBState>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d103      	bne.n	800aa60 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2207      	movs	r2, #7
 800aa5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aa5e:	e0ad      	b.n	800abbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b05      	cmp	r3, #5
 800aa64:	d105      	bne.n	800aa72 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	220c      	movs	r2, #12
 800aa6a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa70:	e0a4      	b.n	800abbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d103      	bne.n	800aa80 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2205      	movs	r2, #5
 800aa7c:	761a      	strb	r2, [r3, #24]
      break;
 800aa7e:	e09d      	b.n	800abbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	f040 809a 	bne.w	800abbc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	220b      	movs	r2, #11
 800aa8c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aa8e:	2302      	movs	r3, #2
 800aa90:	73fb      	strb	r3, [r7, #15]
      break;
 800aa92:	e093      	b.n	800abbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	791b      	ldrb	r3, [r3, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f8d6 	bl	800ac4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2208      	movs	r2, #8
 800aab2:	761a      	strb	r2, [r3, #24]

      break;
 800aab4:	e087      	b.n	800abc6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	791b      	ldrb	r3, [r3, #4]
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fc11 	bl	800b2e4 <USBH_LL_GetURBState>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d105      	bne.n	800aad8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	220d      	movs	r2, #13
 800aad0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aad6:	e073      	b.n	800abc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d103      	bne.n	800aae6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	220b      	movs	r2, #11
 800aae2:	761a      	strb	r2, [r3, #24]
      break;
 800aae4:	e06c      	b.n	800abc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b05      	cmp	r3, #5
 800aaea:	d169      	bne.n	800abc0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800aaec:	2303      	movs	r3, #3
 800aaee:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf0:	e066      	b.n	800abc0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	795a      	ldrb	r2, [r3, #5]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	4613      	mov	r3, r2
 800aafc:	2200      	movs	r2, #0
 800aafe:	2100      	movs	r1, #0
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f87f 	bl	800ac04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	220a      	movs	r2, #10
 800ab16:	761a      	strb	r2, [r3, #24]
      break;
 800ab18:	e055      	b.n	800abc6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fbdf 	bl	800b2e4 <USBH_LL_GetURBState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d105      	bne.n	800ab3c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	220d      	movs	r2, #13
 800ab38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ab3a:	e043      	b.n	800abc4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d103      	bne.n	800ab4a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2209      	movs	r2, #9
 800ab46:	761a      	strb	r2, [r3, #24]
      break;
 800ab48:	e03c      	b.n	800abc4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	2b04      	cmp	r3, #4
 800ab4e:	d139      	bne.n	800abc4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	220b      	movs	r2, #11
 800ab54:	761a      	strb	r2, [r3, #24]
      break;
 800ab56:	e035      	b.n	800abc4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	7e5b      	ldrb	r3, [r3, #25]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	765a      	strb	r2, [r3, #25]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	7e5b      	ldrb	r3, [r3, #25]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d806      	bhi.n	800ab7a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ab78:	e025      	b.n	800abc6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab80:	2106      	movs	r1, #6
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	795b      	ldrb	r3, [r3, #5]
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f90c 	bl	800adb0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	791b      	ldrb	r3, [r3, #4]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f906 	bl	800adb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800abaa:	2302      	movs	r3, #2
 800abac:	73fb      	strb	r3, [r7, #15]
      break;
 800abae:	e00a      	b.n	800abc6 <USBH_HandleControl+0x2e2>

    default:
      break;
 800abb0:	bf00      	nop
 800abb2:	e008      	b.n	800abc6 <USBH_HandleControl+0x2e2>
      break;
 800abb4:	bf00      	nop
 800abb6:	e006      	b.n	800abc6 <USBH_HandleControl+0x2e2>
      break;
 800abb8:	bf00      	nop
 800abba:	e004      	b.n	800abc6 <USBH_HandleControl+0x2e2>
      break;
 800abbc:	bf00      	nop
 800abbe:	e002      	b.n	800abc6 <USBH_HandleControl+0x2e2>
      break;
 800abc0:	bf00      	nop
 800abc2:	e000      	b.n	800abc6 <USBH_HandleControl+0x2e2>
      break;
 800abc4:	bf00      	nop
  }

  return status;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af04      	add	r7, sp, #16
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	4613      	mov	r3, r2
 800abdc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800abde:	79f9      	ldrb	r1, [r7, #7]
 800abe0:	2300      	movs	r3, #0
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	2308      	movs	r3, #8
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	2300      	movs	r3, #0
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	2300      	movs	r3, #0
 800abf2:	2200      	movs	r2, #0
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 fb44 	bl	800b282 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af04      	add	r7, sp, #16
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	4611      	mov	r1, r2
 800ac10:	461a      	mov	r2, r3
 800ac12:	460b      	mov	r3, r1
 800ac14:	80fb      	strh	r3, [r7, #6]
 800ac16:	4613      	mov	r3, r2
 800ac18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ac28:	7979      	ldrb	r1, [r7, #5]
 800ac2a:	7e3b      	ldrb	r3, [r7, #24]
 800ac2c:	9303      	str	r3, [sp, #12]
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	9302      	str	r3, [sp, #8]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	2301      	movs	r3, #1
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f000 fb1f 	bl	800b282 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b088      	sub	sp, #32
 800ac52:	af04      	add	r7, sp, #16
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	4611      	mov	r1, r2
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	80fb      	strh	r3, [r7, #6]
 800ac60:	4613      	mov	r3, r2
 800ac62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ac64:	7979      	ldrb	r1, [r7, #5]
 800ac66:	2300      	movs	r3, #0
 800ac68:	9303      	str	r3, [sp, #12]
 800ac6a:	88fb      	ldrh	r3, [r7, #6]
 800ac6c:	9302      	str	r3, [sp, #8]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	2301      	movs	r3, #1
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	2300      	movs	r3, #0
 800ac78:	2201      	movs	r2, #1
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f000 fb01 	bl	800b282 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ac80:	2300      	movs	r3, #0

}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b088      	sub	sp, #32
 800ac8e:	af04      	add	r7, sp, #16
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	4611      	mov	r1, r2
 800ac96:	461a      	mov	r2, r3
 800ac98:	460b      	mov	r3, r1
 800ac9a:	80fb      	strh	r3, [r7, #6]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800acae:	7979      	ldrb	r1, [r7, #5]
 800acb0:	7e3b      	ldrb	r3, [r7, #24]
 800acb2:	9303      	str	r3, [sp, #12]
 800acb4:	88fb      	ldrh	r3, [r7, #6]
 800acb6:	9302      	str	r3, [sp, #8]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	2301      	movs	r3, #1
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	2302      	movs	r3, #2
 800acc2:	2200      	movs	r2, #0
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 fadc 	bl	800b282 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af04      	add	r7, sp, #16
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	4611      	mov	r1, r2
 800ace0:	461a      	mov	r2, r3
 800ace2:	460b      	mov	r3, r1
 800ace4:	80fb      	strh	r3, [r7, #6]
 800ace6:	4613      	mov	r3, r2
 800ace8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800acea:	7979      	ldrb	r1, [r7, #5]
 800acec:	2300      	movs	r3, #0
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	88fb      	ldrh	r3, [r7, #6]
 800acf2:	9302      	str	r3, [sp, #8]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	2301      	movs	r3, #1
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	2302      	movs	r3, #2
 800acfe:	2201      	movs	r2, #1
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f000 fabe 	bl	800b282 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af04      	add	r7, sp, #16
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	4608      	mov	r0, r1
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4603      	mov	r3, r0
 800ad20:	70fb      	strb	r3, [r7, #3]
 800ad22:	460b      	mov	r3, r1
 800ad24:	70bb      	strb	r3, [r7, #2]
 800ad26:	4613      	mov	r3, r2
 800ad28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ad2a:	7878      	ldrb	r0, [r7, #1]
 800ad2c:	78ba      	ldrb	r2, [r7, #2]
 800ad2e:	78f9      	ldrb	r1, [r7, #3]
 800ad30:	8b3b      	ldrh	r3, [r7, #24]
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	7d3b      	ldrb	r3, [r7, #20]
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	7c3b      	ldrb	r3, [r7, #16]
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa51 	bl	800b1e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa70 	bl	800b244 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	460b      	mov	r3, r1
 800ad78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f836 	bl	800adec <USBH_GetFreePipe>
 800ad80:	4603      	mov	r3, r0
 800ad82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ad84:	89fb      	ldrh	r3, [r7, #14]
 800ad86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00a      	beq.n	800ada4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	89fb      	ldrh	r3, [r7, #14]
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad9a:	6879      	ldr	r1, [r7, #4]
 800ad9c:	33e0      	adds	r3, #224	; 0xe0
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ada4:	89fb      	ldrh	r3, [r7, #14]
 800ada6:	b2db      	uxtb	r3, r3
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	2b0a      	cmp	r3, #10
 800adc0:	d80d      	bhi.n	800adde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	33e0      	adds	r3, #224	; 0xe0
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800add4:	6879      	ldr	r1, [r7, #4]
 800add6:	33e0      	adds	r3, #224	; 0xe0
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]
 800adfc:	e00f      	b.n	800ae1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	33e0      	adds	r3, #224	; 0xe0
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	e007      	b.n	800ae28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	73fb      	strb	r3, [r7, #15]
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	2b0a      	cmp	r3, #10
 800ae22:	d9ec      	bls.n	800adfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ae24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ae38:	2201      	movs	r2, #1
 800ae3a:	490e      	ldr	r1, [pc, #56]	; (800ae74 <MX_USB_HOST_Init+0x40>)
 800ae3c:	480e      	ldr	r0, [pc, #56]	; (800ae78 <MX_USB_HOST_Init+0x44>)
 800ae3e:	f7fe fc9f 	bl	8009780 <USBH_Init>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ae48:	f7f6 f8e6 	bl	8001018 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ae4c:	490b      	ldr	r1, [pc, #44]	; (800ae7c <MX_USB_HOST_Init+0x48>)
 800ae4e:	480a      	ldr	r0, [pc, #40]	; (800ae78 <MX_USB_HOST_Init+0x44>)
 800ae50:	f7fe fd24 	bl	800989c <USBH_RegisterClass>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ae5a:	f7f6 f8dd 	bl	8001018 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ae5e:	4806      	ldr	r0, [pc, #24]	; (800ae78 <MX_USB_HOST_Init+0x44>)
 800ae60:	f7fe fda8 	bl	80099b4 <USBH_Start>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae6a:	f7f6 f8d5 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae6e:	bf00      	nop
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	0800ae95 	.word	0x0800ae95
 800ae78:	200004a0 	.word	0x200004a0
 800ae7c:	2000000c 	.word	0x2000000c

0800ae80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ae84:	4802      	ldr	r0, [pc, #8]	; (800ae90 <MX_USB_HOST_Process+0x10>)
 800ae86:	f7fe fda5 	bl	80099d4 <USBH_Process>
}
 800ae8a:	bf00      	nop
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	200004a0 	.word	0x200004a0

0800ae94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	2b04      	cmp	r3, #4
 800aea6:	d819      	bhi.n	800aedc <USBH_UserProcess+0x48>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <USBH_UserProcess+0x1c>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aedd 	.word	0x0800aedd
 800aeb4:	0800aecd 	.word	0x0800aecd
 800aeb8:	0800aedd 	.word	0x0800aedd
 800aebc:	0800aed5 	.word	0x0800aed5
 800aec0:	0800aec5 	.word	0x0800aec5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aec4:	4b09      	ldr	r3, [pc, #36]	; (800aeec <USBH_UserProcess+0x58>)
 800aec6:	2203      	movs	r2, #3
 800aec8:	701a      	strb	r2, [r3, #0]
  break;
 800aeca:	e008      	b.n	800aede <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aecc:	4b07      	ldr	r3, [pc, #28]	; (800aeec <USBH_UserProcess+0x58>)
 800aece:	2202      	movs	r2, #2
 800aed0:	701a      	strb	r2, [r3, #0]
  break;
 800aed2:	e004      	b.n	800aede <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <USBH_UserProcess+0x58>)
 800aed6:	2201      	movs	r2, #1
 800aed8:	701a      	strb	r2, [r3, #0]
  break;
 800aeda:	e000      	b.n	800aede <USBH_UserProcess+0x4a>

  default:
  break;
 800aedc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aede:	bf00      	nop
 800aee0:	370c      	adds	r7, #12
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	200000f8 	.word	0x200000f8

0800aef0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08a      	sub	sp, #40	; 0x28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aef8:	f107 0314 	add.w	r3, r7, #20
 800aefc:	2200      	movs	r2, #0
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	605a      	str	r2, [r3, #4]
 800af02:	609a      	str	r2, [r3, #8]
 800af04:	60da      	str	r2, [r3, #12]
 800af06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af10:	d147      	bne.n	800afa2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af12:	2300      	movs	r3, #0
 800af14:	613b      	str	r3, [r7, #16]
 800af16:	4b25      	ldr	r3, [pc, #148]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1a:	4a24      	ldr	r2, [pc, #144]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af1c:	f043 0301 	orr.w	r3, r3, #1
 800af20:	6313      	str	r3, [r2, #48]	; 0x30
 800af22:	4b22      	ldr	r3, [pc, #136]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	613b      	str	r3, [r7, #16]
 800af2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800af2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af34:	2300      	movs	r3, #0
 800af36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af38:	2300      	movs	r3, #0
 800af3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800af3c:	f107 0314 	add.w	r3, r7, #20
 800af40:	4619      	mov	r1, r3
 800af42:	481b      	ldr	r0, [pc, #108]	; (800afb0 <HAL_HCD_MspInit+0xc0>)
 800af44:	f7f7 fd04 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800af48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800af4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af4e:	2302      	movs	r3, #2
 800af50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af52:	2300      	movs	r3, #0
 800af54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af56:	2303      	movs	r3, #3
 800af58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af5a:	230a      	movs	r3, #10
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af5e:	f107 0314 	add.w	r3, r7, #20
 800af62:	4619      	mov	r1, r3
 800af64:	4812      	ldr	r0, [pc, #72]	; (800afb0 <HAL_HCD_MspInit+0xc0>)
 800af66:	f7f7 fcf3 	bl	8002950 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af6a:	4b10      	ldr	r3, [pc, #64]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	4a0f      	ldr	r2, [pc, #60]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af74:	6353      	str	r3, [r2, #52]	; 0x34
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	4b0c      	ldr	r3, [pc, #48]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7e:	4a0b      	ldr	r2, [pc, #44]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af84:	6453      	str	r3, [r2, #68]	; 0x44
 800af86:	4b09      	ldr	r3, [pc, #36]	; (800afac <HAL_HCD_MspInit+0xbc>)
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af8e:	60fb      	str	r3, [r7, #12]
 800af90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af92:	2200      	movs	r2, #0
 800af94:	2100      	movs	r1, #0
 800af96:	2043      	movs	r0, #67	; 0x43
 800af98:	f7f7 fa07 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af9c:	2043      	movs	r0, #67	; 0x43
 800af9e:	f7f7 fa20 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afa2:	bf00      	nop
 800afa4:	3728      	adds	r7, #40	; 0x28
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	40023800 	.word	0x40023800
 800afb0:	40020000 	.word	0x40020000

0800afb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff f8d9 	bl	800a17a <USBH_LL_IncTimer>
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff f911 	bl	800a206 <USBH_LL_Connect>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff f91a 	bl	800a234 <USBH_LL_Disconnect>
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
 800b014:	4613      	mov	r3, r2
 800b016:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b032:	4618      	mov	r0, r3
 800b034:	f7ff f8cb 	bl	800a1ce <USBH_LL_PortEnabled>
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff f8cb 	bl	800a1ea <USBH_LL_PortDisabled>
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d12a      	bne.n	800b0c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b06e:	4a18      	ldr	r2, [pc, #96]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b07a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b07e:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b080:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b084:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800b086:	4b12      	ldr	r3, [pc, #72]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b088:	220c      	movs	r2, #12
 800b08a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b08c:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b08e:	2201      	movs	r2, #1
 800b090:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b094:	2200      	movs	r2, #0
 800b096:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b098:	4b0d      	ldr	r3, [pc, #52]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b09a:	2202      	movs	r2, #2
 800b09c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b0a4:	480a      	ldr	r0, [pc, #40]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b0a6:	f7f7 fe22 	bl	8002cee <HAL_HCD_Init>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b0b0:	f7f5 ffb2 	bl	8001018 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b0b4:	4806      	ldr	r0, [pc, #24]	; (800b0d0 <USBH_LL_Init+0x74>)
 800b0b6:	f7f8 fa25 	bl	8003504 <HAL_HCD_GetCurrentFrame>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff f84c 	bl	800a15c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000878 	.word	0x20000878

0800b0d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f8 f992 	bl	8003414 <HAL_HCD_Start>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 f95c 	bl	800b3b4 <USBH_Get_USB_Status>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b100:	7bbb      	ldrb	r3, [r7, #14]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b120:	4618      	mov	r0, r3
 800b122:	f7f8 f99a 	bl	800345a <HAL_HCD_Stop>
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f941 	bl	800b3b4 <USBH_Get_USB_Status>
 800b132:	4603      	mov	r3, r0
 800b134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b136:	7bbb      	ldrb	r3, [r7, #14]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b148:	2301      	movs	r3, #1
 800b14a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b152:	4618      	mov	r0, r3
 800b154:	f7f8 f9e4 	bl	8003520 <HAL_HCD_GetCurrentSpeed>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d007      	beq.n	800b16e <USBH_LL_GetSpeed+0x2e>
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d302      	bcc.n	800b168 <USBH_LL_GetSpeed+0x28>
 800b162:	2b02      	cmp	r3, #2
 800b164:	d006      	beq.n	800b174 <USBH_LL_GetSpeed+0x34>
 800b166:	e008      	b.n	800b17a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]
    break;
 800b16c:	e008      	b.n	800b180 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b16e:	2301      	movs	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]
    break;
 800b172:	e005      	b.n	800b180 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b174:	2302      	movs	r3, #2
 800b176:	73fb      	strb	r3, [r7, #15]
    break;
 800b178:	e002      	b.n	800b180 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b17a:	2301      	movs	r3, #1
 800b17c:	73fb      	strb	r3, [r7, #15]
    break;
 800b17e:	bf00      	nop
  }
  return  speed;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7f8 f977 	bl	8003494 <HAL_HCD_ResetPort>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 f901 	bl	800b3b4 <USBH_Get_USB_Status>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1d2:	78fa      	ldrb	r2, [r7, #3]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7f8 f97f 	bl	80034da <HAL_HCD_HC_GetXferCount>
 800b1dc:	4603      	mov	r3, r0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b1e6:	b590      	push	{r4, r7, lr}
 800b1e8:	b089      	sub	sp, #36	; 0x24
 800b1ea:	af04      	add	r7, sp, #16
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	4608      	mov	r0, r1
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	70fb      	strb	r3, [r7, #3]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70bb      	strb	r3, [r7, #2]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b20e:	787c      	ldrb	r4, [r7, #1]
 800b210:	78ba      	ldrb	r2, [r7, #2]
 800b212:	78f9      	ldrb	r1, [r7, #3]
 800b214:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	4623      	mov	r3, r4
 800b226:	f7f7 fdc4 	bl	8002db2 <HAL_HCD_HC_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 f8bf 	bl	800b3b4 <USBH_Get_USB_Status>
 800b236:	4603      	mov	r3, r0
 800b238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b23a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	bd90      	pop	{r4, r7, pc}

0800b244 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b25e:	78fa      	ldrb	r2, [r7, #3]
 800b260:	4611      	mov	r1, r2
 800b262:	4618      	mov	r0, r3
 800b264:	f7f7 fe3d 	bl	8002ee2 <HAL_HCD_HC_Halt>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 f8a0 	bl	800b3b4 <USBH_Get_USB_Status>
 800b274:	4603      	mov	r3, r0
 800b276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b278:	7bbb      	ldrb	r3, [r7, #14]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b282:	b590      	push	{r4, r7, lr}
 800b284:	b089      	sub	sp, #36	; 0x24
 800b286:	af04      	add	r7, sp, #16
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	4608      	mov	r0, r1
 800b28c:	4611      	mov	r1, r2
 800b28e:	461a      	mov	r2, r3
 800b290:	4603      	mov	r3, r0
 800b292:	70fb      	strb	r3, [r7, #3]
 800b294:	460b      	mov	r3, r1
 800b296:	70bb      	strb	r3, [r7, #2]
 800b298:	4613      	mov	r3, r2
 800b29a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b2aa:	787c      	ldrb	r4, [r7, #1]
 800b2ac:	78ba      	ldrb	r2, [r7, #2]
 800b2ae:	78f9      	ldrb	r1, [r7, #3]
 800b2b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	4623      	mov	r3, r4
 800b2c6:	f7f7 fe2f 	bl	8002f28 <HAL_HCD_HC_SubmitRequest>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 f86f 	bl	800b3b4 <USBH_Get_USB_Status>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd90      	pop	{r4, r7, pc}

0800b2e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2f6:	78fa      	ldrb	r2, [r7, #3]
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7f8 f8d8 	bl	80034b0 <HAL_HCD_HC_GetURBState>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d103      	bne.n	800b328 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 f872 	bl	800b40c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b328:	20c8      	movs	r0, #200	; 0xc8
 800b32a:	f7f6 fccf 	bl	8001ccc <HAL_Delay>
  return USBH_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	460b      	mov	r3, r1
 800b342:	70fb      	strb	r3, [r7, #3]
 800b344:	4613      	mov	r3, r2
 800b346:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b34e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b350:	78fa      	ldrb	r2, [r7, #3]
 800b352:	68f9      	ldr	r1, [r7, #12]
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	440b      	add	r3, r1
 800b35e:	333b      	adds	r3, #59	; 0x3b
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00a      	beq.n	800b37c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b366:	78fa      	ldrb	r2, [r7, #3]
 800b368:	68f9      	ldr	r1, [r7, #12]
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	00db      	lsls	r3, r3, #3
 800b372:	440b      	add	r3, r1
 800b374:	3350      	adds	r3, #80	; 0x50
 800b376:	78ba      	ldrb	r2, [r7, #2]
 800b378:	701a      	strb	r2, [r3, #0]
 800b37a:	e009      	b.n	800b390 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	68f9      	ldr	r1, [r7, #12]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	440b      	add	r3, r1
 800b38a:	3351      	adds	r3, #81	; 0x51
 800b38c:	78ba      	ldrb	r2, [r7, #2]
 800b38e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f7f6 fc90 	bl	8001ccc <HAL_Delay>
}
 800b3ac:	bf00      	nop
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3c2:	79fb      	ldrb	r3, [r7, #7]
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d817      	bhi.n	800b3f8 <USBH_Get_USB_Status+0x44>
 800b3c8:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <USBH_Get_USB_Status+0x1c>)
 800b3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ce:	bf00      	nop
 800b3d0:	0800b3e1 	.word	0x0800b3e1
 800b3d4:	0800b3e7 	.word	0x0800b3e7
 800b3d8:	0800b3ed 	.word	0x0800b3ed
 800b3dc:	0800b3f3 	.word	0x0800b3f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3e4:	e00b      	b.n	800b3fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ea:	e008      	b.n	800b3fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f0:	e005      	b.n	800b3fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f6:	e002      	b.n	800b3fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fc:	bf00      	nop
  }
  return usb_status;
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b416:	79fb      	ldrb	r3, [r7, #7]
 800b418:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b420:	2301      	movs	r3, #1
 800b422:	73fb      	strb	r3, [r7, #15]
 800b424:	e001      	b.n	800b42a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	461a      	mov	r2, r3
 800b42e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b432:	4803      	ldr	r0, [pc, #12]	; (800b440 <MX_DriverVbusFS+0x34>)
 800b434:	f7f7 fc1e 	bl	8002c74 <HAL_GPIO_WritePin>
}
 800b438:	bf00      	nop
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	40021800 	.word	0x40021800

0800b444 <__errno>:
 800b444:	4b01      	ldr	r3, [pc, #4]	; (800b44c <__errno+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	2000002c 	.word	0x2000002c

0800b450 <__libc_init_array>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	4e0d      	ldr	r6, [pc, #52]	; (800b488 <__libc_init_array+0x38>)
 800b454:	4c0d      	ldr	r4, [pc, #52]	; (800b48c <__libc_init_array+0x3c>)
 800b456:	1ba4      	subs	r4, r4, r6
 800b458:	10a4      	asrs	r4, r4, #2
 800b45a:	2500      	movs	r5, #0
 800b45c:	42a5      	cmp	r5, r4
 800b45e:	d109      	bne.n	800b474 <__libc_init_array+0x24>
 800b460:	4e0b      	ldr	r6, [pc, #44]	; (800b490 <__libc_init_array+0x40>)
 800b462:	4c0c      	ldr	r4, [pc, #48]	; (800b494 <__libc_init_array+0x44>)
 800b464:	f000 f8ea 	bl	800b63c <_init>
 800b468:	1ba4      	subs	r4, r4, r6
 800b46a:	10a4      	asrs	r4, r4, #2
 800b46c:	2500      	movs	r5, #0
 800b46e:	42a5      	cmp	r5, r4
 800b470:	d105      	bne.n	800b47e <__libc_init_array+0x2e>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b478:	4798      	blx	r3
 800b47a:	3501      	adds	r5, #1
 800b47c:	e7ee      	b.n	800b45c <__libc_init_array+0xc>
 800b47e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b482:	4798      	blx	r3
 800b484:	3501      	adds	r5, #1
 800b486:	e7f2      	b.n	800b46e <__libc_init_array+0x1e>
 800b488:	0800b6b0 	.word	0x0800b6b0
 800b48c:	0800b6b0 	.word	0x0800b6b0
 800b490:	0800b6b0 	.word	0x0800b6b0
 800b494:	0800b6b4 	.word	0x0800b6b4

0800b498 <malloc>:
 800b498:	4b02      	ldr	r3, [pc, #8]	; (800b4a4 <malloc+0xc>)
 800b49a:	4601      	mov	r1, r0
 800b49c:	6818      	ldr	r0, [r3, #0]
 800b49e:	f000 b861 	b.w	800b564 <_malloc_r>
 800b4a2:	bf00      	nop
 800b4a4:	2000002c 	.word	0x2000002c

0800b4a8 <free>:
 800b4a8:	4b02      	ldr	r3, [pc, #8]	; (800b4b4 <free+0xc>)
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	f000 b80b 	b.w	800b4c8 <_free_r>
 800b4b2:	bf00      	nop
 800b4b4:	2000002c 	.word	0x2000002c

0800b4b8 <memset>:
 800b4b8:	4402      	add	r2, r0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d100      	bne.n	800b4c2 <memset+0xa>
 800b4c0:	4770      	bx	lr
 800b4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c6:	e7f9      	b.n	800b4bc <memset+0x4>

0800b4c8 <_free_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4605      	mov	r5, r0
 800b4cc:	2900      	cmp	r1, #0
 800b4ce:	d045      	beq.n	800b55c <_free_r+0x94>
 800b4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4d4:	1f0c      	subs	r4, r1, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	bfb8      	it	lt
 800b4da:	18e4      	addlt	r4, r4, r3
 800b4dc:	f000 f8ac 	bl	800b638 <__malloc_lock>
 800b4e0:	4a1f      	ldr	r2, [pc, #124]	; (800b560 <_free_r+0x98>)
 800b4e2:	6813      	ldr	r3, [r2, #0]
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	b933      	cbnz	r3, 800b4f6 <_free_r+0x2e>
 800b4e8:	6063      	str	r3, [r4, #4]
 800b4ea:	6014      	str	r4, [r2, #0]
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f2:	f000 b8a2 	b.w	800b63a <__malloc_unlock>
 800b4f6:	42a3      	cmp	r3, r4
 800b4f8:	d90c      	bls.n	800b514 <_free_r+0x4c>
 800b4fa:	6821      	ldr	r1, [r4, #0]
 800b4fc:	1862      	adds	r2, r4, r1
 800b4fe:	4293      	cmp	r3, r2
 800b500:	bf04      	itt	eq
 800b502:	681a      	ldreq	r2, [r3, #0]
 800b504:	685b      	ldreq	r3, [r3, #4]
 800b506:	6063      	str	r3, [r4, #4]
 800b508:	bf04      	itt	eq
 800b50a:	1852      	addeq	r2, r2, r1
 800b50c:	6022      	streq	r2, [r4, #0]
 800b50e:	6004      	str	r4, [r0, #0]
 800b510:	e7ec      	b.n	800b4ec <_free_r+0x24>
 800b512:	4613      	mov	r3, r2
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	b10a      	cbz	r2, 800b51c <_free_r+0x54>
 800b518:	42a2      	cmp	r2, r4
 800b51a:	d9fa      	bls.n	800b512 <_free_r+0x4a>
 800b51c:	6819      	ldr	r1, [r3, #0]
 800b51e:	1858      	adds	r0, r3, r1
 800b520:	42a0      	cmp	r0, r4
 800b522:	d10b      	bne.n	800b53c <_free_r+0x74>
 800b524:	6820      	ldr	r0, [r4, #0]
 800b526:	4401      	add	r1, r0
 800b528:	1858      	adds	r0, r3, r1
 800b52a:	4282      	cmp	r2, r0
 800b52c:	6019      	str	r1, [r3, #0]
 800b52e:	d1dd      	bne.n	800b4ec <_free_r+0x24>
 800b530:	6810      	ldr	r0, [r2, #0]
 800b532:	6852      	ldr	r2, [r2, #4]
 800b534:	605a      	str	r2, [r3, #4]
 800b536:	4401      	add	r1, r0
 800b538:	6019      	str	r1, [r3, #0]
 800b53a:	e7d7      	b.n	800b4ec <_free_r+0x24>
 800b53c:	d902      	bls.n	800b544 <_free_r+0x7c>
 800b53e:	230c      	movs	r3, #12
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	e7d3      	b.n	800b4ec <_free_r+0x24>
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	1821      	adds	r1, r4, r0
 800b548:	428a      	cmp	r2, r1
 800b54a:	bf04      	itt	eq
 800b54c:	6811      	ldreq	r1, [r2, #0]
 800b54e:	6852      	ldreq	r2, [r2, #4]
 800b550:	6062      	str	r2, [r4, #4]
 800b552:	bf04      	itt	eq
 800b554:	1809      	addeq	r1, r1, r0
 800b556:	6021      	streq	r1, [r4, #0]
 800b558:	605c      	str	r4, [r3, #4]
 800b55a:	e7c7      	b.n	800b4ec <_free_r+0x24>
 800b55c:	bd38      	pop	{r3, r4, r5, pc}
 800b55e:	bf00      	nop
 800b560:	200000fc 	.word	0x200000fc

0800b564 <_malloc_r>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	1ccd      	adds	r5, r1, #3
 800b568:	f025 0503 	bic.w	r5, r5, #3
 800b56c:	3508      	adds	r5, #8
 800b56e:	2d0c      	cmp	r5, #12
 800b570:	bf38      	it	cc
 800b572:	250c      	movcc	r5, #12
 800b574:	2d00      	cmp	r5, #0
 800b576:	4606      	mov	r6, r0
 800b578:	db01      	blt.n	800b57e <_malloc_r+0x1a>
 800b57a:	42a9      	cmp	r1, r5
 800b57c:	d903      	bls.n	800b586 <_malloc_r+0x22>
 800b57e:	230c      	movs	r3, #12
 800b580:	6033      	str	r3, [r6, #0]
 800b582:	2000      	movs	r0, #0
 800b584:	bd70      	pop	{r4, r5, r6, pc}
 800b586:	f000 f857 	bl	800b638 <__malloc_lock>
 800b58a:	4a21      	ldr	r2, [pc, #132]	; (800b610 <_malloc_r+0xac>)
 800b58c:	6814      	ldr	r4, [r2, #0]
 800b58e:	4621      	mov	r1, r4
 800b590:	b991      	cbnz	r1, 800b5b8 <_malloc_r+0x54>
 800b592:	4c20      	ldr	r4, [pc, #128]	; (800b614 <_malloc_r+0xb0>)
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	b91b      	cbnz	r3, 800b5a0 <_malloc_r+0x3c>
 800b598:	4630      	mov	r0, r6
 800b59a:	f000 f83d 	bl	800b618 <_sbrk_r>
 800b59e:	6020      	str	r0, [r4, #0]
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 f838 	bl	800b618 <_sbrk_r>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d124      	bne.n	800b5f6 <_malloc_r+0x92>
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	6033      	str	r3, [r6, #0]
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f000 f842 	bl	800b63a <__malloc_unlock>
 800b5b6:	e7e4      	b.n	800b582 <_malloc_r+0x1e>
 800b5b8:	680b      	ldr	r3, [r1, #0]
 800b5ba:	1b5b      	subs	r3, r3, r5
 800b5bc:	d418      	bmi.n	800b5f0 <_malloc_r+0x8c>
 800b5be:	2b0b      	cmp	r3, #11
 800b5c0:	d90f      	bls.n	800b5e2 <_malloc_r+0x7e>
 800b5c2:	600b      	str	r3, [r1, #0]
 800b5c4:	50cd      	str	r5, [r1, r3]
 800b5c6:	18cc      	adds	r4, r1, r3
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f000 f836 	bl	800b63a <__malloc_unlock>
 800b5ce:	f104 000b 	add.w	r0, r4, #11
 800b5d2:	1d23      	adds	r3, r4, #4
 800b5d4:	f020 0007 	bic.w	r0, r0, #7
 800b5d8:	1ac3      	subs	r3, r0, r3
 800b5da:	d0d3      	beq.n	800b584 <_malloc_r+0x20>
 800b5dc:	425a      	negs	r2, r3
 800b5de:	50e2      	str	r2, [r4, r3]
 800b5e0:	e7d0      	b.n	800b584 <_malloc_r+0x20>
 800b5e2:	428c      	cmp	r4, r1
 800b5e4:	684b      	ldr	r3, [r1, #4]
 800b5e6:	bf16      	itet	ne
 800b5e8:	6063      	strne	r3, [r4, #4]
 800b5ea:	6013      	streq	r3, [r2, #0]
 800b5ec:	460c      	movne	r4, r1
 800b5ee:	e7eb      	b.n	800b5c8 <_malloc_r+0x64>
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	6849      	ldr	r1, [r1, #4]
 800b5f4:	e7cc      	b.n	800b590 <_malloc_r+0x2c>
 800b5f6:	1cc4      	adds	r4, r0, #3
 800b5f8:	f024 0403 	bic.w	r4, r4, #3
 800b5fc:	42a0      	cmp	r0, r4
 800b5fe:	d005      	beq.n	800b60c <_malloc_r+0xa8>
 800b600:	1a21      	subs	r1, r4, r0
 800b602:	4630      	mov	r0, r6
 800b604:	f000 f808 	bl	800b618 <_sbrk_r>
 800b608:	3001      	adds	r0, #1
 800b60a:	d0cf      	beq.n	800b5ac <_malloc_r+0x48>
 800b60c:	6025      	str	r5, [r4, #0]
 800b60e:	e7db      	b.n	800b5c8 <_malloc_r+0x64>
 800b610:	200000fc 	.word	0x200000fc
 800b614:	20000100 	.word	0x20000100

0800b618 <_sbrk_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4c06      	ldr	r4, [pc, #24]	; (800b634 <_sbrk_r+0x1c>)
 800b61c:	2300      	movs	r3, #0
 800b61e:	4605      	mov	r5, r0
 800b620:	4608      	mov	r0, r1
 800b622:	6023      	str	r3, [r4, #0]
 800b624:	f7f6 fa6a 	bl	8001afc <_sbrk>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_sbrk_r+0x1a>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_sbrk_r+0x1a>
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20000b3c 	.word	0x20000b3c

0800b638 <__malloc_lock>:
 800b638:	4770      	bx	lr

0800b63a <__malloc_unlock>:
 800b63a:	4770      	bx	lr

0800b63c <_init>:
 800b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63e:	bf00      	nop
 800b640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b642:	bc08      	pop	{r3}
 800b644:	469e      	mov	lr, r3
 800b646:	4770      	bx	lr

0800b648 <_fini>:
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	bf00      	nop
 800b64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64e:	bc08      	pop	{r3}
 800b650:	469e      	mov	lr, r3
 800b652:	4770      	bx	lr
