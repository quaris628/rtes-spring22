
Lab-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f48  0800cde8  0800cde8  0001cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed30  0800ed30  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed30  0800ed30  0001ed30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed38  0800ed38  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed38  0800ed38  0001ed38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed3c  0800ed3c  0001ed3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800ed40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  200000e4  0800ee24  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  0800ee24  00020bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f97d  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005805  00000000  00000000  0004fa91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00055298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021d0  00000000  00000000  000576b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aa8c  00000000  00000000  00059888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020d5a  00000000  00000000  00084314  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebe17  00000000  00000000  000a506e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190e85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ba8  00000000  00000000  00190f00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e4 	.word	0x200000e4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cdd0 	.word	0x0800cdd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e8 	.word	0x200000e8
 8000214:	0800cdd0 	.word	0x0800cdd0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_UART_RxCpltCallback>:
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart6, rx_buffer, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	4947      	ldr	r1, [pc, #284]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 8000524:	4847      	ldr	r0, [pc, #284]	; (8000644 <HAL_UART_RxCpltCallback+0x12c>)
 8000526:	f007 fe60 	bl	80081ea <HAL_UART_Receive_IT>
	switch(rx_buffer[0])
 800052a:	4b45      	ldr	r3, [pc, #276]	; (8000640 <HAL_UART_RxCpltCallback+0x128>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	3b41      	subs	r3, #65	; 0x41
 8000530:	2b36      	cmp	r3, #54	; 0x36
 8000532:	f200 8081 	bhi.w	8000638 <HAL_UART_RxCpltCallback+0x120>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <HAL_UART_RxCpltCallback+0x24>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	08000629 	.word	0x08000629
 8000540:	08000639 	.word	0x08000639
 8000544:	08000639 	.word	0x08000639
 8000548:	08000631 	.word	0x08000631
 800054c:	08000639 	.word	0x08000639
 8000550:	08000639 	.word	0x08000639
 8000554:	08000639 	.word	0x08000639
 8000558:	08000639 	.word	0x08000639
 800055c:	08000639 	.word	0x08000639
 8000560:	08000639 	.word	0x08000639
 8000564:	08000639 	.word	0x08000639
 8000568:	08000639 	.word	0x08000639
 800056c:	08000639 	.word	0x08000639
 8000570:	08000639 	.word	0x08000639
 8000574:	08000639 	.word	0x08000639
 8000578:	08000639 	.word	0x08000639
 800057c:	08000639 	.word	0x08000639
 8000580:	08000639 	.word	0x08000639
 8000584:	08000621 	.word	0x08000621
 8000588:	08000639 	.word	0x08000639
 800058c:	08000639 	.word	0x08000639
 8000590:	08000639 	.word	0x08000639
 8000594:	08000619 	.word	0x08000619
 8000598:	08000639 	.word	0x08000639
 800059c:	08000639 	.word	0x08000639
 80005a0:	08000639 	.word	0x08000639
 80005a4:	08000639 	.word	0x08000639
 80005a8:	08000639 	.word	0x08000639
 80005ac:	08000639 	.word	0x08000639
 80005b0:	08000639 	.word	0x08000639
 80005b4:	08000639 	.word	0x08000639
 80005b8:	08000639 	.word	0x08000639
 80005bc:	08000629 	.word	0x08000629
 80005c0:	08000639 	.word	0x08000639
 80005c4:	08000639 	.word	0x08000639
 80005c8:	08000631 	.word	0x08000631
 80005cc:	08000639 	.word	0x08000639
 80005d0:	08000639 	.word	0x08000639
 80005d4:	08000639 	.word	0x08000639
 80005d8:	08000639 	.word	0x08000639
 80005dc:	08000639 	.word	0x08000639
 80005e0:	08000639 	.word	0x08000639
 80005e4:	08000639 	.word	0x08000639
 80005e8:	08000639 	.word	0x08000639
 80005ec:	08000639 	.word	0x08000639
 80005f0:	08000639 	.word	0x08000639
 80005f4:	08000639 	.word	0x08000639
 80005f8:	08000639 	.word	0x08000639
 80005fc:	08000639 	.word	0x08000639
 8000600:	08000639 	.word	0x08000639
 8000604:	08000621 	.word	0x08000621
 8000608:	08000639 	.word	0x08000639
 800060c:	08000639 	.word	0x08000639
 8000610:	08000639 	.word	0x08000639
 8000614:	08000619 	.word	0x08000619
	{
	case 'W':
	case 'w': move = UP; break;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <HAL_UART_RxCpltCallback+0x130>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e00b      	b.n	8000638 <HAL_UART_RxCpltCallback+0x120>
	case 'S':
	case 's': move = DOWN; break;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_UART_RxCpltCallback+0x130>)
 8000622:	2202      	movs	r2, #2
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e007      	b.n	8000638 <HAL_UART_RxCpltCallback+0x120>
	case 'A':
	case 'a': move = LEFT; break;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_UART_RxCpltCallback+0x130>)
 800062a:	2203      	movs	r2, #3
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e003      	b.n	8000638 <HAL_UART_RxCpltCallback+0x120>
	case 'D':
	case 'd': move = RIGHT; break;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_UART_RxCpltCallback+0x130>)
 8000632:	2204      	movs	r2, #4
 8000634:	701a      	strb	r2, [r3, #0]
 8000636:	bf00      	nop
	}
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200002f0 	.word	0x200002f0
 8000644:	20000478 	.word	0x20000478
 8000648:	20000100 	.word	0x20000100

0800064c <drawShape>:

void drawShape(uint16_t color)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	BSP_LCD_SetTextColor(color);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fa63 	bl	8002b24 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(xCoord, yCoord, WIDTH, HEIGHT);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <drawShape+0x34>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	b298      	uxth	r0, r3
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <drawShape+0x38>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	b299      	uxth	r1, r3
 800066a:	230f      	movs	r3, #15
 800066c:	b29a      	uxth	r2, r3
 800066e:	230a      	movs	r3, #10
 8000670:	b29b      	uxth	r3, r3
 8000672:	f002 fb03 	bl	8002c7c <BSP_LCD_FillRect>

}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000
 8000684:	20000004 	.word	0x20000004

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f002 fb7a 	bl	8002d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f874 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 fb72 	bl	8000d7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000698:	f000 f910 	bl	80008bc <MX_ADC1_Init>
  MX_DAC_Init();
 800069c:	f000 f960 	bl	8000960 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80006a0:	f000 f988 	bl	80009b4 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80006a4:	f000 f9be 	bl	8000a24 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80006a8:	f000 fa26 	bl	8000af8 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80006ac:	f000 fcec 	bl	8001088 <MX_FSMC_Init>
  MX_I2S2_Init();
 80006b0:	f000 fa86 	bl	8000bc0 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80006b4:	f000 fab2 	bl	8000c1c <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80006b8:	f000 fadc 	bl	8000c74 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80006bc:	f000 fb0a 	bl	8000cd4 <MX_UART10_Init>
  MX_USART6_UART_Init();
 80006c0:	f000 fb32 	bl	8000d28 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 80006c4:	f00b ff80 	bl	800c5c8 <MX_USB_HOST_Init>
  MX_I2C2_Init();
 80006c8:	f000 fa4c 	bl	8000b64 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80006cc:	f002 f99b 	bl	8002a06 <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80006d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006d4:	f002 fa46 	bl	8002b64 <BSP_LCD_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Receive_IT(&huart6, rx_buffer, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	4923      	ldr	r1, [pc, #140]	; (8000768 <main+0xe0>)
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <main+0xe4>)
 80006de:	f007 fd84 	bl	80081ea <HAL_UART_Receive_IT>
  drawShape(SHAPECOLOR);
 80006e2:	2300      	movs	r3, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffb1 	bl	800064c <drawShape>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006ea:	f00b ff93 	bl	800c614 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    if (move != NONE) {
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <main+0xe8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <main+0x62>
    	drawShape(BACKGROUNDCOLOR);
 80006f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffa6 	bl	800064c <drawShape>
		switch(move)
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <main+0xe8>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	2b03      	cmp	r3, #3
 8000708:	d826      	bhi.n	8000758 <main+0xd0>
 800070a:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <main+0x88>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	08000721 	.word	0x08000721
 8000714:	0800072f 	.word	0x0800072f
 8000718:	0800073d 	.word	0x0800073d
 800071c:	0800074b 	.word	0x0800074b
		{
			case UP: yCoord -= MOVE_AMT; break;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <main+0xec>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2214      	movs	r2, #20
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <main+0xec>)
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	e014      	b.n	8000758 <main+0xd0>
			case DOWN: yCoord += MOVE_AMT; break;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0xec>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2214      	movs	r2, #20
 8000734:	4413      	add	r3, r2
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <main+0xec>)
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e00d      	b.n	8000758 <main+0xd0>
			case LEFT: xCoord -= MOVE_AMT; break;
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0xf0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2214      	movs	r2, #20
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <main+0xf0>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	e006      	b.n	8000758 <main+0xd0>
			case RIGHT: xCoord += MOVE_AMT; break;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <main+0xf0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2214      	movs	r2, #20
 8000750:	4413      	add	r3, r2
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <main+0xf0>)
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	bf00      	nop
		}
    	drawShape(SHAPECOLOR);
 8000758:	2300      	movs	r3, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff76 	bl	800064c <drawShape>
		move = NONE;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <main+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000766:	e7c0      	b.n	80006ea <main+0x62>
 8000768:	200002f0 	.word	0x200002f0
 800076c:	20000478 	.word	0x20000478
 8000770:	20000100 	.word	0x20000100
 8000774:	20000004 	.word	0x20000004
 8000778:	20000000 	.word	0x20000000

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b0aa      	sub	sp, #168	; 0xa8
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000786:	2234      	movs	r2, #52	; 0x34
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f00c fa5e 	bl	800cc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2258      	movs	r2, #88	; 0x58
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00c fa4f 	bl	800cc4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <SystemClock_Config+0x138>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <SystemClock_Config+0x138>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <SystemClock_Config+0x138>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <SystemClock_Config+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a39      	ldr	r2, [pc, #228]	; (80008b8 <SystemClock_Config+0x13c>)
 80007d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <SystemClock_Config+0x13c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007e6:	2303      	movs	r3, #3
 80007e8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ee:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800080a:	230f      	movs	r3, #15
 800080c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000810:	2390      	movs	r3, #144	; 0x90
 8000812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800081c:	2305      	movs	r3, #5
 800081e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800082c:	4618      	mov	r0, r3
 800082e:	f006 fc9d 	bl	800716c <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000838:	f000 fcd8 	bl	80011ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000850:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fee0 	bl	800661c <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000862:	f000 fcc3 	bl	80011ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 8000866:	f240 1371 	movw	r3, #369	; 0x171
 800086a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800086c:	2332      	movs	r3, #50	; 0x32
 800086e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000870:	230c      	movs	r3, #12
 8000872:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800087c:	2300      	movs	r3, #0
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000880:	2300      	movs	r3, #0
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800088a:	2300      	movs	r3, #0
 800088c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4618      	mov	r0, r3
 800089c:	f006 f88a 	bl	80069b4 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80008a6:	f000 fca1 	bl	80011ec <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	37a8      	adds	r7, #168	; 0xa8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_ADC1_Init+0x98>)
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <MX_ADC1_Init+0x9c>)
 80008d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_ADC1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_ADC1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ADC1_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_ADC1_Init+0x98>)
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_ADC1_Init+0xa0>)
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_ADC1_Init+0x98>)
 8000908:	2201      	movs	r2, #1
 800090a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_ADC1_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_ADC1_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_ADC1_Init+0x98>)
 800091c:	f002 fac6 	bl	8002eac <HAL_ADC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 fc61 	bl	80011ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800092a:	230a      	movs	r3, #10
 800092c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_ADC1_Init+0x98>)
 800093c:	f002 fafa 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000946:	f000 fc51 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200002fc 	.word	0x200002fc
 8000958:	40012000 	.word	0x40012000
 800095c:	0f000001 	.word	0x0f000001

08000960 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_DAC_Init+0x4c>)
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_DAC_Init+0x50>)
 8000972:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_DAC_Init+0x4c>)
 8000976:	f002 fe1c 	bl	80035b2 <HAL_DAC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000980:	f000 fc34 	bl	80011ec <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_DAC_Init+0x4c>)
 8000994:	f002 fe2f 	bl	80035f6 <HAL_DAC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800099e:	f000 fc25 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000344 	.word	0x20000344
 80009b0:	40007400 	.word	0x40007400

080009b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <MX_DFSDM1_Init+0x6c>)
 80009bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_DFSDM1_Init+0x68>)
 8000a08:	f002 fe42 	bl	8003690 <HAL_DFSDM_ChannelInit>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a12:	f000 fbeb 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000164 	.word	0x20000164
 8000a20:	40016020 	.word	0x40016020

08000a24 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a2a:	4a30      	ldr	r2, [pc, #192]	; (8000aec <MX_DFSDM2_Init+0xc8>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000a76:	481c      	ldr	r0, [pc, #112]	; (8000ae8 <MX_DFSDM2_Init+0xc4>)
 8000a78:	f002 fe0a 	bl	8003690 <HAL_DFSDM_ChannelInit>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000a82:	f000 fbb3 	bl	80011ec <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000a88:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <MX_DFSDM2_Init+0xd0>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_DFSDM2_Init+0xcc>)
 8000ad6:	f002 fddb 	bl	8003690 <HAL_DFSDM_ChannelInit>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000ae0:	f000 fb84 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200002b8 	.word	0x200002b8
 8000aec:	40016420 	.word	0x40016420
 8000af0:	200001f0 	.word	0x200001f0
 8000af4:	400164e0 	.word	0x400164e0

08000af8 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <MX_FMPI2C1_Init+0x64>)
 8000b00:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b04:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <MX_FMPI2C1_Init+0x68>)
 8000b06:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b34:	f002 ff22 	bl	800397c <HAL_FMPI2C_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000b3e:	f000 fb55 	bl	80011ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_FMPI2C1_Init+0x60>)
 8000b46:	f002 ffa8 	bl	8003a9a <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000b50:	f000 fb4c 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000358 	.word	0x20000358
 8000b5c:	40006000 	.word	0x40006000
 8000b60:	00303d5b 	.word	0x00303d5b

08000b64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_I2C2_Init+0x54>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b70:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_I2C2_Init+0x58>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_I2C2_Init+0x50>)
 8000ba2:	f004 fe9d 	bl	80058e0 <HAL_I2C_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bac:	f000 fb1e 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000019c 	.word	0x2000019c
 8000bb8:	40005800 	.word	0x40005800
 8000bbc:	000186a0 	.word	0x000186a0

08000bc0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <MX_I2S2_Init+0x58>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000be8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bec:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_I2S2_Init+0x54>)
 8000c02:	f004 ffa5 	bl	8005b50 <HAL_I2S_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000c0c:	f000 faee 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200004b8 	.word	0x200004b8
 8000c18:	40003800 	.word	0x40003800

08000c1c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c22:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <MX_QUADSPI_Init+0x54>)
 8000c24:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c28:	22ff      	movs	r2, #255	; 0xff
 8000c2a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_QUADSPI_Init+0x50>)
 8000c58:	f005 fc1e 	bl	8006498 <HAL_QSPI_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 fac3 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000500 	.word	0x20000500
 8000c70:	a0001000 	.word	0xa0001000

08000c74 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MX_SDIO_SD_Init+0x5c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000ca2:	480a      	ldr	r0, [pc, #40]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000ca4:	f006 fca4 	bl	80075f0 <HAL_SD_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000cae:	f000 fa9d 	bl	80011ec <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000cb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_SDIO_SD_Init+0x58>)
 8000cb8:	f006 fece 	bl	8007a58 <HAL_SD_ConfigWideBusOperation>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f000 fa93 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200003f4 	.word	0x200003f4
 8000cd0:	40012c00 	.word	0x40012c00

08000cd4 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_UART10_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce4:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_UART10_Init+0x4c>)
 8000d0c:	f007 fa20 	bl	8008150 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 fa69 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000228 	.word	0x20000228
 8000d24:	40011c00 	.word	0x40011c00

08000d28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_USART6_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART6_UART_Init+0x4c>)
 8000d60:	f007 f9f6 	bl	8008150 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f000 fa3f 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000478 	.word	0x20000478
 8000d78:	40011400 	.word	0x40011400

08000d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	; 0x38
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
 8000d96:	4bb3      	ldr	r3, [pc, #716]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4ab2      	ldr	r2, [pc, #712]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4bb0      	ldr	r3, [pc, #704]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	4bac      	ldr	r3, [pc, #688]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4aab      	ldr	r2, [pc, #684]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4ba9      	ldr	r3, [pc, #676]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	4ba5      	ldr	r3, [pc, #660]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4aa4      	ldr	r2, [pc, #656]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4ba2      	ldr	r3, [pc, #648]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	4b9e      	ldr	r3, [pc, #632]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a9d      	ldr	r2, [pc, #628]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b9b      	ldr	r3, [pc, #620]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b97      	ldr	r3, [pc, #604]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a96      	ldr	r2, [pc, #600]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b94      	ldr	r3, [pc, #592]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b90      	ldr	r3, [pc, #576]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a8f      	ldr	r2, [pc, #572]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b8d      	ldr	r3, [pc, #564]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b89      	ldr	r3, [pc, #548]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a88      	ldr	r2, [pc, #544]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b86      	ldr	r3, [pc, #536]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b82      	ldr	r3, [pc, #520]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a81      	ldr	r2, [pc, #516]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b7f      	ldr	r3, [pc, #508]	; (8001064 <MX_GPIO_Init+0x2e8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2138      	movs	r1, #56	; 0x38
 8000e76:	487c      	ldr	r0, [pc, #496]	; (8001068 <MX_GPIO_Init+0x2ec>)
 8000e78:	f003 f804 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2120      	movs	r1, #32
 8000e80:	487a      	ldr	r0, [pc, #488]	; (800106c <MX_GPIO_Init+0x2f0>)
 8000e82:	f002 ffff 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000e8c:	4878      	ldr	r0, [pc, #480]	; (8001070 <MX_GPIO_Init+0x2f4>)
 8000e8e:	f002 fff9 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	4876      	ldr	r0, [pc, #472]	; (8001074 <MX_GPIO_Init+0x2f8>)
 8000e9a:	f002 fff3 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000e9e:	2338      	movs	r3, #56	; 0x38
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	486c      	ldr	r0, [pc, #432]	; (8001068 <MX_GPIO_Init+0x2ec>)
 8000eb6:	f002 fe3b 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4864      	ldr	r0, [pc, #400]	; (8001068 <MX_GPIO_Init+0x2ec>)
 8000ed6:	f002 fe2b 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 SD_Detect_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|SD_Detect_Pin;
 8000eda:	f44f 634c 	mov.w	r3, #3264	; 0xcc0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	4b65      	ldr	r3, [pc, #404]	; (8001078 <MX_GPIO_Init+0x2fc>)
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4863      	ldr	r0, [pc, #396]	; (800107c <MX_GPIO_Init+0x300>)
 8000ef0:	f002 fe1e 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <MX_GPIO_Init+0x2fc>)
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4859      	ldr	r0, [pc, #356]	; (800106c <MX_GPIO_Init+0x2f0>)
 8000f08:	f002 fe12 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f10:	4b59      	ldr	r3, [pc, #356]	; (8001078 <MX_GPIO_Init+0x2fc>)
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4858      	ldr	r0, [pc, #352]	; (8001080 <MX_GPIO_Init+0x304>)
 8000f20:	f002 fe06 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000f24:	2320      	movs	r3, #32
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	484c      	ldr	r0, [pc, #304]	; (800106c <MX_GPIO_Init+0x2f0>)
 8000f3c:	f002 fdf8 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f40:	2301      	movs	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f50:	2302      	movs	r3, #2
 8000f52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4845      	ldr	r0, [pc, #276]	; (8001070 <MX_GPIO_Init+0x2f4>)
 8000f5c:	f002 fde8 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f72:	2307      	movs	r3, #7
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	483c      	ldr	r0, [pc, #240]	; (8001070 <MX_GPIO_Init+0x2f4>)
 8000f7e:	f002 fdd7 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000f82:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4835      	ldr	r0, [pc, #212]	; (8001070 <MX_GPIO_Init+0x2f4>)
 8000f9c:	f002 fdc8 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482e      	ldr	r0, [pc, #184]	; (8001074 <MX_GPIO_Init+0x2f8>)
 8000fba:	f002 fdb9 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4829      	ldr	r0, [pc, #164]	; (8001080 <MX_GPIO_Init+0x304>)
 8000fdc:	f002 fda8 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 CODEC_INT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CODEC_INT_Pin;
 8000fe0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_GPIO_Init+0x2fc>)
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481f      	ldr	r0, [pc, #124]	; (8001074 <MX_GPIO_Init+0x2f8>)
 8000ff6:	f002 fd9b 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000ffa:	2330      	movs	r3, #48	; 0x30
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800100a:	2306      	movs	r3, #6
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4816      	ldr	r0, [pc, #88]	; (8001070 <MX_GPIO_Init+0x2f4>)
 8001016:	f002 fd8b 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800101a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800102c:	2302      	movs	r3, #2
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <MX_GPIO_Init+0x2f4>)
 8001038:	f002 fd7a 	bl	8003b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	2017      	movs	r0, #23
 8001042:	f002 fa80 	bl	8003546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001046:	2017      	movs	r0, #23
 8001048:	f002 fa99 	bl	800357e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	2028      	movs	r0, #40	; 0x28
 8001052:	f002 fa78 	bl	8003546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001056:	2028      	movs	r0, #40	; 0x28
 8001058:	f002 fa91 	bl	800357e <HAL_NVIC_EnableIRQ>

}
 800105c:	bf00      	nop
 800105e:	3738      	adds	r7, #56	; 0x38
 8001060:	e010      	b.n	8001084 <MX_GPIO_Init+0x308>
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800
 8001068:	40021000 	.word	0x40021000
 800106c:	40020800 	.word	0x40020800
 8001070:	40020400 	.word	0x40020400
 8001074:	40021800 	.word	0x40021800
 8001078:	10110000 	.word	0x10110000
 800107c:	40021400 	.word	0x40021400
 8001080:	40020000 	.word	0x40020000
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010a8:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010aa:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <MX_FSMC_Init+0x15c>)
 80010ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010b4:	4b4a      	ldr	r3, [pc, #296]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010ba:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010c0:	4b47      	ldr	r3, [pc, #284]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010c2:	2210      	movs	r2, #16
 80010c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80010c6:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010d2:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010e0:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010ec:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010f2:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <MX_FSMC_Init+0x158>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_FSMC_Init+0x158>)
 8001100:	2200      	movs	r2, #0
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <MX_FSMC_Init+0x158>)
 8001106:	2200      	movs	r2, #0
 8001108:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800110e:	230f      	movs	r3, #15
 8001110:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001116:	230f      	movs	r3, #15
 8001118:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800111a:	2310      	movs	r3, #16
 800111c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800111e:	2311      	movs	r3, #17
 8001120:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <MX_FSMC_Init+0x158>)
 800112e:	f006 ffcb 	bl	80080c8 <HAL_SRAM_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001138:	f000 f858 	bl	80011ec <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800113c:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_FSMC_Init+0x160>)
 800113e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001142:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001146:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <MX_FSMC_Init+0x15c>)
 8001148:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_FSMC_Init+0x160>)
 800114c:	2204      	movs	r2, #4
 800114e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_FSMC_Init+0x160>)
 800115e:	2210      	movs	r2, #16
 8001160:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_FSMC_Init+0x160>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001176:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_FSMC_Init+0x160>)
 800117e:	2200      	movs	r2, #0
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_FSMC_Init+0x160>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_FSMC_Init+0x160>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_FSMC_Init+0x160>)
 800119c:	2200      	movs	r2, #0
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_FSMC_Init+0x160>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011a6:	230f      	movs	r3, #15
 80011a8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011aa:	230f      	movs	r3, #15
 80011ac:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011ae:	23ff      	movs	r3, #255	; 0xff
 80011b0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011b2:	230f      	movs	r3, #15
 80011b4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011b6:	2310      	movs	r3, #16
 80011b8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011ba:	2311      	movs	r3, #17
 80011bc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_FSMC_Init+0x160>)
 80011ca:	f006 ff7d 	bl	80080c8 <HAL_SRAM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 80011d4:	f000 f80a 	bl	80011ec <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000268 	.word	0x20000268
 80011e4:	a0000104 	.word	0xa0000104
 80011e8:	200003a4 	.word	0x200003a4

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_MspInit+0x4c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_MspInit+0x4c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a31      	ldr	r2, [pc, #196]	; (8001330 <HAL_ADC_MspInit+0xe4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d15b      	bne.n	8001326 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80012de:	2311      	movs	r3, #17
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <HAL_ADC_MspInit+0xec>)
 80012f2:	f002 fc1d 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80012f6:	2326      	movs	r3, #38	; 0x26
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_ADC_MspInit+0xf0>)
 800130a:	f002 fc11 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800130e:	2302      	movs	r3, #2
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <HAL_ADC_MspInit+0xf4>)
 8001322:	f002 fc05 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_DAC_MspInit+0x7c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d127      	bne.n	80013b6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_DAC_MspInit+0x80>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_DAC_MspInit+0x80>)
 8001370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_DAC_MspInit+0x80>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_DAC_MspInit+0x80>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_DAC_MspInit+0x80>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_DAC_MspInit+0x80>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_DAC_MspInit+0x84>)
 80013b2:	f002 fbbd 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40007400 	.word	0x40007400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a77      	ldr	r2, [pc, #476]	; (80015c8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00e      	beq.n	800140c <HAL_DFSDM_ChannelMspInit+0x40>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a76      	ldr	r2, [pc, #472]	; (80015cc <HAL_DFSDM_ChannelMspInit+0x200>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d009      	beq.n	800140c <HAL_DFSDM_ChannelMspInit+0x40>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a74      	ldr	r2, [pc, #464]	; (80015d0 <HAL_DFSDM_ChannelMspInit+0x204>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d004      	beq.n	800140c <HAL_DFSDM_ChannelMspInit+0x40>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a73      	ldr	r2, [pc, #460]	; (80015d4 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d154      	bne.n	80014b6 <HAL_DFSDM_ChannelMspInit+0xea>
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d150      	bne.n	80014b6 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001422:	6453      	str	r3, [r2, #68]	; 0x44
 8001424:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a68      	ldr	r2, [pc, #416]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	4b62      	ldr	r3, [pc, #392]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a61      	ldr	r2, [pc, #388]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800147a:	2306      	movs	r3, #6
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4856      	ldr	r0, [pc, #344]	; (80015e0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001486:	f002 fb53 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800149a:	2306      	movs	r3, #6
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	484f      	ldr	r0, [pc, #316]	; (80015e4 <HAL_DFSDM_ChannelMspInit+0x218>)
 80014a6:	f002 fb43 	bl	8003b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014aa:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a49      	ldr	r2, [pc, #292]	; (80015d8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80014b2:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80014b4:	e084      	b.n	80015c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d07f      	beq.n	80015c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a41      	ldr	r2, [pc, #260]	; (80015cc <HAL_DFSDM_ChannelMspInit+0x200>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d07a      	beq.n	80015c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <HAL_DFSDM_ChannelMspInit+0x204>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d075      	beq.n	80015c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3e      	ldr	r2, [pc, #248]	; (80015d4 <HAL_DFSDM_ChannelMspInit+0x208>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d070      	beq.n	80015c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014de:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d16c      	bne.n	80015c0 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a3b      	ldr	r2, [pc, #236]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 80014f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a34      	ldr	r2, [pc, #208]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a2d      	ldr	r2, [pc, #180]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x210>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001566:	2307      	movs	r3, #7
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001572:	f002 fadd 	bl	8003b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001576:	2304      	movs	r3, #4
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001586:	2303      	movs	r3, #3
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4814      	ldr	r0, [pc, #80]	; (80015e4 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001592:	f002 facd 	bl	8003b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80015a6:	2306      	movs	r3, #6
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x220>)
 80015b2:	f002 fabd 	bl	8003b30 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	3738      	adds	r7, #56	; 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40016000 	.word	0x40016000
 80015cc:	40016020 	.word	0x40016020
 80015d0:	40016040 	.word	0x40016040
 80015d4:	40016060 	.word	0x40016060
 80015d8:	20000104 	.word	0x20000104
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	20000108 	.word	0x20000108
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <HAL_FMPI2C_MspInit+0x84>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d12b      	bne.n	800166a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_FMPI2C_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_FMPI2C_MspInit+0x88>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_FMPI2C_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800162e:	23c0      	movs	r3, #192	; 0xc0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001632:	2312      	movs	r3, #18
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800163e:	2304      	movs	r3, #4
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <HAL_FMPI2C_MspInit+0x8c>)
 800164a:	f002 fa71 	bl	8003b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_FMPI2C_MspInit+0x88>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_FMPI2C_MspInit+0x88>)
 8001658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_FMPI2C_MspInit+0x88>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	; 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40006000 	.word	0x40006000
 8001678:	40023800 	.word	0x40023800
 800167c:	40020800 	.word	0x40020800

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_I2C_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12c      	bne.n	80016fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d0:	2304      	movs	r3, #4
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	480c      	ldr	r0, [pc, #48]	; (800170c <HAL_I2C_MspInit+0x8c>)
 80016dc:	f002 fa28 	bl	8003b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005800 	.word	0x40005800
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_I2S_MspInit+0x15c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	f040 8097 	bne.w	8001862 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	4b4d      	ldr	r3, [pc, #308]	; (8001870 <HAL_I2S_MspInit+0x160>)
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_I2S_MspInit+0x160>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6413      	str	r3, [r2, #64]	; 0x40
 8001744:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <HAL_I2S_MspInit+0x160>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_I2S_MspInit+0x160>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_I2S_MspInit+0x160>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6313      	str	r3, [r2, #48]	; 0x30
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_I2S_MspInit+0x160>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_I2S_MspInit+0x160>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	4a3e      	ldr	r2, [pc, #248]	; (8001870 <HAL_I2S_MspInit+0x160>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
 800177c:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <HAL_I2S_MspInit+0x160>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_I2S_MspInit+0x160>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4a37      	ldr	r2, [pc, #220]	; (8001870 <HAL_I2S_MspInit+0x160>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6313      	str	r3, [r2, #48]	; 0x30
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <HAL_I2S_MspInit+0x160>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_I2S_MspInit+0x160>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_I2S_MspInit+0x160>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_I2S_MspInit+0x160>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80017c0:	2304      	movs	r3, #4
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80017d0:	2306      	movs	r3, #6
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4826      	ldr	r0, [pc, #152]	; (8001874 <HAL_I2S_MspInit+0x164>)
 80017dc:	f002 f9a8 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80017e0:	2308      	movs	r3, #8
 80017e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017f0:	2305      	movs	r3, #5
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	481e      	ldr	r0, [pc, #120]	; (8001874 <HAL_I2S_MspInit+0x164>)
 80017fc:	f002 f998 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001800:	2308      	movs	r3, #8
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001810:	2305      	movs	r3, #5
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4817      	ldr	r0, [pc, #92]	; (8001878 <HAL_I2S_MspInit+0x168>)
 800181c:	f002 f988 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001820:	2308      	movs	r3, #8
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001830:	2305      	movs	r3, #5
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	4619      	mov	r1, r3
 800183a:	4810      	ldr	r0, [pc, #64]	; (800187c <HAL_I2S_MspInit+0x16c>)
 800183c:	f002 f978 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001852:	2305      	movs	r3, #5
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <HAL_I2S_MspInit+0x170>)
 800185e:	f002 f967 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3730      	adds	r7, #48	; 0x30
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40003800 	.word	0x40003800
 8001870:	40023800 	.word	0x40023800
 8001874:	40020800 	.word	0x40020800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40020400 	.word	0x40020400

08001884 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_QSPI_MspInit+0x178>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f040 80a6 	bne.w	80019f4 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	4b54      	ldr	r3, [pc, #336]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	4a53      	ldr	r2, [pc, #332]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	6393      	str	r3, [r2, #56]	; 0x38
 80018b8:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018ea:	f043 0320 	orr.w	r3, r3, #32
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a3e      	ldr	r2, [pc, #248]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a37      	ldr	r2, [pc, #220]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6313      	str	r3, [r2, #48]	; 0x30
 8001928:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 800193e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001942:	6313      	str	r3, [r2, #48]	; 0x30
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_QSPI_MspInit+0x17c>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001950:	2304      	movs	r3, #4
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001960:	2309      	movs	r3, #9
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4826      	ldr	r0, [pc, #152]	; (8001a04 <HAL_QSPI_MspInit+0x180>)
 800196c:	f002 f8e0 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001970:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001982:	230a      	movs	r3, #10
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	481e      	ldr	r0, [pc, #120]	; (8001a08 <HAL_QSPI_MspInit+0x184>)
 800198e:	f002 f8cf 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001992:	2304      	movs	r3, #4
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80019a2:	2309      	movs	r3, #9
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4817      	ldr	r0, [pc, #92]	; (8001a0c <HAL_QSPI_MspInit+0x188>)
 80019ae:	f002 f8bf 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80019b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80019c4:	2309      	movs	r3, #9
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <HAL_QSPI_MspInit+0x18c>)
 80019d0:	f002 f8ae 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80019d4:	2340      	movs	r3, #64	; 0x40
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019e4:	230a      	movs	r3, #10
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <HAL_QSPI_MspInit+0x190>)
 80019f0:	f002 f89e 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3738      	adds	r7, #56	; 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	a0001000 	.word	0xa0001000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021800 	.word	0x40021800

08001a18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <HAL_SD_MspInit+0xc0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d14a      	bne.n	8001ad0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a26      	ldr	r2, [pc, #152]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_SD_MspInit+0xc4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <HAL_SD_MspInit+0xc8>)
 8001aaa:	f002 f841 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001aae:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ab2:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <HAL_SD_MspInit+0xcc>)
 8001acc:	f002 f830 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020800 	.word	0x40020800

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	; 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a37      	ldr	r2, [pc, #220]	; (8001be4 <HAL_UART_MspInit+0xfc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12d      	bne.n	8001b66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a35      	ldr	r2, [pc, #212]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a2e      	ldr	r2, [pc, #184]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001b42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001b54:	230b      	movs	r3, #11
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4823      	ldr	r0, [pc, #140]	; (8001bec <HAL_UART_MspInit+0x104>)
 8001b60:	f001 ffe6 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b64:	e039      	b.n	8001bda <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_UART_MspInit+0x108>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d134      	bne.n	8001bda <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_UART_MspInit+0x100>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001ba8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <HAL_UART_MspInit+0x104>)
 8001bc6:	f001 ffb3 	bl	8003b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2047      	movs	r0, #71	; 0x47
 8001bd0:	f001 fcb9 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bd4:	2047      	movs	r0, #71	; 0x47
 8001bd6:	f001 fcd2 	bl	800357e <HAL_NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40011c00 	.word	0x40011c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40011400 	.word	0x40011400

08001bf4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001c08:	4b2c      	ldr	r3, [pc, #176]	; (8001cbc <HAL_FSMC_MspInit+0xc8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d151      	bne.n	8001cb4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_FSMC_MspInit+0xc8>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_FSMC_MspInit+0xcc>)
 8001c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <HAL_FSMC_MspInit+0xcc>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6393      	str	r3, [r2, #56]	; 0x38
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_FSMC_MspInit+0xcc>)
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001c32:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001c36:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c44:	230c      	movs	r3, #12
 8001c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <HAL_FSMC_MspInit+0xd0>)
 8001c4e:	f001 ff6f 	bl	8003b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001c52:	f240 433f 	movw	r3, #1087	; 0x43f
 8001c56:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c64:	230c      	movs	r3, #12
 8001c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4816      	ldr	r0, [pc, #88]	; (8001cc8 <HAL_FSMC_MspInit+0xd4>)
 8001c6e:	f001 ff5f 	bl	8003b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001c72:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c76:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c84:	230c      	movs	r3, #12
 8001c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480f      	ldr	r0, [pc, #60]	; (8001ccc <HAL_FSMC_MspInit+0xd8>)
 8001c8e:	f001 ff4f 	bl	8003b30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001c92:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001c96:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <HAL_FSMC_MspInit+0xdc>)
 8001cae:	f001 ff3f 	bl	8003b30 <HAL_GPIO_Init>
 8001cb2:	e000      	b.n	8001cb6 <HAL_FSMC_MspInit+0xc2>
    return;
 8001cb4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000010c 	.word	0x2000010c
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40020c00 	.word	0x40020c00

08001cd4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001cdc:	f7ff ff8a 	bl	8001bf4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3c:	f001 f874 	bl	8002e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7))
 8001d48:	2180      	movs	r1, #128	; 0x80
 8001d4a:	480e      	ldr	r0, [pc, #56]	; (8001d84 <EXTI9_5_IRQHandler+0x40>)
 8001d4c:	f002 f882 	bl	8003e54 <HAL_GPIO_ReadPin>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <EXTI9_5_IRQHandler+0x1a>
	{
		move = 1;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <EXTI9_5_IRQHandler+0x44>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e009      	b.n	8001d72 <EXTI9_5_IRQHandler+0x2e>
	}
	else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_6))
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <EXTI9_5_IRQHandler+0x40>)
 8001d62:	f002 f877 	bl	8003e54 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <EXTI9_5_IRQHandler+0x2e>
	{
		move = 2;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <EXTI9_5_IRQHandler+0x44>)
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d72:	2040      	movs	r0, #64	; 0x40
 8001d74:	f002 f8a0 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d78:	2080      	movs	r0, #128	; 0x80
 8001d7a:	f002 f89d 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40021400 	.word	0x40021400
 8001d88:	20000100 	.word	0x20000100

08001d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10))
 8001d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d94:	4813      	ldr	r0, [pc, #76]	; (8001de4 <EXTI15_10_IRQHandler+0x58>)
 8001d96:	f002 f85d 	bl	8003e54 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <EXTI15_10_IRQHandler+0x1c>
	{
		move = 3;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <EXTI15_10_IRQHandler+0x5c>)
 8001da2:	2203      	movs	r2, #3
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e00a      	b.n	8001dbe <EXTI15_10_IRQHandler+0x32>
	}
	else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_13))
 8001da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dac:	480f      	ldr	r0, [pc, #60]	; (8001dec <EXTI15_10_IRQHandler+0x60>)
 8001dae:	f002 f851 	bl	8003e54 <HAL_GPIO_ReadPin>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <EXTI15_10_IRQHandler+0x32>
	{
		move = 4;
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <EXTI15_10_IRQHandler+0x5c>)
 8001dba:	2204      	movs	r2, #4
 8001dbc:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001dbe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dc2:	f002 f879 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001dc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001dca:	f002 f875 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001dce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dd2:	f002 f871 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001dd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dda:	f002 f86d 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021400 	.word	0x40021400
 8001de8:	20000100 	.word	0x20000100
 8001dec:	40021800 	.word	0x40021800

08001df0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <OTG_FS_IRQHandler+0x10>)
 8001df6:	f002 fb11 	bl	800441c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000934 	.word	0x20000934

08001e04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <USART6_IRQHandler+0x10>)
 8001e0a:	f006 fa43 	bl	8008294 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000478 	.word	0x20000478

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f00a fec6 	bl	800cbd8 <__errno>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	230c      	movs	r3, #12
 8001e50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20050000 	.word	0x20050000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000110 	.word	0x20000110
 8001e80:	20000c00 	.word	0x20000c00

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <SystemInit+0x28>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <SystemInit+0x28>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SystemInit+0x28>)
 8001e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eb6:	e003      	b.n	8001ec0 <LoopCopyDataInit>

08001eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ebe:	3104      	adds	r1, #4

08001ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ec8:	d3f6      	bcc.n	8001eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ecc:	e002      	b.n	8001ed4 <LoopFillZerobss>

08001ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed0:	f842 3b04 	str.w	r3, [r2], #4

08001ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ed8:	d3f9      	bcc.n	8001ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eda:	f7ff ffd3 	bl	8001e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f00a fe81 	bl	800cbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7fe fbd1 	bl	8000688 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ee8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001eec:	0800ed40 	.word	0x0800ed40
  ldr  r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef4:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 8001ef8:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 8001efc:	20000bfc 	.word	0x20000bfc

08001f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>

08001f02 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f08:	f000 fd18 	bl	800293c <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2010      	movs	r0, #16
 8001f12:	f000 f9e4 	bl	80022de <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001f16:	200a      	movs	r0, #10
 8001f18:	f000 fd37 	bl	800298a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2001      	movs	r0, #1
 8001f22:	f000 f9dc 	bl	80022de <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001f26:	20c8      	movs	r0, #200	; 0xc8
 8001f28:	f000 fd2f 	bl	800298a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2011      	movs	r0, #17
 8001f32:	f000 f9d4 	bl	80022de <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001f36:	2078      	movs	r0, #120	; 0x78
 8001f38:	f000 fd27 	bl	800298a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001f40:	463b      	mov	r3, r7
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	2036      	movs	r0, #54	; 0x36
 8001f48:	f000 f9c9 	bl	80022de <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001f50:	463b      	mov	r3, r7
 8001f52:	2201      	movs	r2, #1
 8001f54:	4619      	mov	r1, r3
 8001f56:	203a      	movs	r0, #58	; 0x3a
 8001f58:	f000 f9c1 	bl	80022de <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2021      	movs	r0, #33	; 0x21
 8001f62:	f000 f9bc 	bl	80022de <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001f66:	2300      	movs	r3, #0
 8001f68:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001f72:	23ef      	movs	r3, #239	; 0xef
 8001f74:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001f76:	463b      	mov	r3, r7
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	202a      	movs	r0, #42	; 0x2a
 8001f7e:	f000 f9ae 	bl	80022de <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001f86:	2300      	movs	r3, #0
 8001f88:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001f8e:	23ef      	movs	r3, #239	; 0xef
 8001f90:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001f92:	463b      	mov	r3, r7
 8001f94:	2204      	movs	r2, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	202b      	movs	r0, #43	; 0x2b
 8001f9a:	f000 f9a0 	bl	80022de <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001fa2:	230c      	movs	r3, #12
 8001fa4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001faa:	2333      	movs	r3, #51	; 0x33
 8001fac:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001fae:	2333      	movs	r3, #51	; 0x33
 8001fb0:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	20b2      	movs	r0, #178	; 0xb2
 8001fba:	f000 f990 	bl	80022de <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001fbe:	2335      	movs	r3, #53	; 0x35
 8001fc0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	20b7      	movs	r0, #183	; 0xb7
 8001fca:	f000 f988 	bl	80022de <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001fce:	231f      	movs	r3, #31
 8001fd0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	20bb      	movs	r0, #187	; 0xbb
 8001fda:	f000 f980 	bl	80022de <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001fde:	232c      	movs	r3, #44	; 0x2c
 8001fe0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	20c0      	movs	r0, #192	; 0xc0
 8001fea:	f000 f978 	bl	80022de <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001ff2:	23c3      	movs	r3, #195	; 0xc3
 8001ff4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	20c2      	movs	r0, #194	; 0xc2
 8001ffe:	f000 f96e 	bl	80022de <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002002:	2320      	movs	r3, #32
 8002004:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002006:	463b      	mov	r3, r7
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	20c4      	movs	r0, #196	; 0xc4
 800200e:	f000 f966 	bl	80022de <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002012:	230f      	movs	r3, #15
 8002014:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002016:	463b      	mov	r3, r7
 8002018:	2201      	movs	r2, #1
 800201a:	4619      	mov	r1, r3
 800201c:	20c6      	movs	r0, #198	; 0xc6
 800201e:	f000 f95e 	bl	80022de <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002022:	23a4      	movs	r3, #164	; 0xa4
 8002024:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002026:	23a1      	movs	r3, #161	; 0xa1
 8002028:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800202a:	463b      	mov	r3, r7
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	20d0      	movs	r0, #208	; 0xd0
 8002032:	f000 f954 	bl	80022de <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002036:	23d0      	movs	r3, #208	; 0xd0
 8002038:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800203a:	2308      	movs	r3, #8
 800203c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800203e:	2311      	movs	r3, #17
 8002040:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002042:	2308      	movs	r3, #8
 8002044:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002046:	230c      	movs	r3, #12
 8002048:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800204a:	2315      	movs	r3, #21
 800204c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800204e:	2339      	movs	r3, #57	; 0x39
 8002050:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002052:	2333      	movs	r3, #51	; 0x33
 8002054:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002056:	2350      	movs	r3, #80	; 0x50
 8002058:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800205a:	2336      	movs	r3, #54	; 0x36
 800205c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800205e:	2313      	movs	r3, #19
 8002060:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002062:	2314      	movs	r3, #20
 8002064:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002066:	2329      	movs	r3, #41	; 0x29
 8002068:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800206a:	232d      	movs	r3, #45	; 0x2d
 800206c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800206e:	463b      	mov	r3, r7
 8002070:	220e      	movs	r2, #14
 8002072:	4619      	mov	r1, r3
 8002074:	20e0      	movs	r0, #224	; 0xe0
 8002076:	f000 f932 	bl	80022de <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800207a:	23d0      	movs	r3, #208	; 0xd0
 800207c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800207e:	2308      	movs	r3, #8
 8002080:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8002082:	2310      	movs	r3, #16
 8002084:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002086:	2308      	movs	r3, #8
 8002088:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800208a:	2306      	movs	r3, #6
 800208c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800208e:	2306      	movs	r3, #6
 8002090:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002092:	2339      	movs	r3, #57	; 0x39
 8002094:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002096:	2344      	movs	r3, #68	; 0x44
 8002098:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800209a:	2351      	movs	r3, #81	; 0x51
 800209c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800209e:	230b      	movs	r3, #11
 80020a0:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80020a2:	2316      	movs	r3, #22
 80020a4:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80020a6:	2314      	movs	r3, #20
 80020a8:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 80020aa:	232f      	movs	r3, #47	; 0x2f
 80020ac:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 80020ae:	2331      	movs	r3, #49	; 0x31
 80020b0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80020b2:	463b      	mov	r3, r7
 80020b4:	220e      	movs	r2, #14
 80020b6:	4619      	mov	r1, r3
 80020b8:	20e1      	movs	r0, #225	; 0xe1
 80020ba:	f000 f910 	bl	80022de <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80020be:	f000 f847 	bl	8002150 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80020c2:	2300      	movs	r3, #0
 80020c4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80020c6:	463b      	mov	r3, r7
 80020c8:	2201      	movs	r2, #1
 80020ca:	4619      	mov	r1, r3
 80020cc:	2035      	movs	r0, #53	; 0x35
 80020ce:	f000 f906 	bl	80022de <ST7789H2_WriteReg>

}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80020e8:	2300      	movs	r3, #0
 80020ea:	723b      	strb	r3, [r7, #8]
 80020ec:	e025      	b.n	800213a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d120      	bne.n	8002136 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80020f4:	2300      	movs	r3, #0
 80020f6:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80020f8:	2300      	movs	r3, #0
 80020fa:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80020fc:	2301      	movs	r3, #1
 80020fe:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002100:	23f0      	movs	r3, #240	; 0xf0
 8002102:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002104:	2300      	movs	r3, #0
 8002106:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002108:	2300      	movs	r3, #0
 800210a:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	2206      	movs	r2, #6
 8002112:	4619      	mov	r1, r3
 8002114:	2033      	movs	r0, #51	; 0x33
 8002116:	f000 f8e2 	bl	80022de <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800211a:	2300      	movs	r3, #0
 800211c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800211e:	2350      	movs	r3, #80	; 0x50
 8002120:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002122:	f107 0308 	add.w	r3, r7, #8
 8002126:	2202      	movs	r2, #2
 8002128:	4619      	mov	r1, r3
 800212a:	2037      	movs	r0, #55	; 0x37
 800212c:	f000 f8d7 	bl	80022de <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002130:	23c0      	movs	r3, #192	; 0xc0
 8002132:	723b      	strb	r3, [r7, #8]
 8002134:	e001      	b.n	800213a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002136:	2360      	movs	r3, #96	; 0x60
 8002138:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	2201      	movs	r2, #1
 8002140:	4619      	mov	r1, r3
 8002142:	2036      	movs	r0, #54	; 0x36
 8002144:	f000 f8cb 	bl	80022de <ST7789H2_WriteReg>
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2029      	movs	r0, #41	; 0x29
 800215a:	f000 f8c0 	bl	80022de <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2011      	movs	r0, #17
 8002164:	f000 f8bb 	bl	80022de <ST7789H2_WriteReg>
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002172:	23fe      	movs	r3, #254	; 0xfe
 8002174:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	2201      	movs	r2, #1
 800217a:	4619      	mov	r1, r3
 800217c:	20bd      	movs	r0, #189	; 0xbd
 800217e:	f000 f8ae 	bl	80022de <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	2010      	movs	r0, #16
 8002188:	f000 f8a9 	bl	80022de <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800218c:	200a      	movs	r0, #10
 800218e:	f000 fbfc 	bl	800298a <LCD_IO_Delay>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800219e:	23f0      	movs	r3, #240	; 0xf0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 80021ae:	23f0      	movs	r3, #240	; 0xf0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80021be:	f000 fbbd 	bl	800293c <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80021c2:	2004      	movs	r0, #4
 80021c4:	f000 f8ad 	bl	8002322 <ST7789H2_ReadReg>
 80021c8:	4603      	mov	r3, r0
 80021ca:	b29b      	uxth	r3, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	4613      	mov	r3, r2
 80021de:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80021e0:	2300      	movs	r3, #0
 80021e2:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	3b11      	subs	r3, #17
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2204      	movs	r2, #4
 80021fe:	4619      	mov	r1, r3
 8002200:	202a      	movs	r0, #42	; 0x2a
 8002202:	f000 f86c 	bl	80022de <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002206:	2300      	movs	r3, #0
 8002208:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002210:	2300      	movs	r3, #0
 8002212:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3b11      	subs	r3, #17
 800221a:	b2db      	uxtb	r3, r3
 800221c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	2204      	movs	r2, #4
 8002224:	4619      	mov	r1, r3
 8002226:	202b      	movs	r0, #43	; 0x2b
 8002228:	f000 f859 	bl	80022de <ST7789H2_WriteReg>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
 800223e:	460b      	mov	r3, r1
 8002240:	80bb      	strh	r3, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002246:	88ba      	ldrh	r2, [r7, #4]
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ffbf 	bl	80021d0 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	202c      	movs	r0, #44	; 0x2c
 8002258:	f000 f841 	bl	80022de <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fb72 	bl	8002948 <LCD_IO_WriteData>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	80fb      	strh	r3, [r7, #6]
 8002278:	4613      	mov	r3, r2
 800227a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800227c:	88ba      	ldrh	r2, [r7, #4]
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffa4 	bl	80021d0 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002288:	88ba      	ldrh	r2, [r7, #4]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f9bd 	bl	800260e <ST7789H2_ReadPixel_rgb888>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	733a      	strb	r2, [r7, #12]
 800229a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800229e:	737a      	strb	r2, [r7, #13]
 80022a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80022a4:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80022a6:	7b3b      	ldrb	r3, [r7, #12]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 80022ac:	7b7b      	ldrb	r3, [r7, #13]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80022b2:	7bbb      	ldrb	r3, [r7, #14]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	02db      	lsls	r3, r3, #11
 80022be:	b29a      	uxth	r2, r3
 80022c0:	7dbb      	ldrb	r3, [r7, #22]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	015b      	lsls	r3, r3, #5
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	7d7b      	ldrb	r3, [r7, #21]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80022d4:	8a7b      	ldrh	r3, [r7, #18]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	6039      	str	r1, [r7, #0]
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fb36 	bl	8002962 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e00a      	b.n	8002312 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fb1e 	bl	8002948 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	429a      	cmp	r2, r3
 8002318:	d3f0      	bcc.n	80022fc <ST7789H2_WriteReg+0x1e>
  }
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fb17 	bl	8002962 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002334:	f000 fb22 	bl	800297c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002338:	f000 fb20 	bl	800297c <LCD_IO_ReadData>
 800233c:	4603      	mov	r3, r0
 800233e:	b2db      	uxtb	r3, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002348:	b490      	push	{r4, r7}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	461a      	mov	r2, r3
 8002356:	4623      	mov	r3, r4
 8002358:	80fb      	strh	r3, [r7, #6]
 800235a:	4603      	mov	r3, r0
 800235c:	80bb      	strh	r3, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	807b      	strh	r3, [r7, #2]
 8002362:	4613      	mov	r3, r2
 8002364:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	2bef      	cmp	r3, #239	; 0xef
 800236a:	d803      	bhi.n	8002374 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <ST7789H2_SetDisplayWindow+0x94>)
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	8013      	strh	r3, [r2, #0]
 8002372:	e002      	b.n	800237a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <ST7789H2_SetDisplayWindow+0x94>)
 8002376:	2200      	movs	r2, #0
 8002378:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800237a:	88bb      	ldrh	r3, [r7, #4]
 800237c:	2bef      	cmp	r3, #239	; 0xef
 800237e:	d803      	bhi.n	8002388 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002380:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <ST7789H2_SetDisplayWindow+0x98>)
 8002382:	88bb      	ldrh	r3, [r7, #4]
 8002384:	8013      	strh	r3, [r2, #0]
 8002386:	e002      	b.n	800238e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <ST7789H2_SetDisplayWindow+0x98>)
 800238a:	2200      	movs	r2, #0
 800238c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4413      	add	r3, r2
 8002394:	2bf0      	cmp	r3, #240	; 0xf0
 8002396:	dc08      	bgt.n	80023aa <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002398:	887a      	ldrh	r2, [r7, #2]
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	4413      	add	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <ST7789H2_SetDisplayWindow+0x9c>)
 80023a6:	801a      	strh	r2, [r3, #0]
 80023a8:	e002      	b.n	80023b0 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <ST7789H2_SetDisplayWindow+0x9c>)
 80023ac:	22ef      	movs	r2, #239	; 0xef
 80023ae:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80023b0:	883a      	ldrh	r2, [r7, #0]
 80023b2:	88bb      	ldrh	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	2bf0      	cmp	r3, #240	; 0xf0
 80023b8:	dc08      	bgt.n	80023cc <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80023ba:	883a      	ldrh	r2, [r7, #0]
 80023bc:	88bb      	ldrh	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <ST7789H2_SetDisplayWindow+0xa0>)
 80023c8:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80023ca:	e002      	b.n	80023d2 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <ST7789H2_SetDisplayWindow+0xa0>)
 80023ce:	22ef      	movs	r2, #239	; 0xef
 80023d0:	801a      	strh	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc90      	pop	{r4, r7}
 80023da:	4770      	bx	lr
 80023dc:	20000114 	.word	0x20000114
 80023e0:	20000116 	.word	0x20000116
 80023e4:	20000044 	.word	0x20000044
 80023e8:	20000046 	.word	0x20000046

080023ec <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4604      	mov	r4, r0
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	80fb      	strh	r3, [r7, #6]
 80023fe:	4603      	mov	r3, r0
 8002400:	80bb      	strh	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	807b      	strh	r3, [r7, #2]
 8002406:	4613      	mov	r3, r2
 8002408:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800240e:	887a      	ldrh	r2, [r7, #2]
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fedb 	bl	80021d0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	202c      	movs	r0, #44	; 0x2c
 8002420:	f7ff ff5d 	bl	80022de <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002424:	2300      	movs	r3, #0
 8002426:	81fb      	strh	r3, [r7, #14]
 8002428:	e006      	b.n	8002438 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fa8b 	bl	8002948 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	3301      	adds	r3, #1
 8002436:	81fb      	strh	r3, [r7, #14]
 8002438:	89fa      	ldrh	r2, [r7, #14]
 800243a:	883b      	ldrh	r3, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3f4      	bcc.n	800242a <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}

08002448 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	80fb      	strh	r3, [r7, #6]
 800245a:	4603      	mov	r3, r0
 800245c:	80bb      	strh	r3, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	807b      	strh	r3, [r7, #2]
 8002462:	4613      	mov	r3, r2
 8002464:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	88bb      	ldrh	r3, [r7, #4]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fead 	bl	80021d0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	202c      	movs	r0, #44	; 0x2c
 800247c:	f7ff ff2f 	bl	80022de <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002480:	2300      	movs	r3, #0
 8002482:	81fb      	strh	r3, [r7, #14]
 8002484:	e00b      	b.n	800249e <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	4413      	add	r3, r2
 800248c:	b299      	uxth	r1, r3
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	88bb      	ldrh	r3, [r7, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fece 	bl	8002234 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	3301      	adds	r3, #1
 800249c:	81fb      	strh	r3, [r7, #14]
 800249e:	89fa      	ldrh	r2, [r7, #14]
 80024a0:	883b      	ldrh	r3, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3ef      	bcc.n	8002486 <ST7789H2_DrawVLine+0x3e>
  }
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
	...

080024b0 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	603a      	str	r2, [r7, #0]
 80024ba:	80fb      	strh	r3, [r7, #6]
 80024bc:	460b      	mov	r3, r1
 80024be:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <ST7789H2_DrawBitmap+0xdc>)
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <ST7789H2_DrawBitmap+0xe0>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <ST7789H2_DrawBitmap+0xe4>)
 80024de:	881a      	ldrh	r2, [r3, #0]
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <ST7789H2_DrawBitmap+0xe8>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3302      	adds	r3, #2
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3304      	adds	r3, #4
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	461a      	mov	r2, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	330a      	adds	r3, #10
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	461a      	mov	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4413      	add	r3, r2
 8002534:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002536:	88ba      	ldrh	r2, [r7, #4]
 8002538:	89bb      	ldrh	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e01d      	b.n	800257c <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fe3f 	bl	80021d0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b299      	uxth	r1, r3
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	89fa      	ldrh	r2, [r7, #14]
 800256a:	88f8      	ldrh	r0, [r7, #6]
 800256c:	f000 f898 	bl	80026a0 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	3301      	adds	r3, #1
 8002574:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b01      	subs	r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8dd      	bhi.n	8002540 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002584:	bf00      	nop
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000044 	.word	0x20000044
 8002590:	20000114 	.word	0x20000114
 8002594:	20000046 	.word	0x20000046
 8002598:	20000116 	.word	0x20000116

0800259c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	80fb      	strh	r3, [r7, #6]
 80025ae:	4603      	mov	r3, r0
 80025b0:	80bb      	strh	r3, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	807b      	strh	r3, [r7, #2]
 80025b6:	4613      	mov	r3, r2
 80025b8:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e019      	b.n	80025f8 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fdff 	bl	80021d0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	b299      	uxth	r1, r3
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	4413      	add	r3, r2
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	88f8      	ldrh	r0, [r7, #6]
 80025e8:	f000 f85a 	bl	80026a0 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	88ba      	ldrh	r2, [r7, #4]
 80025fa:	883b      	ldrh	r3, [r7, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4293      	cmp	r3, r2
 8002604:	d3de      	bcc.n	80025c4 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}

0800260e <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	460a      	mov	r2, r1
 8002618:	80fb      	strh	r3, [r7, #6]
 800261a:	4613      	mov	r3, r2
 800261c:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800261e:	88ba      	ldrh	r2, [r7, #4]
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fdd3 	bl	80021d0 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	202e      	movs	r0, #46	; 0x2e
 8002630:	f7ff fe55 	bl	80022de <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002634:	f000 f9a2 	bl	800297c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002638:	f000 f9a0 	bl	800297c <LCD_IO_ReadData>
 800263c:	4603      	mov	r3, r0
 800263e:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002640:	f000 f99c 	bl	800297c <LCD_IO_ReadData>
 8002644:	4603      	mov	r3, r0
 8002646:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	121b      	asrs	r3, r3, #8
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002656:	8afb      	ldrh	r3, [r7, #22]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f023 0303 	bic.w	r3, r3, #3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002662:	8abb      	ldrh	r3, [r7, #20]
 8002664:	121b      	asrs	r3, r3, #8
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f023 0303 	bic.w	r3, r3, #3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	f107 020c 	add.w	r2, r7, #12
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	4611      	mov	r1, r2
 800267c:	8019      	strh	r1, [r3, #0]
 800267e:	3302      	adds	r3, #2
 8002680:	0c12      	lsrs	r2, r2, #16
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	2300      	movs	r3, #0
 8002686:	7c3a      	ldrb	r2, [r7, #16]
 8002688:	f362 0307 	bfi	r3, r2, #0, #8
 800268c:	7c7a      	ldrb	r2, [r7, #17]
 800268e:	f362 230f 	bfi	r3, r2, #8, #8
 8002692:	7cba      	ldrb	r2, [r7, #18]
 8002694:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	4603      	mov	r3, r0
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	460b      	mov	r3, r1
 80026ae:	81bb      	strh	r3, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	202c      	movs	r0, #44	; 0x2c
 80026c2:	f7ff fe0c 	bl	80022de <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e02a      	b.n	8002722 <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <ST7789H2_DrawRGBHLine+0x98>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d321      	bcc.n	800271c <ST7789H2_DrawRGBHLine+0x7c>
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <ST7789H2_DrawRGBHLine+0x9c>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	89ba      	ldrh	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d31c      	bcc.n	800271c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <ST7789H2_DrawRGBHLine+0xa0>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d816      	bhi.n	800271c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <ST7789H2_DrawRGBHLine+0xa4>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	89ba      	ldrh	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d811      	bhi.n	800271c <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80026f8:	897a      	ldrh	r2, [r7, #10]
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	4413      	add	r3, r2
 80026fe:	461a      	mov	r2, r3
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f919 	bl	8002948 <LCD_IO_WriteData>
      }      
      i++;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	3301      	adds	r3, #1
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	897a      	ldrh	r2, [r7, #10]
 8002724:	89fb      	ldrh	r3, [r7, #14]
 8002726:	4413      	add	r3, r2
 8002728:	461a      	mov	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4293      	cmp	r3, r2
 800272e:	d3cd      	bcc.n	80026cc <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000114 	.word	0x20000114
 800273c:	20000116 	.word	0x20000116
 8002740:	20000044 	.word	0x20000044
 8002744:	20000046 	.word	0x20000046

08002748 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	4a39      	ldr	r2, [pc, #228]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6393      	str	r3, [r2, #56]	; 0x38
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b33      	ldr	r3, [pc, #204]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a32      	ldr	r2, [pc, #200]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002774:	f043 0308 	orr.w	r3, r3, #8
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a2b      	ldr	r2, [pc, #172]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4a24      	ldr	r2, [pc, #144]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 80027ac:	f043 0320 	orr.w	r3, r3, #32
 80027b0:	6313      	str	r3, [r2, #48]	; 0x30
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f003 0320 	and.w	r3, r3, #32
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a1d      	ldr	r2, [pc, #116]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 80027c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <FMC_BANK3_MspInit+0xf4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80027e6:	230c      	movs	r3, #12
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80027ea:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80027ee:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	4812      	ldr	r0, [pc, #72]	; (8002840 <FMC_BANK3_MspInit+0xf8>)
 80027f8:	f001 f99a 	bl	8003b30 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80027fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002800:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	4619      	mov	r1, r3
 8002808:	480e      	ldr	r0, [pc, #56]	; (8002844 <FMC_BANK3_MspInit+0xfc>)
 800280a:	f001 f991 	bl	8003b30 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800280e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002812:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	480b      	ldr	r0, [pc, #44]	; (8002848 <FMC_BANK3_MspInit+0x100>)
 800281c:	f001 f988 	bl	8003b30 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002820:	f240 433f 	movw	r3, #1087	; 0x43f
 8002824:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4807      	ldr	r0, [pc, #28]	; (800284c <FMC_BANK3_MspInit+0x104>)
 800282e:	f001 f97f 	bl	8003b30 <HAL_GPIO_Init>
}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	; 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800

08002850 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002850:	b580      	push	{r7, lr}
 8002852:	b09c      	sub	sp, #112	; 0x70
 8002854:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002856:	f7ff ff77 	bl	8002748 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 800285a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800285e:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <FMC_BANK3_Init+0x8c>)
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002864:	2303      	movs	r3, #3
 8002866:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002868:	2301      	movs	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 800286c:	2304      	movs	r3, #4
 800286e:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002880:	2304      	movs	r3, #4
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002888:	2300      	movs	r3, #0
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800288c:	2310      	movs	r3, #16
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 800289c:	2300      	movs	r3, #0
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80028a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80028aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 80028b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028bc:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80028be:	2300      	movs	r3, #0
 80028c0:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80028c2:	2300      	movs	r3, #0
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 80028c6:	1d3a      	adds	r2, r7, #4
 80028c8:	1d39      	adds	r1, r7, #4
 80028ca:	f107 0320 	add.w	r3, r7, #32
 80028ce:	4618      	mov	r0, r3
 80028d0:	f005 fbfa 	bl	80080c8 <HAL_SRAM_Init>
}
 80028d4:	bf00      	nop
 80028d6:	3770      	adds	r7, #112	; 0x70
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	a0000104 	.word	0xa0000104

080028e0 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80028ea:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028f2:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 800290c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002910:	79fa      	ldrb	r2, [r7, #7]
 8002912:	b292      	uxth	r2, r2
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 800292a:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800292e:	885b      	ldrh	r3, [r3, #2]
 8002930:	b29b      	uxth	r3, r3
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002940:	f7ff ff86 	bl	8002850 <FMC_BANK3_Init>
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}

08002948 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ffc3 	bl	80028e0 <FMC_BANK3_WriteData>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ffc7 	bl	8002902 <FMC_BANK3_WriteReg>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002980:	f7ff ffd1 	bl	8002926 <FMC_BANK3_ReadData>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}

0800298a <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa68 	bl	8002e68 <HAL_Delay>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80029a8:	f000 f80e 	bl	80029c8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 80029bc:	f000 f80b 	bl	80029d6 <BSP_AUDIO_OUT_Error_CallBack>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80029ec:	f000 f804 	bl	80029f8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f000 f804 	bl	8002a18 <BSP_LCD_InitEx>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <BSP_LCD_InitEx+0xc0>)
 8002a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a2a:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <BSP_LCD_InitEx+0xc0>)
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <BSP_LCD_InitEx+0xc4>)
 8002a30:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <BSP_LCD_InitEx+0xc0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002a38:	f000 f948 	bl	8002ccc <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2120      	movs	r1, #32
 8002a40:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <BSP_LCD_InitEx+0xc8>)
 8002a42:	f001 fa1f 	bl	8003e84 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002a46:	2200      	movs	r2, #0
 8002a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <BSP_LCD_InitEx+0xcc>)
 8002a4e:	f001 fa19 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002a52:	2005      	movs	r0, #5
 8002a54:	f000 fa08 	bl	8002e68 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5e:	4821      	ldr	r0, [pc, #132]	; (8002ae4 <BSP_LCD_InitEx+0xcc>)
 8002a60:	f001 fa10 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002a64:	200a      	movs	r0, #10
 8002a66:	f000 f9ff 	bl	8002e68 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a70:	481c      	ldr	r0, [pc, #112]	; (8002ae4 <BSP_LCD_InitEx+0xcc>)
 8002a72:	f001 fa07 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002a76:	2014      	movs	r0, #20
 8002a78:	f000 f9f6 	bl	8002e68 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a82:	4818      	ldr	r0, [pc, #96]	; (8002ae4 <BSP_LCD_InitEx+0xcc>)
 8002a84:	f001 f9fe 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f000 f9ed 	bl	8002e68 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <BSP_LCD_InitEx+0xd0>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4798      	blx	r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b85      	cmp	r3, #133	; 0x85
 8002a98:	d118      	bne.n	8002acc <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <BSP_LCD_InitEx+0xd4>)
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <BSP_LCD_InitEx+0xd0>)
 8002a9e:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <BSP_LCD_InitEx+0xd4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7ff fb13 	bl	80020da <ST7789H2_SetOrientation>
 8002ab4:	e005      	b.n	8002ac2 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d102      	bne.n	8002ac2 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7ff fb0c 	bl	80020da <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ac2:	480b      	ldr	r0, [pc, #44]	; (8002af0 <BSP_LCD_InitEx+0xd8>)
 8002ac4:	f000 f83e 	bl	8002b44 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000054c 	.word	0x2000054c
 8002adc:	20000048 	.word	0x20000048
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	20000118 	.word	0x20000118
 8002af0:	20000050 	.word	0x20000050

08002af4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <BSP_LCD_GetXSize+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	4798      	blx	r3
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000118 	.word	0x20000118

08002b0c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <BSP_LCD_GetYSize+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	4798      	blx	r3
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000118 	.word	0x20000118

08002b24 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	4a03      	ldr	r2, [pc, #12]	; (8002b40 <BSP_LCD_SetTextColor+0x1c>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	2000054c 	.word	0x2000054c

08002b44 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <BSP_LCD_SetFont+0x1c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6093      	str	r3, [r2, #8]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000054c 	.word	0x2000054c

08002b64 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <BSP_LCD_Clear+0x68>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <BSP_LCD_Clear+0x68>)
 8002b80:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002b82:	f7ff ffc3 	bl	8002b0c <BSP_LCD_GetYSize>
 8002b86:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e00d      	b.n	8002baa <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	b29c      	uxth	r4, r3
 8002b92:	f7ff ffaf 	bl	8002af4 <BSP_LCD_GetXSize>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f000 f832 	bl	8002c08 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d3ed      	bcc.n	8002b8e <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002bb2:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <BSP_LCD_Clear+0x68>)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <BSP_LCD_Clear+0x68>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ffb0 	bl	8002b24 <BSP_LCD_SetTextColor>
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}
 8002bcc:	2000054c 	.word	0x2000054c

08002bd0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	80bb      	strh	r3, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <BSP_LCD_DrawPixel+0x34>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <BSP_LCD_DrawPixel+0x34>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	88b9      	ldrh	r1, [r7, #4]
 8002bf6:	88f8      	ldrh	r0, [r7, #6]
 8002bf8:	4798      	blx	r3
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000118 	.word	0x20000118

08002c08 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80fb      	strh	r3, [r7, #6]
 8002c12:	460b      	mov	r3, r1
 8002c14:	80bb      	strh	r3, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <BSP_LCD_DrawHLine+0x6c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <BSP_LCD_DrawHLine+0x6c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1c      	ldr	r4, [r3, #32]
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <BSP_LCD_DrawHLine+0x70>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b298      	uxth	r0, r3
 8002c34:	887b      	ldrh	r3, [r7, #2]
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	88f9      	ldrh	r1, [r7, #6]
 8002c3a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002c3c:	e015      	b.n	8002c6a <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e00e      	b.n	8002c62 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b298      	uxth	r0, r3
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <BSP_LCD_DrawHLine+0x70>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7ff ffba 	bl	8002bd0 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3ec      	bcc.n	8002c44 <BSP_LCD_DrawHLine+0x3c>
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000118 	.word	0x20000118
 8002c78:	2000054c 	.word	0x2000054c

08002c7c <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4604      	mov	r4, r0
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	80fb      	strh	r3, [r7, #6]
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80bb      	strh	r3, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	807b      	strh	r3, [r7, #2]
 8002c96:	4613      	mov	r3, r2
 8002c98:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <BSP_LCD_FillRect+0x4c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff3f 	bl	8002b24 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 8002ca6:	88bb      	ldrh	r3, [r7, #4]
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	80ba      	strh	r2, [r7, #4]
 8002cac:	887a      	ldrh	r2, [r7, #2]
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f7ff ffa9 	bl	8002c08 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 8002cb6:	883b      	ldrh	r3, [r7, #0]
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	803a      	strh	r2, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f2      	bne.n	8002ca6 <BSP_LCD_FillRect+0x2a>
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	2000054c 	.word	0x2000054c

08002ccc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002d14:	f043 0310 	orr.w	r3, r3, #16
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <BSP_LCD_MspInit+0xac>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002d30:	2302      	movs	r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d34:	2301      	movs	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480f      	ldr	r0, [pc, #60]	; (8002d7c <BSP_LCD_MspInit+0xb0>)
 8002d40:	f000 fef6 	bl	8003b30 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002d44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002d4e:	f107 030c 	add.w	r3, r7, #12
 8002d52:	4619      	mov	r1, r3
 8002d54:	4809      	ldr	r0, [pc, #36]	; (8002d7c <BSP_LCD_MspInit+0xb0>)
 8002d56:	f000 feeb 	bl	8003b30 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <BSP_LCD_MspInit+0xb4>)
 8002d6a:	f000 fee1 	bl	8003b30 <HAL_GPIO_Init>
}
 8002d6e:	bf00      	nop
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_Init+0x40>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HAL_Init+0x40>)
 8002d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_Init+0x40>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_Init+0x40>)
 8002d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_Init+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_Init+0x40>)
 8002da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dac:	2003      	movs	r0, #3
 8002dae:	f000 fbbf 	bl	8003530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db2:	2000      	movs	r0, #0
 8002db4:	f000 f808 	bl	8002dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db8:	f7fe fa20 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023c00 	.word	0x40023c00

08002dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_InitTick+0x54>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_InitTick+0x58>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fbd7 	bl	800359a <HAL_SYSTICK_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00e      	b.n	8002e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b0f      	cmp	r3, #15
 8002dfa:	d80a      	bhi.n	8002e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	f000 fb9f 	bl	8003546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e08:	4a06      	ldr	r2, [pc, #24]	; (8002e24 <HAL_InitTick+0x5c>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000008 	.word	0x20000008
 8002e20:	2000005c 	.word	0x2000005c
 8002e24:	20000058 	.word	0x20000058

08002e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_IncTick+0x20>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_IncTick+0x24>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4413      	add	r3, r2
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_IncTick+0x24>)
 8002e3a:	6013      	str	r3, [r2, #0]
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000005c 	.word	0x2000005c
 8002e4c:	20000558 	.word	0x20000558

08002e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return uwTick;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_GetTick+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000558 	.word	0x20000558

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff ffee 	bl	8002e50 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_Delay+0x40>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffde 	bl	8002e50 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000005c 	.word	0x2000005c

08002eac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e033      	b.n	8002f2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe f9be 	bl	800124c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ef2:	f023 0302 	bic.w	r3, r3, #2
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f94a 	bl	8003198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
 8002f1a:	e001      	b.n	8002f20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1c>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e113      	b.n	8003178 <HAL_ADC_ConfigChannel+0x244>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b09      	cmp	r3, #9
 8002f5e:	d925      	bls.n	8002fac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68d9      	ldr	r1, [r3, #12]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	3b1e      	subs	r3, #30
 8002f76:	2207      	movs	r2, #7
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	400a      	ands	r2, r1
 8002f84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68d9      	ldr	r1, [r3, #12]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	4603      	mov	r3, r0
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4403      	add	r3, r0
 8002f9e:	3b1e      	subs	r3, #30
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	e022      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6919      	ldr	r1, [r3, #16]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4613      	mov	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4413      	add	r3, r2
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	400a      	ands	r2, r1
 8002fce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6919      	ldr	r1, [r3, #16]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4403      	add	r3, r0
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d824      	bhi.n	8003044 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b05      	subs	r3, #5
 800300c:	221f      	movs	r2, #31
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	400a      	ands	r2, r1
 800301a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b05      	subs	r3, #5
 8003036:	fa00 f203 	lsl.w	r2, r0, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
 8003042:	e04c      	b.n	80030de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b0c      	cmp	r3, #12
 800304a:	d824      	bhi.n	8003096 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	3b23      	subs	r3, #35	; 0x23
 800305e:	221f      	movs	r2, #31
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3b23      	subs	r3, #35	; 0x23
 8003088:	fa00 f203 	lsl.w	r2, r0, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
 8003094:	e023      	b.n	80030de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b41      	subs	r3, #65	; 0x41
 80030a8:	221f      	movs	r2, #31
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	400a      	ands	r2, r1
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4618      	mov	r0, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3b41      	subs	r3, #65	; 0x41
 80030d2:	fa00 f203 	lsl.w	r2, r0, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030de:	4b29      	ldr	r3, [pc, #164]	; (8003184 <HAL_ADC_ConfigChannel+0x250>)
 80030e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <HAL_ADC_ConfigChannel+0x254>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10f      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1d8>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b12      	cmp	r3, #18
 80030f2:	d10b      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_ADC_ConfigChannel+0x254>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d12b      	bne.n	800316e <HAL_ADC_ConfigChannel+0x23a>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_ADC_ConfigChannel+0x258>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x1f4>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b11      	cmp	r3, #17
 8003126:	d122      	bne.n	800316e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a11      	ldr	r2, [pc, #68]	; (800318c <HAL_ADC_ConfigChannel+0x258>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d111      	bne.n	800316e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_ADC_ConfigChannel+0x25c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_ADC_ConfigChannel+0x260>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	0c9a      	lsrs	r2, r3, #18
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003160:	e002      	b.n	8003168 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f9      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40012300 	.word	0x40012300
 8003188:	40012000 	.word	0x40012000
 800318c:	10000012 	.word	0x10000012
 8003190:	20000008 	.word	0x20000008
 8003194:	431bde83 	.word	0x431bde83

08003198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <ADC_Init+0x1f0>)
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <ADC_Init+0x1f4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e00f      	b.n	8003296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0202 	bic.w	r2, r2, #2
 80032a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e1b      	ldrb	r3, [r3, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	3b01      	subs	r3, #1
 80032f0:	035a      	lsls	r2, r3, #13
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e007      	b.n	800330c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	3b01      	subs	r3, #1
 8003328:	051a      	lsls	r2, r3, #20
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800334e:	025a      	lsls	r2, r3, #9
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	029a      	lsls	r2, r3, #10
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	0f000001 	.word	0x0f000001

08003390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ac:	4013      	ands	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <__NVIC_GetPriorityGrouping+0x18>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	f003 0307 	and.w	r3, r3, #7
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	db0b      	blt.n	800341e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	4907      	ldr	r1, [pc, #28]	; (800342c <__NVIC_EnableIRQ+0x38>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2001      	movs	r0, #1
 8003416:	fa00 f202 	lsl.w	r2, r0, r2
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100

08003430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
         );
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034fc:	d301      	bcc.n	8003502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fe:	2301      	movs	r3, #1
 8003500:	e00f      	b.n	8003522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003502:	4a0a      	ldr	r2, [pc, #40]	; (800352c <SysTick_Config+0x40>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350a:	210f      	movs	r1, #15
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	f7ff ff8e 	bl	8003430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <SysTick_Config+0x40>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <SysTick_Config+0x40>)
 800351c:	2207      	movs	r2, #7
 800351e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	e000e010 	.word	0xe000e010

08003530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff29 	bl	8003390 <__NVIC_SetPriorityGrouping>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003558:	f7ff ff3e 	bl	80033d8 <__NVIC_GetPriorityGrouping>
 800355c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff8e 	bl	8003484 <NVIC_EncodePriority>
 8003568:	4602      	mov	r2, r0
 800356a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff5d 	bl	8003430 <__NVIC_SetPriority>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff31 	bl	80033f4 <__NVIC_EnableIRQ>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ffa2 	bl	80034ec <SysTick_Config>
 80035a8:	4603      	mov	r3, r0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e014      	b.n	80035ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	791b      	ldrb	r3, [r3, #4]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fd feb5 	bl	8001344 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	795b      	ldrb	r3, [r3, #5]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_DAC_ConfigChannel+0x20>
 8003612:	2302      	movs	r3, #2
 8003614:	e036      	b.n	8003684 <HAL_DAC_ConfigChannel+0x8e>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2202      	movs	r2, #2
 8003620:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800362a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4013      	ands	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	22c0      	movs	r2, #192	; 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43da      	mvns	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	400a      	ands	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0cf      	b.n	8003842 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_DFSDM_ChannelInit+0x1bc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00e      	beq.n	80036ca <HAL_DFSDM_ChannelInit+0x3a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a67      	ldr	r2, [pc, #412]	; (8003850 <HAL_DFSDM_ChannelInit+0x1c0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_DFSDM_ChannelInit+0x3a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a66      	ldr	r2, [pc, #408]	; (8003854 <HAL_DFSDM_ChannelInit+0x1c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <HAL_DFSDM_ChannelInit+0x3a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a64      	ldr	r2, [pc, #400]	; (8003858 <HAL_DFSDM_ChannelInit+0x1c8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d106      	bne.n	80036d8 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80036ca:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_DFSDM_ChannelInit+0x1cc>)
 80036cc:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_DFSDM_ChannelInit+0x1d0>)
 80036d0:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80036d2:	4b5e      	ldr	r3, [pc, #376]	; (800384c <HAL_DFSDM_ChannelInit+0x1bc>)
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e005      	b.n	80036e4 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <HAL_DFSDM_ChannelInit+0x1d4>)
 80036da:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80036dc:	4b62      	ldr	r3, [pc, #392]	; (8003868 <HAL_DFSDM_ChannelInit+0x1d8>)
 80036de:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80036e0:	4b62      	ldr	r3, [pc, #392]	; (800386c <HAL_DFSDM_ChannelInit+0x1dc>)
 80036e2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f8c1 	bl	8003870 <DFSDM_GetChannelFromInstance>
 80036ee:	4603      	mov	r3, r0
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0a0      	b.n	8003842 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fd fe63 	bl	80013cc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d125      	bne.n	8003764 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	791b      	ldrb	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003772:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003782:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003788:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020f 	bic.w	r2, r2, #15
 80037a0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80037c8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f002 0207 	and.w	r2, r2, #7
 80037f4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003820:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f81e 	bl	8003870 <DFSDM_GetChannelFromInstance>
 8003834:	4603      	mov	r3, r0
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40016000 	.word	0x40016000
 8003850:	40016020 	.word	0x40016020
 8003854:	40016040 	.word	0x40016040
 8003858:	40016060 	.word	0x40016060
 800385c:	2000011c 	.word	0x2000011c
 8003860:	20000120 	.word	0x20000120
 8003864:	20000130 	.word	0x20000130
 8003868:	20000134 	.word	0x20000134
 800386c:	40016400 	.word	0x40016400

08003870 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a24      	ldr	r2, [pc, #144]	; (800390c <DFSDM_GetChannelFromInstance+0x9c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <DFSDM_GetChannelFromInstance+0x18>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a23      	ldr	r2, [pc, #140]	; (8003910 <DFSDM_GetChannelFromInstance+0xa0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d102      	bne.n	800388e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e037      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a20      	ldr	r2, [pc, #128]	; (8003914 <DFSDM_GetChannelFromInstance+0xa4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <DFSDM_GetChannelFromInstance+0x2e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <DFSDM_GetChannelFromInstance+0xa8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d102      	bne.n	80038a4 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e02c      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a1d      	ldr	r2, [pc, #116]	; (800391c <DFSDM_GetChannelFromInstance+0xac>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <DFSDM_GetChannelFromInstance+0x44>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <DFSDM_GetChannelFromInstance+0xb0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d102      	bne.n	80038ba <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80038b4:	2302      	movs	r3, #2
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e021      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a19      	ldr	r2, [pc, #100]	; (8003924 <DFSDM_GetChannelFromInstance+0xb4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d003      	beq.n	80038ca <DFSDM_GetChannelFromInstance+0x5a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a18      	ldr	r2, [pc, #96]	; (8003928 <DFSDM_GetChannelFromInstance+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d102      	bne.n	80038d0 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80038ca:	2303      	movs	r3, #3
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e016      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a16      	ldr	r2, [pc, #88]	; (800392c <DFSDM_GetChannelFromInstance+0xbc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d102      	bne.n	80038de <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80038d8:	2304      	movs	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e00f      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <DFSDM_GetChannelFromInstance+0xc0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d102      	bne.n	80038ec <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80038e6:	2305      	movs	r3, #5
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e008      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a11      	ldr	r2, [pc, #68]	; (8003934 <DFSDM_GetChannelFromInstance+0xc4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d102      	bne.n	80038fa <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80038f4:	2306      	movs	r3, #6
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e001      	b.n	80038fe <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80038fa:	2307      	movs	r3, #7
 80038fc:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40016000 	.word	0x40016000
 8003910:	40016400 	.word	0x40016400
 8003914:	40016020 	.word	0x40016020
 8003918:	40016420 	.word	0x40016420
 800391c:	40016040 	.word	0x40016040
 8003920:	40016440 	.word	0x40016440
 8003924:	40016060 	.word	0x40016060
 8003928:	40016460 	.word	0x40016460
 800392c:	40016480 	.word	0x40016480
 8003930:	400164a0 	.word	0x400164a0
 8003934:	400164c0 	.word	0x400164c0

08003938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d004      	beq.n	8003956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00c      	b.n	8003970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2205      	movs	r2, #5
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e081      	b.n	8003a92 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fe24 	bl	80015f0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039dc:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e006      	b.n	8003a04 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d104      	bne.n	8003a16 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a28:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a38:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	ea42 0103 	orr.w	r1, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	021a      	lsls	r2, r3, #8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69d9      	ldr	r1, [r3, #28]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d138      	bne.n	8003b22 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e032      	b.n	8003b24 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2224      	movs	r2, #36	; 0x24
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e165      	b.n	8003e18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	f040 8154 	bne.w	8003e12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d00b      	beq.n	8003b8a <HAL_GPIO_Init+0x5a>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d007      	beq.n	8003b8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b7e:	2b11      	cmp	r3, #17
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d130      	bne.n	8003bec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0201 	and.w	r2, r3, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0xfc>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b12      	cmp	r3, #18
 8003c2a:	d123      	bne.n	8003c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	08da      	lsrs	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3208      	adds	r2, #8
 8003c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	220f      	movs	r2, #15
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	08da      	lsrs	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3208      	adds	r2, #8
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	2203      	movs	r2, #3
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80ae 	beq.w	8003e12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b5c      	ldr	r3, [pc, #368]	; (8003e2c <HAL_GPIO_Init+0x2fc>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	4a5b      	ldr	r2, [pc, #364]	; (8003e2c <HAL_GPIO_Init+0x2fc>)
 8003cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc6:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_GPIO_Init+0x2fc>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd2:	4a57      	ldr	r2, [pc, #348]	; (8003e30 <HAL_GPIO_Init+0x300>)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <HAL_GPIO_Init+0x304>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d025      	beq.n	8003d4a <HAL_GPIO_Init+0x21a>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4d      	ldr	r2, [pc, #308]	; (8003e38 <HAL_GPIO_Init+0x308>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <HAL_GPIO_Init+0x216>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4c      	ldr	r2, [pc, #304]	; (8003e3c <HAL_GPIO_Init+0x30c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_Init+0x212>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4b      	ldr	r2, [pc, #300]	; (8003e40 <HAL_GPIO_Init+0x310>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x20e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4a      	ldr	r2, [pc, #296]	; (8003e44 <HAL_GPIO_Init+0x314>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_Init+0x20a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a49      	ldr	r2, [pc, #292]	; (8003e48 <HAL_GPIO_Init+0x318>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_Init+0x206>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a48      	ldr	r2, [pc, #288]	; (8003e4c <HAL_GPIO_Init+0x31c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_Init+0x202>
 8003d2e:	2306      	movs	r3, #6
 8003d30:	e00c      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d32:	2307      	movs	r3, #7
 8003d34:	e00a      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d36:	2305      	movs	r3, #5
 8003d38:	e008      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e006      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e004      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_GPIO_Init+0x21c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f002 0203 	and.w	r2, r2, #3
 8003d52:	0092      	lsls	r2, r2, #2
 8003d54:	4093      	lsls	r3, r2
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d5c:	4934      	ldr	r1, [pc, #208]	; (8003e30 <HAL_GPIO_Init+0x300>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d8e:	4a30      	ldr	r2, [pc, #192]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d94:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003db8:	4a25      	ldr	r2, [pc, #148]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de2:	4a1b      	ldr	r2, [pc, #108]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e0c:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_GPIO_Init+0x320>)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3301      	adds	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	f67f ae96 	bls.w	8003b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	3724      	adds	r7, #36	; 0x24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40013800 	.word	0x40013800
 8003e34:	40020000 	.word	0x40020000
 8003e38:	40020400 	.word	0x40020400
 8003e3c:	40020800 	.word	0x40020800
 8003e40:	40020c00 	.word	0x40020c00
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40021400 	.word	0x40021400
 8003e4c:	40021800 	.word	0x40021800
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f806 	bl	8003ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40013c00 	.word	0x40013c00

08003ee8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f00:	b08f      	sub	sp, #60	; 0x3c
 8003f02:	af0a      	add	r7, sp, #40	; 0x28
 8003f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e054      	b.n	8003fba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f008 fbaa 	bl	800c684 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2203      	movs	r2, #3
 8003f34:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f005 fd6c 	bl	8009a2c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	687e      	ldr	r6, [r7, #4]
 8003f5c:	466d      	mov	r5, sp
 8003f5e:	f106 0410 	add.w	r4, r6, #16
 8003f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f72:	1d33      	adds	r3, r6, #4
 8003f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	f005 fce6 	bl	8009948 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f005 fd63 	bl	8009a4e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	687e      	ldr	r6, [r7, #4]
 8003f90:	466d      	mov	r5, sp
 8003f92:	f106 0410 	add.w	r4, r6, #16
 8003f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa6:	1d33      	adds	r3, r6, #4
 8003fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	f005 fe76 	bl	8009c9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fc2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003fc2:	b590      	push	{r4, r7, lr}
 8003fc4:	b089      	sub	sp, #36	; 0x24
 8003fc6:	af04      	add	r7, sp, #16
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	4608      	mov	r0, r1
 8003fcc:	4611      	mov	r1, r2
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	70fb      	strb	r3, [r7, #3]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70bb      	strb	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_HCD_HC_Init+0x28>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e07f      	b.n	80040ea <HAL_HCD_HC_Init+0x128>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	440b      	add	r3, r1
 8004000:	333d      	adds	r3, #61	; 0x3d
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	3338      	adds	r3, #56	; 0x38
 8004016:	787a      	ldrb	r2, [r7, #1]
 8004018:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	440b      	add	r3, r1
 8004028:	3340      	adds	r3, #64	; 0x40
 800402a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800402c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	3339      	adds	r3, #57	; 0x39
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	333f      	adds	r3, #63	; 0x3f
 8004052:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004056:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	78bb      	ldrb	r3, [r7, #2]
 800405c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004060:	b2d8      	uxtb	r0, r3
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	333a      	adds	r3, #58	; 0x3a
 8004070:	4602      	mov	r2, r0
 8004072:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004074:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004078:	2b00      	cmp	r3, #0
 800407a:	da0a      	bge.n	8004092 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	333b      	adds	r3, #59	; 0x3b
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
 8004090:	e009      	b.n	80040a6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	333b      	adds	r3, #59	; 0x3b
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	333c      	adds	r3, #60	; 0x3c
 80040b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80040ba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	787c      	ldrb	r4, [r7, #1]
 80040c2:	78ba      	ldrb	r2, [r7, #2]
 80040c4:	78f9      	ldrb	r1, [r7, #3]
 80040c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040c8:	9302      	str	r3, [sp, #8]
 80040ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	4623      	mov	r3, r4
 80040d8:	f005 ff5c 	bl	8009f94 <USB_HC_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}

080040f2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_HCD_HC_Halt+0x1e>
 800410c:	2302      	movs	r3, #2
 800410e:	e00f      	b.n	8004130 <HAL_HCD_HC_Halt+0x3e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f006 f998 	bl	800a456 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	461a      	mov	r2, r3
 8004146:	4603      	mov	r3, r0
 8004148:	70fb      	strb	r3, [r7, #3]
 800414a:	460b      	mov	r3, r1
 800414c:	70bb      	strb	r3, [r7, #2]
 800414e:	4613      	mov	r3, r2
 8004150:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	333b      	adds	r3, #59	; 0x3b
 8004162:	78ba      	ldrb	r2, [r7, #2]
 8004164:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	787a      	ldrb	r2, [r7, #1]
 8004178:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800417a:	7c3b      	ldrb	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d114      	bne.n	80041aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	440b      	add	r3, r1
 800418e:	3342      	adds	r3, #66	; 0x42
 8004190:	2203      	movs	r2, #3
 8004192:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	333d      	adds	r3, #61	; 0x3d
 80041a4:	7f3a      	ldrb	r2, [r7, #28]
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e009      	b.n	80041be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	3342      	adds	r3, #66	; 0x42
 80041ba:	2202      	movs	r2, #2
 80041bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80041be:	787b      	ldrb	r3, [r7, #1]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	f200 80d6 	bhi.w	8004372 <HAL_HCD_HC_SubmitRequest+0x23a>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	0800435d 	.word	0x0800435d
 80041d4:	08004249 	.word	0x08004249
 80041d8:	080042d3 	.word	0x080042d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80041dc:	7c3b      	ldrb	r3, [r7, #16]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	f040 80c9 	bne.w	8004376 <HAL_HCD_HC_SubmitRequest+0x23e>
 80041e4:	78bb      	ldrb	r3, [r7, #2]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 80c5 	bne.w	8004376 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80041ec:	8b3b      	ldrh	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	3351      	adds	r3, #81	; 0x51
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	440b      	add	r3, r1
 8004214:	3351      	adds	r3, #81	; 0x51
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	440b      	add	r3, r1
 800422a:	3342      	adds	r3, #66	; 0x42
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004230:	e0a1      	b.n	8004376 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	3342      	adds	r3, #66	; 0x42
 8004242:	2202      	movs	r2, #2
 8004244:	701a      	strb	r2, [r3, #0]
      break;
 8004246:	e096      	b.n	8004376 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004248:	78bb      	ldrb	r3, [r7, #2]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d120      	bne.n	8004290 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3351      	adds	r3, #81	; 0x51
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	3342      	adds	r3, #66	; 0x42
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004278:	e07e      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	440b      	add	r3, r1
 8004288:	3342      	adds	r3, #66	; 0x42
 800428a:	2202      	movs	r2, #2
 800428c:	701a      	strb	r2, [r3, #0]
      break;
 800428e:	e073      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	440b      	add	r3, r1
 800429e:	3350      	adds	r3, #80	; 0x50
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	3342      	adds	r3, #66	; 0x42
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
      break;
 80042ba:	e05d      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	3342      	adds	r3, #66	; 0x42
 80042cc:	2202      	movs	r2, #2
 80042ce:	701a      	strb	r2, [r3, #0]
      break;
 80042d0:	e052      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80042d2:	78bb      	ldrb	r3, [r7, #2]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d120      	bne.n	800431a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	3351      	adds	r3, #81	; 0x51
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	440b      	add	r3, r1
 80042fc:	3342      	adds	r3, #66	; 0x42
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004302:	e039      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	440b      	add	r3, r1
 8004312:	3342      	adds	r3, #66	; 0x42
 8004314:	2202      	movs	r2, #2
 8004316:	701a      	strb	r2, [r3, #0]
      break;
 8004318:	e02e      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	3350      	adds	r3, #80	; 0x50
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	440b      	add	r3, r1
 800433e:	3342      	adds	r3, #66	; 0x42
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
      break;
 8004344:	e018      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	440b      	add	r3, r1
 8004354:	3342      	adds	r3, #66	; 0x42
 8004356:	2202      	movs	r2, #2
 8004358:	701a      	strb	r2, [r3, #0]
      break;
 800435a:	e00d      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	3342      	adds	r3, #66	; 0x42
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
      break;
 8004370:	e002      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004376:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	440b      	add	r3, r1
 8004386:	3344      	adds	r3, #68	; 0x44
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	8b39      	ldrh	r1, [r7, #24]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4403      	add	r3, r0
 800439c:	3348      	adds	r3, #72	; 0x48
 800439e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	335c      	adds	r3, #92	; 0x5c
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	440b      	add	r3, r1
 80043c2:	334c      	adds	r3, #76	; 0x4c
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	3339      	adds	r3, #57	; 0x39
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	440b      	add	r3, r1
 80043ea:	335d      	adds	r3, #93	; 0x5d
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	3338      	adds	r3, #56	; 0x38
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	18d1      	adds	r1, r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	f005 fecc 	bl	800a1a8 <USB_HC_StartXfer>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop

0800441c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f005 fbef 	bl	8009c16 <USB_GetMode>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	f040 80ef 	bne.w	800461e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f005 fbd3 	bl	8009bf0 <USB_ReadInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 80e5 	beq.w	800461c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f005 fbca 	bl	8009bf0 <USB_ReadInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004466:	d104      	bne.n	8004472 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004470:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 fbba 	bl	8009bf0 <USB_ReadInterrupts>
 800447c:	4603      	mov	r3, r0
 800447e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004486:	d104      	bne.n	8004492 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004490:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f005 fbaa 	bl	8009bf0 <USB_ReadInterrupts>
 800449c:	4603      	mov	r3, r0
 800449e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a6:	d104      	bne.n	80044b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f005 fb9a 	bl	8009bf0 <USB_ReadInterrupts>
 80044bc:	4603      	mov	r3, r0
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d103      	bne.n	80044ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2202      	movs	r2, #2
 80044cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f005 fb8c 	bl	8009bf0 <USB_ReadInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e2:	d115      	bne.n	8004510 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80044ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f008 f93e 	bl	800c780 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f005 fc7c 	bl	8009e08 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f005 fb6b 	bl	8009bf0 <USB_ReadInterrupts>
 800451a:	4603      	mov	r3, r0
 800451c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004524:	d102      	bne.n	800452c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 f966 	bl	80057f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f005 fb5d 	bl	8009bf0 <USB_ReadInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d106      	bne.n	800454e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f008 f901 	bl	800c748 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2208      	movs	r2, #8
 800454c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f005 fb4c 	bl	8009bf0 <USB_ReadInterrupts>
 8004558:	4603      	mov	r3, r0
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004562:	d138      	bne.n	80045d6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f005 ff63 	bl	800a434 <USB_HC_ReadInterrupt>
 800456e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e025      	b.n	80045c2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	d106      	bne.n	80045b0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8cf 	bl	800474c <HCD_HC_IN_IRQHandler>
 80045ae:	e005      	b.n	80045bc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fcfd 	bl	8004fb6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d3d4      	bcc.n	8004576 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f005 fb08 	bl	8009bf0 <USB_ReadInterrupts>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d101      	bne.n	80045ee <HAL_HCD_IRQHandler+0x1d2>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_HCD_IRQHandler+0x1d4>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d014      	beq.n	800461e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0210 	bic.w	r2, r2, #16
 8004602:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 f84b 	bl	80056a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0210 	orr.w	r2, r2, #16
 8004618:	619a      	str	r2, [r3, #24]
 800461a:	e000      	b.n	800461e <HAL_HCD_IRQHandler+0x202>
      return;
 800461c:	bf00      	nop
    }
  }
}
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_HCD_Start+0x16>
 8004636:	2302      	movs	r3, #2
 8004638:	e013      	b.n	8004662 <HAL_HCD_Start+0x3e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f005 f9df 	bl	8009a0a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f005 fc3c 	bl	8009ed0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_HCD_Stop+0x16>
 800467c:	2302      	movs	r3, #2
 800467e:	e00d      	b.n	800469c <HAL_HCD_Stop+0x32>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f006 f81d 	bl	800a6cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f005 fbe3 	bl	8009e7c <USB_ResetPort>
 80046b6:	4603      	mov	r3, r0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	335c      	adds	r3, #92	; 0x5c
 80046dc:	781b      	ldrb	r3, [r3, #0]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	440b      	add	r3, r1
 8004704:	334c      	adds	r3, #76	; 0x4c
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f005 fc25 	bl	8009f70 <USB_GetCurrentFrame>
 8004726:	4603      	mov	r3, r0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f005 fc00 	bl	8009f42 <USB_GetHostSpeed>
 8004742:	4603      	mov	r3, r0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d119      	bne.n	80047b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004788:	461a      	mov	r2, r3
 800478a:	2304      	movs	r3, #4
 800478c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4413      	add	r3, r2
 8004796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	60d3      	str	r3, [r2, #12]
 80047ae:	e0ce      	b.n	800494e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c6:	d12c      	bne.n	8004822 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d4:	461a      	mov	r2, r3
 80047d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	440b      	add	r3, r1
 80047ea:	335d      	adds	r3, #93	; 0x5d
 80047ec:	2207      	movs	r2, #7
 80047ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	0151      	lsls	r1, r2, #5
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	440a      	add	r2, r1
 8004806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800480a:	f043 0302 	orr.w	r3, r3, #2
 800480e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f005 fe1b 	bl	800a456 <USB_HC_Halt>
 8004820:	e095      	b.n	800494e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b20      	cmp	r3, #32
 8004836:	d109      	bne.n	800484c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	461a      	mov	r2, r3
 8004846:	2320      	movs	r3, #32
 8004848:	6093      	str	r3, [r2, #8]
 800484a:	e080      	b.n	800494e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d134      	bne.n	80048cc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	440a      	add	r2, r1
 8004878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	440b      	add	r3, r1
 8004890:	335d      	adds	r3, #93	; 0x5d
 8004892:	2205      	movs	r2, #5
 8004894:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a2:	461a      	mov	r2, r3
 80048a4:	2310      	movs	r3, #16
 80048a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	2308      	movs	r3, #8
 80048b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f005 fdc6 	bl	800a456 <USB_HC_Halt>
 80048ca:	e040      	b.n	800494e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d134      	bne.n	800494e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	0151      	lsls	r1, r2, #5
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	440a      	add	r2, r1
 80048fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f005 fda1 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	461a      	mov	r2, r3
 8004922:	2310      	movs	r3, #16
 8004924:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	440b      	add	r3, r1
 8004934:	335d      	adds	r3, #93	; 0x5d
 8004936:	2208      	movs	r2, #8
 8004938:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4413      	add	r3, r2
 8004942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004946:	461a      	mov	r2, r3
 8004948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800494c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004964:	d122      	bne.n	80049ac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	440a      	add	r2, r1
 800497c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f005 fd60 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	461a      	mov	r2, r3
 80049a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80049aa:	e300      	b.n	8004fae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b01      	cmp	r3, #1
 80049c0:	f040 80fd 	bne.w	8004bbe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01b      	beq.n	8004a04 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	440b      	add	r3, r1
 80049da:	3348      	adds	r3, #72	; 0x48
 80049dc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	0159      	lsls	r1, r3, #5
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	440b      	add	r3, r1
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80049f0:	1ad1      	subs	r1, r2, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4403      	add	r3, r0
 8004a00:	334c      	adds	r3, #76	; 0x4c
 8004a02:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	440b      	add	r3, r1
 8004a12:	335d      	adds	r3, #93	; 0x5d
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	440b      	add	r3, r1
 8004a26:	3358      	adds	r3, #88	; 0x58
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	333f      	adds	r3, #63	; 0x3f
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	333f      	adds	r3, #63	; 0x3f
 8004a64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d121      	bne.n	8004aae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f005 fcde 	bl	800a456 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	6093      	str	r3, [r2, #8]
 8004aac:	e070      	b.n	8004b90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	440b      	add	r3, r1
 8004abc:	333f      	adds	r3, #63	; 0x3f
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d12a      	bne.n	8004b1a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ade:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	440b      	add	r3, r1
 8004af2:	335c      	adds	r3, #92	; 0x5c
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	b2d8      	uxtb	r0, r3
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	440b      	add	r3, r1
 8004b0a:	335c      	adds	r3, #92	; 0x5c
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4601      	mov	r1, r0
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f007 fe42 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b18:	e03a      	b.n	8004b90 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	333f      	adds	r3, #63	; 0x3f
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d12f      	bne.n	8004b90 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	440b      	add	r3, r1
 8004b3e:	335c      	adds	r3, #92	; 0x5c
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	440b      	add	r3, r1
 8004b52:	3350      	adds	r3, #80	; 0x50
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f083 0301 	eor.w	r3, r3, #1
 8004b5a:	b2d8      	uxtb	r0, r3
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	3350      	adds	r3, #80	; 0x50
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	b2d8      	uxtb	r0, r3
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	440b      	add	r3, r1
 8004b82:	335c      	adds	r3, #92	; 0x5c
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4601      	mov	r1, r0
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f007 fe06 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3350      	adds	r3, #80	; 0x50
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f083 0301 	eor.w	r3, r3, #1
 8004ba6:	b2d8      	uxtb	r0, r3
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3350      	adds	r3, #80	; 0x50
 8004bb8:	4602      	mov	r2, r0
 8004bba:	701a      	strb	r2, [r3, #0]
}
 8004bbc:	e1f7      	b.n	8004fae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	f040 811a 	bne.w	8004e0a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf0:	f023 0302 	bic.w	r3, r3, #2
 8004bf4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	440b      	add	r3, r1
 8004c04:	335d      	adds	r3, #93	; 0x5d
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10a      	bne.n	8004c22 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	440b      	add	r3, r1
 8004c1a:	335c      	adds	r3, #92	; 0x5c
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e0d9      	b.n	8004dd6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	440b      	add	r3, r1
 8004c30:	335d      	adds	r3, #93	; 0x5d
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b05      	cmp	r3, #5
 8004c36:	d10a      	bne.n	8004c4e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	440b      	add	r3, r1
 8004c46:	335c      	adds	r3, #92	; 0x5c
 8004c48:	2205      	movs	r2, #5
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e0c3      	b.n	8004dd6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	335d      	adds	r3, #93	; 0x5d
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b06      	cmp	r3, #6
 8004c62:	d00a      	beq.n	8004c7a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	440b      	add	r3, r1
 8004c72:	335d      	adds	r3, #93	; 0x5d
 8004c74:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d156      	bne.n	8004d28 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	3358      	adds	r3, #88	; 0x58
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	1c59      	adds	r1, r3, #1
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4403      	add	r3, r0
 8004c9c:	3358      	adds	r3, #88	; 0x58
 8004c9e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	3358      	adds	r3, #88	; 0x58
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d914      	bls.n	8004ce0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3358      	adds	r3, #88	; 0x58
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	440b      	add	r3, r1
 8004cd8:	335c      	adds	r3, #92	; 0x5c
 8004cda:	2204      	movs	r2, #4
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e009      	b.n	8004cf4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	335c      	adds	r3, #92	; 0x5c
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e056      	b.n	8004dd6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	440b      	add	r3, r1
 8004d36:	335d      	adds	r3, #93	; 0x5d
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d123      	bne.n	8004d86 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	440b      	add	r3, r1
 8004d4c:	335c      	adds	r3, #92	; 0x5c
 8004d4e:	2202      	movs	r2, #2
 8004d50:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d68:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d70:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e027      	b.n	8004dd6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	440b      	add	r3, r1
 8004d94:	335d      	adds	r3, #93	; 0x5d
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b07      	cmp	r3, #7
 8004d9a:	d11c      	bne.n	8004dd6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	440b      	add	r3, r1
 8004daa:	3358      	adds	r3, #88	; 0x58
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4403      	add	r3, r0
 8004dbe:	3358      	adds	r3, #88	; 0x58
 8004dc0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	440b      	add	r3, r1
 8004dd0:	335c      	adds	r3, #92	; 0x5c
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de2:	461a      	mov	r2, r3
 8004de4:	2302      	movs	r3, #2
 8004de6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	b2d8      	uxtb	r0, r3
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	335c      	adds	r3, #92	; 0x5c
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4601      	mov	r1, r0
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f007 fcca 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e08:	e0d1      	b.n	8004fae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1c:	2b80      	cmp	r3, #128	; 0x80
 8004e1e:	d13e      	bne.n	8004e9e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3a:	f043 0302 	orr.w	r3, r3, #2
 8004e3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3358      	adds	r3, #88	; 0x58
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4403      	add	r3, r0
 8004e62:	3358      	adds	r3, #88	; 0x58
 8004e64:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	440b      	add	r3, r1
 8004e74:	335d      	adds	r3, #93	; 0x5d
 8004e76:	2206      	movs	r2, #6
 8004e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f005 fae6 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	461a      	mov	r2, r3
 8004e98:	2380      	movs	r3, #128	; 0x80
 8004e9a:	6093      	str	r3, [r2, #8]
}
 8004e9c:	e087      	b.n	8004fae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b10      	cmp	r3, #16
 8004eb2:	d17c      	bne.n	8004fae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	333f      	adds	r3, #63	; 0x3f
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d122      	bne.n	8004f10 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3358      	adds	r3, #88	; 0x58
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f005 faa4 	bl	800a456 <USB_HC_Halt>
 8004f0e:	e045      	b.n	8004f9c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	440b      	add	r3, r1
 8004f1e:	333f      	adds	r3, #63	; 0x3f
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	440b      	add	r3, r1
 8004f34:	333f      	adds	r3, #63	; 0x3f
 8004f36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d12f      	bne.n	8004f9c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	3358      	adds	r3, #88	; 0x58
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d121      	bne.n	8004f9c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	335d      	adds	r3, #93	; 0x5d
 8004f68:	2203      	movs	r2, #3
 8004f6a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	4611      	mov	r1, r2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f005 fa5d 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	461a      	mov	r2, r3
 8004faa:	2310      	movs	r3, #16
 8004fac:	6093      	str	r3, [r2, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d119      	bne.n	800501a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	440a      	add	r2, r1
 800500e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005018:	e33e      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b20      	cmp	r3, #32
 800502e:	d141      	bne.n	80050b4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	2320      	movs	r3, #32
 8005040:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	333d      	adds	r3, #61	; 0x3d
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 831f 	bne.w	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	440b      	add	r3, r1
 8005068:	333d      	adds	r3, #61	; 0x3d
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	335c      	adds	r3, #92	; 0x5c
 800507e:	2202      	movs	r2, #2
 8005080:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	440a      	add	r2, r1
 8005098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f005 f9d2 	bl	800a456 <USB_HC_Halt>
}
 80050b2:	e2f1      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d13f      	bne.n	800514a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	440b      	add	r3, r1
 80050d8:	335d      	adds	r3, #93	; 0x5d
 80050da:	2204      	movs	r2, #4
 80050dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	333d      	adds	r3, #61	; 0x3d
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3358      	adds	r3, #88	; 0x58
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4413      	add	r3, r2
 800510e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	440a      	add	r2, r1
 800511c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005120:	f043 0302 	orr.w	r3, r3, #2
 8005124:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f005 f990 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	461a      	mov	r2, r3
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	6093      	str	r3, [r2, #8]
}
 8005148:	e2a6      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4413      	add	r3, r2
 8005152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005160:	d122      	bne.n	80051a8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	440a      	add	r2, r1
 8005178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f005 f962 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	461a      	mov	r2, r3
 80051a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a4:	6093      	str	r3, [r2, #8]
}
 80051a6:	e277      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d135      	bne.n	800522a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	3358      	adds	r3, #88	; 0x58
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f005 f92a 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	461a      	mov	r2, r3
 8005210:	2301      	movs	r3, #1
 8005212:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	440b      	add	r3, r1
 8005222:	335d      	adds	r3, #93	; 0x5d
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
}
 8005228:	e236      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b08      	cmp	r3, #8
 800523e:	d12b      	bne.n	8005298 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4413      	add	r3, r2
 8005248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524c:	461a      	mov	r2, r3
 800524e:	2308      	movs	r3, #8
 8005250:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	0151      	lsls	r1, r2, #5
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	440a      	add	r2, r1
 8005268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f005 f8ea 	bl	800a456 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	335d      	adds	r3, #93	; 0x5d
 8005292:	2205      	movs	r2, #5
 8005294:	701a      	strb	r2, [r3, #0]
}
 8005296:	e1ff      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d155      	bne.n	800535a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	440b      	add	r3, r1
 80052bc:	3358      	adds	r3, #88	; 0x58
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	440b      	add	r3, r1
 80052d0:	335d      	adds	r3, #93	; 0x5d
 80052d2:	2203      	movs	r2, #3
 80052d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	440b      	add	r3, r1
 80052e4:	333d      	adds	r3, #61	; 0x3d
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d114      	bne.n	8005316 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	333c      	adds	r3, #60	; 0x3c
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	333d      	adds	r3, #61	; 0x3d
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	440a      	add	r2, r1
 800532c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005330:	f043 0302 	orr.w	r3, r3, #2
 8005334:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f005 f888 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	2310      	movs	r3, #16
 8005356:	6093      	str	r3, [r2, #8]
}
 8005358:	e19e      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d12b      	bne.n	80053c8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f005 f85b 	bl	800a456 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	440b      	add	r3, r1
 80053ae:	335d      	adds	r3, #93	; 0x5d
 80053b0:	2206      	movs	r2, #6
 80053b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c0:	461a      	mov	r2, r3
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	6093      	str	r3, [r2, #8]
}
 80053c6:	e167      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053de:	d135      	bne.n	800544c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053fa:	f043 0302 	orr.w	r3, r3, #2
 80053fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f005 f823 	bl	800a456 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	461a      	mov	r2, r3
 800541e:	2310      	movs	r3, #16
 8005420:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4413      	add	r3, r2
 800542a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542e:	461a      	mov	r2, r3
 8005430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005434:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	335d      	adds	r3, #93	; 0x5d
 8005446:	2208      	movs	r2, #8
 8005448:	701a      	strb	r2, [r3, #0]
}
 800544a:	e125      	b.n	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	f040 811a 	bne.w	8005698 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	440a      	add	r2, r1
 800547a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547e:	f023 0302 	bic.w	r3, r3, #2
 8005482:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	440b      	add	r3, r1
 8005492:	335d      	adds	r3, #93	; 0x5d
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d137      	bne.n	800550a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	440b      	add	r3, r1
 80054a8:	335c      	adds	r3, #92	; 0x5c
 80054aa:	2201      	movs	r2, #1
 80054ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	333f      	adds	r3, #63	; 0x3f
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d00b      	beq.n	80054dc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	333f      	adds	r3, #63	; 0x3f
 80054d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	f040 80c5 	bne.w	8005666 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	440b      	add	r3, r1
 80054ea:	3351      	adds	r3, #81	; 0x51
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2d8      	uxtb	r0, r3
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	3351      	adds	r3, #81	; 0x51
 8005504:	4602      	mov	r2, r0
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e0ad      	b.n	8005666 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	440b      	add	r3, r1
 8005518:	335d      	adds	r3, #93	; 0x5d
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d10a      	bne.n	8005536 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	440b      	add	r3, r1
 800552e:	335c      	adds	r3, #92	; 0x5c
 8005530:	2202      	movs	r2, #2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	e097      	b.n	8005666 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	440b      	add	r3, r1
 8005544:	335d      	adds	r3, #93	; 0x5d
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d10a      	bne.n	8005562 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	335c      	adds	r3, #92	; 0x5c
 800555c:	2202      	movs	r2, #2
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e081      	b.n	8005666 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	440b      	add	r3, r1
 8005570:	335d      	adds	r3, #93	; 0x5d
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b05      	cmp	r3, #5
 8005576:	d10a      	bne.n	800558e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	335c      	adds	r3, #92	; 0x5c
 8005588:	2205      	movs	r2, #5
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e06b      	b.n	8005666 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	335d      	adds	r3, #93	; 0x5d
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b06      	cmp	r3, #6
 80055a2:	d00a      	beq.n	80055ba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	335d      	adds	r3, #93	; 0x5d
 80055b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d155      	bne.n	8005666 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	3358      	adds	r3, #88	; 0x58
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4403      	add	r3, r0
 80055dc:	3358      	adds	r3, #88	; 0x58
 80055de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	440b      	add	r3, r1
 80055ee:	3358      	adds	r3, #88	; 0x58
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d914      	bls.n	8005620 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	3358      	adds	r3, #88	; 0x58
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	335c      	adds	r3, #92	; 0x5c
 800561a:	2204      	movs	r2, #4
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e009      	b.n	8005634 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	440b      	add	r3, r1
 800562e:	335c      	adds	r3, #92	; 0x5c
 8005630:	2202      	movs	r2, #2
 8005632:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800564a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005652:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	461a      	mov	r2, r3
 8005674:	2302      	movs	r3, #2
 8005676:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	b2d8      	uxtb	r0, r3
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	440b      	add	r3, r1
 800568a:	335c      	adds	r3, #92	; 0x5c
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	4601      	mov	r1, r0
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f007 f882 	bl	800c79c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005698:	bf00      	nop
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	0c5b      	lsrs	r3, r3, #17
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d003      	beq.n	80056e4 <HCD_RXQLVL_IRQHandler+0x44>
 80056dc:	2b05      	cmp	r3, #5
 80056de:	f000 8082 	beq.w	80057e6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056e2:	e083      	b.n	80057ec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d07f      	beq.n	80057ea <HCD_RXQLVL_IRQHandler+0x14a>
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	3344      	adds	r3, #68	; 0x44
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d074      	beq.n	80057ea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	3344      	adds	r3, #68	; 0x44
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	b292      	uxth	r2, r2
 800571a:	4619      	mov	r1, r3
 800571c:	f004 fa3f 	bl	8009b9e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	3344      	adds	r3, #68	; 0x44
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	18d1      	adds	r1, r2, r3
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4403      	add	r3, r0
 8005744:	3344      	adds	r3, #68	; 0x44
 8005746:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	440b      	add	r3, r1
 8005756:	334c      	adds	r3, #76	; 0x4c
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	18d1      	adds	r1, r2, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4403      	add	r3, r0
 800576c:	334c      	adds	r3, #76	; 0x4c
 800576e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HCD_RXQLVL_IRQHandler+0x154>)
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d031      	beq.n	80057ea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800579c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	440b      	add	r3, r1
 80057c6:	3350      	adds	r3, #80	; 0x50
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	f083 0301 	eor.w	r3, r3, #1
 80057ce:	b2d8      	uxtb	r0, r3
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	3350      	adds	r3, #80	; 0x50
 80057e0:	4602      	mov	r2, r0
 80057e2:	701a      	strb	r2, [r3, #0]
      break;
 80057e4:	e001      	b.n	80057ea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80057ea:	bf00      	nop
  }
}
 80057ec:	bf00      	nop
 80057ee:	3728      	adds	r7, #40	; 0x28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	1ff80000 	.word	0x1ff80000

080057f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005824:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d10b      	bne.n	8005848 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d102      	bne.n	8005840 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f006 ff92 	bl	800c764 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f043 0302 	orr.w	r3, r3, #2
 8005846:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d132      	bne.n	80058b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f043 0308 	orr.w	r3, r3, #8
 8005858:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 0304 	and.w	r3, r3, #4
 8005860:	2b04      	cmp	r3, #4
 8005862:	d126      	bne.n	80058b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d113      	bne.n	8005894 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005876:	d106      	bne.n	8005886 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f004 fac2 	bl	8009e08 <USB_InitFSLSPClkSel>
 8005884:	e011      	b.n	80058aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2101      	movs	r1, #1
 800588c:	4618      	mov	r0, r3
 800588e:	f004 fabb 	bl	8009e08 <USB_InitFSLSPClkSel>
 8005892:	e00a      	b.n	80058aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d106      	bne.n	80058aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a2:	461a      	mov	r2, r3
 80058a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80058a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f006 ff84 	bl	800c7b8 <HAL_HCD_PortEnabled_Callback>
 80058b0:	e002      	b.n	80058b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f006 ff8e 	bl	800c7d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d103      	bne.n	80058ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058d0:	461a      	mov	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6013      	str	r3, [r2, #0]
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e11f      	b.n	8005b32 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb feba 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005944:	f001 f80e 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8005948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4a7b      	ldr	r2, [pc, #492]	; (8005b3c <HAL_I2C_Init+0x25c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d807      	bhi.n	8005964 <HAL_I2C_Init+0x84>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4a7a      	ldr	r2, [pc, #488]	; (8005b40 <HAL_I2C_Init+0x260>)
 8005958:	4293      	cmp	r3, r2
 800595a:	bf94      	ite	ls
 800595c:	2301      	movls	r3, #1
 800595e:	2300      	movhi	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	e006      	b.n	8005972 <HAL_I2C_Init+0x92>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a77      	ldr	r2, [pc, #476]	; (8005b44 <HAL_I2C_Init+0x264>)
 8005968:	4293      	cmp	r3, r2
 800596a:	bf94      	ite	ls
 800596c:	2301      	movls	r3, #1
 800596e:	2300      	movhi	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0db      	b.n	8005b32 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a72      	ldr	r2, [pc, #456]	; (8005b48 <HAL_I2C_Init+0x268>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0c9b      	lsrs	r3, r3, #18
 8005984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4a64      	ldr	r2, [pc, #400]	; (8005b3c <HAL_I2C_Init+0x25c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d802      	bhi.n	80059b4 <HAL_I2C_Init+0xd4>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	3301      	adds	r3, #1
 80059b2:	e009      	b.n	80059c8 <HAL_I2C_Init+0xe8>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	4a63      	ldr	r2, [pc, #396]	; (8005b4c <HAL_I2C_Init+0x26c>)
 80059c0:	fba2 2303 	umull	r2, r3, r2, r3
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	3301      	adds	r3, #1
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	430b      	orrs	r3, r1
 80059ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4956      	ldr	r1, [pc, #344]	; (8005b3c <HAL_I2C_Init+0x25c>)
 80059e4:	428b      	cmp	r3, r1
 80059e6:	d80d      	bhi.n	8005a04 <HAL_I2C_Init+0x124>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	1e59      	subs	r1, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	bf38      	it	cc
 8005a00:	2304      	movcc	r3, #4
 8005a02:	e04f      	b.n	8005aa4 <HAL_I2C_Init+0x1c4>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d111      	bne.n	8005a30 <HAL_I2C_Init+0x150>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1e58      	subs	r0, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	440b      	add	r3, r1
 8005a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	2301      	moveq	r3, #1
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e012      	b.n	8005a56 <HAL_I2C_Init+0x176>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1e58      	subs	r0, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	0099      	lsls	r1, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <HAL_I2C_Init+0x17e>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e022      	b.n	8005aa4 <HAL_I2C_Init+0x1c4>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10e      	bne.n	8005a84 <HAL_I2C_Init+0x1a4>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1e58      	subs	r0, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6859      	ldr	r1, [r3, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	440b      	add	r3, r1
 8005a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a82:	e00f      	b.n	8005aa4 <HAL_I2C_Init+0x1c4>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	1e58      	subs	r0, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	440b      	add	r3, r1
 8005a92:	0099      	lsls	r1, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	6809      	ldr	r1, [r1, #0]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69da      	ldr	r2, [r3, #28]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6911      	ldr	r1, [r2, #16]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	68d2      	ldr	r2, [r2, #12]
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	000186a0 	.word	0x000186a0
 8005b40:	001e847f 	.word	0x001e847f
 8005b44:	003d08ff 	.word	0x003d08ff
 8005b48:	431bde83 	.word	0x431bde83
 8005b4c:	10624dd3 	.word	0x10624dd3

08005b50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e154      	b.n	8005e0c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a98      	ldr	r2, [pc, #608]	; (8005ddc <HAL_I2S_Init+0x28c>)
 8005b7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fb fdc7 	bl	8001710 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b98:	f023 030f 	bic.w	r3, r3, #15
 8005b9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d06f      	beq.n	8005c8e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005bb6:	2310      	movs	r3, #16
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e001      	b.n	8005bc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d802      	bhi.n	8005bce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a83      	ldr	r2, [pc, #524]	; (8005de0 <HAL_I2S_Init+0x290>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_I2S_Init+0x92>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a81      	ldr	r2, [pc, #516]	; (8005de4 <HAL_I2S_Init+0x294>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d104      	bne.n	8005bec <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005be2:	2001      	movs	r0, #1
 8005be4:	f001 f972 	bl	8006ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	e003      	b.n	8005bf4 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005bec:	2002      	movs	r0, #2
 8005bee:	f001 f96d 	bl	8006ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8005bf2:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bfc:	d125      	bne.n	8005c4a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d010      	beq.n	8005c28 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c22:	3305      	adds	r3, #5
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	e01f      	b.n	8005c68 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	3305      	adds	r3, #5
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	e00e      	b.n	8005c68 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	3305      	adds	r3, #5
 8005c66:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4a5f      	ldr	r2, [pc, #380]	; (8005de8 <HAL_I2S_Init+0x298>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	08db      	lsrs	r3, r3, #3
 8005c72:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	021b      	lsls	r3, r3, #8
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e003      	b.n	8005c96 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d902      	bls.n	8005ca2 <HAL_I2S_Init+0x152>
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	2bff      	cmp	r3, #255	; 0xff
 8005ca0:	d907      	bls.n	8005cb2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	f043 0210 	orr.w	r2, r3, #16
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0ac      	b.n	8005e0c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	ea42 0103 	orr.w	r1, r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005cd0:	f023 030f 	bic.w	r3, r3, #15
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6851      	ldr	r1, [r2, #4]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6892      	ldr	r2, [r2, #8]
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6992      	ldr	r2, [r2, #24]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf4:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b30      	cmp	r3, #48	; 0x30
 8005cfc:	d003      	beq.n	8005d06 <HAL_I2S_Init+0x1b6>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2bb0      	cmp	r3, #176	; 0xb0
 8005d04:	d107      	bne.n	8005d16 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d14:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d16e      	bne.n	8005dfc <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a32      	ldr	r2, [pc, #200]	; (8005dec <HAL_I2S_Init+0x29c>)
 8005d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <HAL_I2S_Init+0x290>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_I2S_Init+0x1e2>
 8005d2e:	4b30      	ldr	r3, [pc, #192]	; (8005df0 <HAL_I2S_Init+0x2a0>)
 8005d30:	e001      	b.n	8005d36 <HAL_I2S_Init+0x1e6>
 8005d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	4928      	ldr	r1, [pc, #160]	; (8005de0 <HAL_I2S_Init+0x290>)
 8005d3e:	428a      	cmp	r2, r1
 8005d40:	d101      	bne.n	8005d46 <HAL_I2S_Init+0x1f6>
 8005d42:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <HAL_I2S_Init+0x2a0>)
 8005d44:	e001      	b.n	8005d4a <HAL_I2S_Init+0x1fa>
 8005d46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005d4a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d4e:	f023 030f 	bic.w	r3, r3, #15
 8005d52:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a21      	ldr	r2, [pc, #132]	; (8005de0 <HAL_I2S_Init+0x290>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_I2S_Init+0x212>
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <HAL_I2S_Init+0x2a0>)
 8005d60:	e001      	b.n	8005d66 <HAL_I2S_Init+0x216>
 8005d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d66:	2202      	movs	r2, #2
 8005d68:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_I2S_Init+0x290>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d101      	bne.n	8005d78 <HAL_I2S_Init+0x228>
 8005d74:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <HAL_I2S_Init+0x2a0>)
 8005d76:	e001      	b.n	8005d7c <HAL_I2S_Init+0x22c>
 8005d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d003      	beq.n	8005d92 <HAL_I2S_Init+0x242>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e001      	b.n	8005d9e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	b299      	uxth	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005db4:	4303      	orrs	r3, r0
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	430b      	orrs	r3, r1
 8005dba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	897b      	ldrh	r3, [r7, #10]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005dca:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a03      	ldr	r2, [pc, #12]	; (8005de0 <HAL_I2S_Init+0x290>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10e      	bne.n	8005df4 <HAL_I2S_Init+0x2a4>
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_I2S_Init+0x2a0>)
 8005dd8:	e00e      	b.n	8005df8 <HAL_I2S_Init+0x2a8>
 8005dda:	bf00      	nop
 8005ddc:	08005ecf 	.word	0x08005ecf
 8005de0:	40003800 	.word	0x40003800
 8005de4:	40003c00 	.word	0x40003c00
 8005de8:	cccccccd 	.word	0xcccccccd
 8005dec:	08005fe5 	.word	0x08005fe5
 8005df0:	40003400 	.word	0x40003400
 8005df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005df8:	897a      	ldrh	r2, [r7, #10]
 8005dfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	881a      	ldrh	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1c9a      	adds	r2, r3, #2
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc fd9c 	bl	80029a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	b292      	uxth	r2, r2
 8005e84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10e      	bne.n	8005ec6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005eb6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fc fd8f 	bl	80029e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d13a      	bne.n	8005f60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d109      	bne.n	8005f08 <I2S_IRQHandler+0x3a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d102      	bne.n	8005f08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff ffb4 	bl	8005e70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d126      	bne.n	8005f60 <I2S_IRQHandler+0x92>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d11f      	bne.n	8005f60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	613b      	str	r3, [r7, #16]
 8005f44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fc fd2a 	bl	80029b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d136      	bne.n	8005fda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d109      	bne.n	8005f8a <I2S_IRQHandler+0xbc>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	d102      	bne.n	8005f8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff ff45 	bl	8005e14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d122      	bne.n	8005fda <I2S_IRQHandler+0x10c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d11b      	bne.n	8005fda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fb0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	f043 0204 	orr.w	r2, r3, #4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fc fced 	bl	80029b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4aa2      	ldr	r2, [pc, #648]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d101      	bne.n	8006002 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ffe:	4ba2      	ldr	r3, [pc, #648]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006000:	e001      	b.n	8006006 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a9b      	ldr	r2, [pc, #620]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d101      	bne.n	8006020 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800601c:	4b9a      	ldr	r3, [pc, #616]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800601e:	e001      	b.n	8006024 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006030:	d004      	beq.n	800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 8099 	bne.w	800616e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d107      	bne.n	8006056 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f925 	bl	80062a0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d107      	bne.n	8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f9c8 	bl	8006400 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d13a      	bne.n	80060f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d035      	beq.n	80060f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a7e      	ldr	r2, [pc, #504]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d101      	bne.n	8006092 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800608e:	4b7e      	ldr	r3, [pc, #504]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006090:	e001      	b.n	8006096 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4979      	ldr	r1, [pc, #484]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800609e:	428b      	cmp	r3, r1
 80060a0:	d101      	bne.n	80060a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80060a2:	4b79      	ldr	r3, [pc, #484]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80060a4:	e001      	b.n	80060aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80060a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e2:	f043 0202 	orr.w	r2, r3, #2
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fc fc62 	bl	80029b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	f040 80be 	bne.w	8006278 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80b8 	beq.w	8006278 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006116:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a59      	ldr	r2, [pc, #356]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006122:	4b59      	ldr	r3, [pc, #356]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006124:	e001      	b.n	800612a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4954      	ldr	r1, [pc, #336]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006132:	428b      	cmp	r3, r1
 8006134:	d101      	bne.n	800613a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006136:	4b54      	ldr	r3, [pc, #336]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006138:	e001      	b.n	800613e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800613a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800613e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006142:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006144:	2300      	movs	r3, #0
 8006146:	60bb      	str	r3, [r7, #8]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615e:	f043 0204 	orr.w	r2, r3, #4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fc fc24 	bl	80029b4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800616c:	e084      	b.n	8006278 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d107      	bne.n	8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8be 	bl	8006304 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b01      	cmp	r3, #1
 8006190:	d107      	bne.n	80061a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8fd 	bl	800639c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d12f      	bne.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d02a      	beq.n	800620c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061c4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2e      	ldr	r2, [pc, #184]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d101      	bne.n	80061d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80061d0:	4b2d      	ldr	r3, [pc, #180]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061d2:	e001      	b.n	80061d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80061d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4929      	ldr	r1, [pc, #164]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80061e0:	428b      	cmp	r3, r1
 80061e2:	d101      	bne.n	80061e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80061e4:	4b28      	ldr	r3, [pc, #160]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80061e6:	e001      	b.n	80061ec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80061e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061f0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fe:	f043 0202 	orr.w	r2, r3, #2
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fc fbd4 	bl	80029b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b08      	cmp	r3, #8
 8006214:	d131      	bne.n	800627a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02c      	beq.n	800627a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a17      	ldr	r2, [pc, #92]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800622c:	e001      	b.n	8006232 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800622e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4912      	ldr	r1, [pc, #72]	; (8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800623a:	428b      	cmp	r3, r1
 800623c:	d101      	bne.n	8006242 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800623e:	4b12      	ldr	r3, [pc, #72]	; (8006288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006240:	e001      	b.n	8006246 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006246:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800624a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800625a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fc fb9f 	bl	80029b4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006276:	e000      	b.n	800627a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006278:	bf00      	nop
}
 800627a:	bf00      	nop
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40003800 	.word	0x40003800
 8006288:	40003400 	.word	0x40003400

0800628c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c99      	adds	r1, r3, #2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6251      	str	r1, [r2, #36]	; 0x24
 80062b2:	881a      	ldrh	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d113      	bne.n	80062fa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff ffc9 	bl	800628c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	1c99      	adds	r1, r3, #2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6251      	str	r1, [r2, #36]	; 0x24
 8006316:	8819      	ldrh	r1, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <I2SEx_TxISR_I2SExt+0x90>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d101      	bne.n	8006326 <I2SEx_TxISR_I2SExt+0x22>
 8006322:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <I2SEx_TxISR_I2SExt+0x94>)
 8006324:	e001      	b.n	800632a <I2SEx_TxISR_I2SExt+0x26>
 8006326:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800632a:	460a      	mov	r2, r1
 800632c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d121      	bne.n	800638a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <I2SEx_TxISR_I2SExt+0x90>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d101      	bne.n	8006354 <I2SEx_TxISR_I2SExt+0x50>
 8006350:	4b11      	ldr	r3, [pc, #68]	; (8006398 <I2SEx_TxISR_I2SExt+0x94>)
 8006352:	e001      	b.n	8006358 <I2SEx_TxISR_I2SExt+0x54>
 8006354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	490d      	ldr	r1, [pc, #52]	; (8006394 <I2SEx_TxISR_I2SExt+0x90>)
 8006360:	428b      	cmp	r3, r1
 8006362:	d101      	bne.n	8006368 <I2SEx_TxISR_I2SExt+0x64>
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <I2SEx_TxISR_I2SExt+0x94>)
 8006366:	e001      	b.n	800636c <I2SEx_TxISR_I2SExt+0x68>
 8006368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800636c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006370:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff ff81 	bl	800628c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40003800 	.word	0x40003800
 8006398:	40003400 	.word	0x40003400

0800639c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68d8      	ldr	r0, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	1c99      	adds	r1, r3, #2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80063b4:	b282      	uxth	r2, r0
 80063b6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d113      	bne.n	80063f8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063de:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff ff4a 	bl	800628c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a20      	ldr	r2, [pc, #128]	; (8006490 <I2SEx_RxISR_I2SExt+0x90>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d101      	bne.n	8006416 <I2SEx_RxISR_I2SExt+0x16>
 8006412:	4b20      	ldr	r3, [pc, #128]	; (8006494 <I2SEx_RxISR_I2SExt+0x94>)
 8006414:	e001      	b.n	800641a <I2SEx_RxISR_I2SExt+0x1a>
 8006416:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800641a:	68d8      	ldr	r0, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	1c99      	adds	r1, r3, #2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006426:	b282      	uxth	r2, r0
 8006428:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d121      	bne.n	8006486 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <I2SEx_RxISR_I2SExt+0x90>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d101      	bne.n	8006450 <I2SEx_RxISR_I2SExt+0x50>
 800644c:	4b11      	ldr	r3, [pc, #68]	; (8006494 <I2SEx_RxISR_I2SExt+0x94>)
 800644e:	e001      	b.n	8006454 <I2SEx_RxISR_I2SExt+0x54>
 8006450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	490d      	ldr	r1, [pc, #52]	; (8006490 <I2SEx_RxISR_I2SExt+0x90>)
 800645c:	428b      	cmp	r3, r1
 800645e:	d101      	bne.n	8006464 <I2SEx_RxISR_I2SExt+0x64>
 8006460:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <I2SEx_RxISR_I2SExt+0x94>)
 8006462:	e001      	b.n	8006468 <I2SEx_RxISR_I2SExt+0x68>
 8006464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006468:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800646c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff ff03 	bl	800628c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40003800 	.word	0x40003800
 8006494:	40003400 	.word	0x40003400

08006498 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af02      	add	r7, sp, #8
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80064a0:	f7fc fcd6 	bl	8002e50 <HAL_GetTick>
 80064a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e069      	b.n	8006584 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fb f9dd 	bl	8001884 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80064ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f85e 	bl	8006590 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	021a      	lsls	r2, r3, #8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	2120      	movs	r1, #32
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f856 	bl	80065ac <QSPI_WaitFlagStateUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d137      	bne.n	800657a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6852      	ldr	r2, [r2, #4]
 800651c:	0611      	lsls	r1, r2, #24
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68d2      	ldr	r2, [r2, #12]
 8006522:	4311      	orrs	r1, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	69d2      	ldr	r2, [r2, #28]
 8006528:	4311      	orrs	r1, r2
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6a12      	ldr	r2, [r2, #32]
 800652e:	4311      	orrs	r1, r2
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	430b      	orrs	r3, r1
 8006536:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <HAL_QSPI_Init+0xf4>)
 8006540:	4013      	ands	r3, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	6912      	ldr	r2, [r2, #16]
 8006546:	0411      	lsls	r1, r2, #16
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6952      	ldr	r2, [r2, #20]
 800654c:	4311      	orrs	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6992      	ldr	r2, [r2, #24]
 8006552:	4311      	orrs	r1, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	430b      	orrs	r3, r1
 800655a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006582:	7afb      	ldrb	r3, [r7, #11]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	ffe0f8fe 	.word	0xffe0f8fe

08006590 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	649a      	str	r2, [r3, #72]	; 0x48
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80065bc:	e01a      	b.n	80065f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d016      	beq.n	80065f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c6:	f7fc fc43 	bl	8002e50 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2204      	movs	r2, #4
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e8:	f043 0201 	orr.w	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e00e      	b.n	8006612 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	429a      	cmp	r2, r3
 800660e:	d1d6      	bne.n	80065be <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e0cc      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006630:	4b68      	ldr	r3, [pc, #416]	; (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d90c      	bls.n	8006658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663e:	4b65      	ldr	r3, [pc, #404]	; (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0b8      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d020      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006670:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4a58      	ldr	r2, [pc, #352]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800667a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006688:	4b53      	ldr	r3, [pc, #332]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4a52      	ldr	r2, [pc, #328]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	494d      	ldr	r1, [pc, #308]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d044      	beq.n	800673c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d107      	bne.n	80066ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d119      	bne.n	80066fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e07f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d003      	beq.n	80066da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d107      	bne.n	80066ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066da:	4b3f      	ldr	r3, [pc, #252]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e06f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ea:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d101      	bne.n	80066fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e067      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066fa:	4b37      	ldr	r3, [pc, #220]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f023 0203 	bic.w	r2, r3, #3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	4934      	ldr	r1, [pc, #208]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006708:	4313      	orrs	r3, r2
 800670a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800670c:	f7fc fba0 	bl	8002e50 <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006712:	e00a      	b.n	800672a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006714:	f7fc fb9c 	bl	8002e50 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006722:	4293      	cmp	r3, r2
 8006724:	d901      	bls.n	800672a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e04f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800672a:	4b2b      	ldr	r3, [pc, #172]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 020c 	and.w	r2, r3, #12
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	429a      	cmp	r2, r3
 800673a:	d1eb      	bne.n	8006714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800673c:	4b25      	ldr	r3, [pc, #148]	; (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 030f 	and.w	r3, r3, #15
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d20c      	bcs.n	8006764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	4b22      	ldr	r3, [pc, #136]	; (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e032      	b.n	80067ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4916      	ldr	r1, [pc, #88]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	490e      	ldr	r1, [pc, #56]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067a2:	f000 f821 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 80067a6:	4601      	mov	r1, r0
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	4a0a      	ldr	r2, [pc, #40]	; (80067dc <HAL_RCC_ClockConfig+0x1c0>)
 80067b4:	5cd3      	ldrb	r3, [r2, r3]
 80067b6:	fa21 f303 	lsr.w	r3, r1, r3
 80067ba:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <HAL_RCC_ClockConfig+0x1c4>)
 80067bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_RCC_ClockConfig+0x1c8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fc fb00 	bl	8002dc8 <HAL_InitTick>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023c00 	.word	0x40023c00
 80067d8:	40023800 	.word	0x40023800
 80067dc:	0800cdec 	.word	0x0800cdec
 80067e0:	20000008 	.word	0x20000008
 80067e4:	20000058 	.word	0x20000058

080067e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	607b      	str	r3, [r7, #4]
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	2300      	movs	r3, #0
 80067f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067fe:	4b50      	ldr	r3, [pc, #320]	; (8006940 <HAL_RCC_GetSysClockFreq+0x158>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b04      	cmp	r3, #4
 8006808:	d007      	beq.n	800681a <HAL_RCC_GetSysClockFreq+0x32>
 800680a:	2b08      	cmp	r3, #8
 800680c:	d008      	beq.n	8006820 <HAL_RCC_GetSysClockFreq+0x38>
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 808d 	bne.w	800692e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006814:	4b4b      	ldr	r3, [pc, #300]	; (8006944 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006816:	60bb      	str	r3, [r7, #8]
       break;
 8006818:	e08c      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800681a:	4b4b      	ldr	r3, [pc, #300]	; (8006948 <HAL_RCC_GetSysClockFreq+0x160>)
 800681c:	60bb      	str	r3, [r7, #8]
      break;
 800681e:	e089      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006820:	4b47      	ldr	r3, [pc, #284]	; (8006940 <HAL_RCC_GetSysClockFreq+0x158>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006828:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800682a:	4b45      	ldr	r3, [pc, #276]	; (8006940 <HAL_RCC_GetSysClockFreq+0x158>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d023      	beq.n	800687e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006836:	4b42      	ldr	r3, [pc, #264]	; (8006940 <HAL_RCC_GetSysClockFreq+0x158>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	099b      	lsrs	r3, r3, #6
 800683c:	f04f 0400 	mov.w	r4, #0
 8006840:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006844:	f04f 0200 	mov.w	r2, #0
 8006848:	ea03 0501 	and.w	r5, r3, r1
 800684c:	ea04 0602 	and.w	r6, r4, r2
 8006850:	4a3d      	ldr	r2, [pc, #244]	; (8006948 <HAL_RCC_GetSysClockFreq+0x160>)
 8006852:	fb02 f106 	mul.w	r1, r2, r6
 8006856:	2200      	movs	r2, #0
 8006858:	fb02 f205 	mul.w	r2, r2, r5
 800685c:	440a      	add	r2, r1
 800685e:	493a      	ldr	r1, [pc, #232]	; (8006948 <HAL_RCC_GetSysClockFreq+0x160>)
 8006860:	fba5 0101 	umull	r0, r1, r5, r1
 8006864:	1853      	adds	r3, r2, r1
 8006866:	4619      	mov	r1, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f04f 0400 	mov.w	r4, #0
 800686e:	461a      	mov	r2, r3
 8006870:	4623      	mov	r3, r4
 8006872:	f7f9 fcd1 	bl	8000218 <__aeabi_uldivmod>
 8006876:	4603      	mov	r3, r0
 8006878:	460c      	mov	r4, r1
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	e049      	b.n	8006912 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800687e:	4b30      	ldr	r3, [pc, #192]	; (8006940 <HAL_RCC_GetSysClockFreq+0x158>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	099b      	lsrs	r3, r3, #6
 8006884:	f04f 0400 	mov.w	r4, #0
 8006888:	f240 11ff 	movw	r1, #511	; 0x1ff
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	ea03 0501 	and.w	r5, r3, r1
 8006894:	ea04 0602 	and.w	r6, r4, r2
 8006898:	4629      	mov	r1, r5
 800689a:	4632      	mov	r2, r6
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	f04f 0400 	mov.w	r4, #0
 80068a4:	0154      	lsls	r4, r2, #5
 80068a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068aa:	014b      	lsls	r3, r1, #5
 80068ac:	4619      	mov	r1, r3
 80068ae:	4622      	mov	r2, r4
 80068b0:	1b49      	subs	r1, r1, r5
 80068b2:	eb62 0206 	sbc.w	r2, r2, r6
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	f04f 0400 	mov.w	r4, #0
 80068be:	0194      	lsls	r4, r2, #6
 80068c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80068c4:	018b      	lsls	r3, r1, #6
 80068c6:	1a5b      	subs	r3, r3, r1
 80068c8:	eb64 0402 	sbc.w	r4, r4, r2
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	00e2      	lsls	r2, r4, #3
 80068d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80068da:	00d9      	lsls	r1, r3, #3
 80068dc:	460b      	mov	r3, r1
 80068de:	4614      	mov	r4, r2
 80068e0:	195b      	adds	r3, r3, r5
 80068e2:	eb44 0406 	adc.w	r4, r4, r6
 80068e6:	f04f 0100 	mov.w	r1, #0
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	02a2      	lsls	r2, r4, #10
 80068f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80068f4:	0299      	lsls	r1, r3, #10
 80068f6:	460b      	mov	r3, r1
 80068f8:	4614      	mov	r4, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	4621      	mov	r1, r4
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f04f 0400 	mov.w	r4, #0
 8006904:	461a      	mov	r2, r3
 8006906:	4623      	mov	r3, r4
 8006908:	f7f9 fc86 	bl	8000218 <__aeabi_uldivmod>
 800690c:	4603      	mov	r3, r0
 800690e:	460c      	mov	r4, r1
 8006910:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <HAL_RCC_GetSysClockFreq+0x158>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	3301      	adds	r3, #1
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	fbb2 f3f3 	udiv	r3, r2, r3
 800692a:	60bb      	str	r3, [r7, #8]
      break;
 800692c:	e002      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006930:	60bb      	str	r3, [r7, #8]
      break;
 8006932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006934:	68bb      	ldr	r3, [r7, #8]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800
 8006944:	00f42400 	.word	0x00f42400
 8006948:	017d7840 	.word	0x017d7840

0800694c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006950:	4b03      	ldr	r3, [pc, #12]	; (8006960 <HAL_RCC_GetHCLKFreq+0x14>)
 8006952:	681b      	ldr	r3, [r3, #0]
}
 8006954:	4618      	mov	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000008 	.word	0x20000008

08006964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006968:	f7ff fff0 	bl	800694c <HAL_RCC_GetHCLKFreq>
 800696c:	4601      	mov	r1, r0
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	0a9b      	lsrs	r3, r3, #10
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	4a03      	ldr	r2, [pc, #12]	; (8006988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800697a:	5cd3      	ldrb	r3, [r2, r3]
 800697c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006980:	4618      	mov	r0, r3
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40023800 	.word	0x40023800
 8006988:	0800cdfc 	.word	0x0800cdfc

0800698c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006990:	f7ff ffdc 	bl	800694c <HAL_RCC_GetHCLKFreq>
 8006994:	4601      	mov	r1, r0
 8006996:	4b05      	ldr	r3, [pc, #20]	; (80069ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	0b5b      	lsrs	r3, r3, #13
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	4a03      	ldr	r2, [pc, #12]	; (80069b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069a2:	5cd3      	ldrb	r3, [r2, r3]
 80069a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40023800 	.word	0x40023800
 80069b0:	0800cdfc 	.word	0x0800cdfc

080069b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d010      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80069d8:	4b7a      	ldr	r3, [pc, #488]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069de:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	4977      	ldr	r1, [pc, #476]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80069f6:	2301      	movs	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d010      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006a06:	4b6f      	ldr	r3, [pc, #444]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a0c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	496b      	ldr	r1, [pc, #428]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006a24:	2301      	movs	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d022      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006a34:	4b63      	ldr	r3, [pc, #396]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a42:	4960      	ldr	r1, [pc, #384]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006a52:	2301      	movs	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a5e:	d10c      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006a60:	4b58      	ldr	r3, [pc, #352]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	4954      	ldr	r1, [pc, #336]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d022      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006a86:	4b4f      	ldr	r3, [pc, #316]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a94:	494b      	ldr	r1, [pc, #300]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ab0:	d10c      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006ab2:	4b44      	ldr	r3, [pc, #272]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	493f      	ldr	r1, [pc, #252]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 808a 	beq.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	4b39      	ldr	r3, [pc, #228]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	4a38      	ldr	r2, [pc, #224]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aea:	4b36      	ldr	r3, [pc, #216]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006af6:	4b34      	ldr	r3, [pc, #208]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a33      	ldr	r2, [pc, #204]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b02:	f7fc f9a5 	bl	8002e50 <HAL_GetTick>
 8006b06:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b08:	e008      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b0a:	f7fc f9a1 	bl	8002e50 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e1d1      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b1c:	4b2a      	ldr	r3, [pc, #168]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f0      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b28:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b30:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02f      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d028      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b46:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b50:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006b52:	2201      	movs	r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b5c:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b62:	4b18      	ldr	r3, [pc, #96]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d114      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b6e:	f7fc f96f 	bl	8002e50 <HAL_GetTick>
 8006b72:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b74:	e00a      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b76:	f7fc f96b 	bl	8002e50 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e199      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0ee      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba4:	d114      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bba:	4902      	ldr	r1, [pc, #8]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]
 8006bc0:	e00c      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006bc2:	bf00      	nop
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	40007000 	.word	0x40007000
 8006bcc:	42470e40 	.word	0x42470e40
 8006bd0:	4b89      	ldr	r3, [pc, #548]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4a88      	ldr	r2, [pc, #544]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bda:	6093      	str	r3, [r2, #8]
 8006bdc:	4b86      	ldr	r3, [pc, #536]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be8:	4983      	ldr	r1, [pc, #524]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006c00:	4b7e      	ldr	r3, [pc, #504]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006c02:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006c10:	4b79      	ldr	r3, [pc, #484]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	4976      	ldr	r1, [pc, #472]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d011      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c32:	4b71      	ldr	r3, [pc, #452]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	496d      	ldr	r1, [pc, #436]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c50:	d101      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006c52:	2301      	movs	r3, #1
 8006c54:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c62:	4b65      	ldr	r3, [pc, #404]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c68:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c70:	4961      	ldr	r1, [pc, #388]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d004      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b80      	cmp	r3, #128	; 0x80
 8006c84:	f040 80c6 	bne.w	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c88:	4b5d      	ldr	r3, [pc, #372]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c8e:	f7fc f8df 	bl	8002e50 <HAL_GetTick>
 8006c92:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c94:	e008      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c96:	f7fc f8db 	bl	8002e50 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d901      	bls.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e10b      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ca8:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1f0      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006cb4:	4a53      	ldr	r2, [pc, #332]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d023      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d019      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf8:	d00e      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d019      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d115      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d16:	d110      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	019b      	lsls	r3, r3, #6
 8006d22:	431a      	orrs	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	061b      	lsls	r3, r3, #24
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	071b      	lsls	r3, r3, #28
 8006d32:	4931      	ldr	r1, [pc, #196]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d026      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d122      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d62:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d68:	0e1b      	lsrs	r3, r3, #24
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	019b      	lsls	r3, r3, #6
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	061b      	lsls	r3, r3, #24
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	071b      	lsls	r3, r3, #28
 8006d88:	491b      	ldr	r1, [pc, #108]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d96:	f023 021f 	bic.w	r2, r3, #31
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	4915      	ldr	r1, [pc, #84]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d010      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	019b      	lsls	r3, r3, #6
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	061b      	lsls	r3, r3, #24
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	071b      	lsls	r3, r3, #28
 8006dce:	490a      	ldr	r1, [pc, #40]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ddc:	f7fc f838 	bl	8002e50 <HAL_GetTick>
 8006de0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006de2:	e011      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006de4:	f7fc f834 	bl	8002e50 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d90a      	bls.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e064      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006df6:	bf00      	nop
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	424711e0 	.word	0x424711e0
 8006e00:	42470068 	.word	0x42470068
 8006e04:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e08:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0e7      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e20:	4b29      	ldr	r3, [pc, #164]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	4926      	ldr	r1, [pc, #152]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006e42:	4b21      	ldr	r3, [pc, #132]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e48:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	491d      	ldr	r1, [pc, #116]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006e64:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e72:	4915      	ldr	r1, [pc, #84]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e8c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	490c      	ldr	r1, [pc, #48]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ea8:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb6:	4904      	ldr	r1, [pc, #16]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40023800 	.word	0x40023800

08006ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d003      	beq.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	f000 8098 	beq.w	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006ef0:	e12d      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8006ef2:	4b9a      	ldr	r3, [pc, #616]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ef8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8006efc:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f04:	d00c      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8006f06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f0a:	d802      	bhi.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8006f10:	e082      	b.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006f12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f16:	d047      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006f18:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006f1c:	d06f      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8006f1e:	e07b      	b.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f20:	4b8f      	ldr	r3, [pc, #572]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f22:	617b      	str	r3, [r7, #20]
          break;
 8006f24:	e07b      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8006f26:	4b8d      	ldr	r3, [pc, #564]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f34:	d109      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f36:	4b89      	ldr	r3, [pc, #548]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f40:	4a87      	ldr	r2, [pc, #540]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	e019      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f4a:	4b84      	ldr	r3, [pc, #528]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f56:	d109      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f58:	4b80      	ldr	r3, [pc, #512]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f62:	4a80      	ldr	r2, [pc, #512]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e008      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006f6c:	4b7b      	ldr	r3, [pc, #492]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f76:	4a7c      	ldr	r2, [pc, #496]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f7e:	4b77      	ldr	r3, [pc, #476]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f84:	099b      	lsrs	r3, r3, #6
 8006f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	fb02 f303 	mul.w	r3, r2, r3
 8006f90:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f92:	4b72      	ldr	r3, [pc, #456]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f98:	0f1b      	lsrs	r3, r3, #28
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa4:	617b      	str	r3, [r7, #20]
          break;
 8006fa6:	e03a      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006fa8:	4b6c      	ldr	r3, [pc, #432]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fb4:	d108      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fb6:	4b69      	ldr	r3, [pc, #420]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fbe:	4a69      	ldr	r2, [pc, #420]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	e007      	b.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006fc8:	4b64      	ldr	r3, [pc, #400]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fd0:	4a65      	ldr	r2, [pc, #404]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd6:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8006fd8:	4b60      	ldr	r3, [pc, #384]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	099b      	lsrs	r3, r3, #6
 8006fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	fb02 f303 	mul.w	r3, r2, r3
 8006fe8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8006fea:	4b5c      	ldr	r3, [pc, #368]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	0f1b      	lsrs	r3, r3, #28
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffa:	617b      	str	r3, [r7, #20]
          break;
 8006ffc:	e00f      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ffe:	4b57      	ldr	r3, [pc, #348]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800700a:	d102      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800700c:	4b55      	ldr	r3, [pc, #340]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800700e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007010:	e005      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007012:	4b55      	ldr	r3, [pc, #340]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007014:	617b      	str	r3, [r7, #20]
          break;
 8007016:	e002      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
          break;
 800701c:	bf00      	nop
        }
      }
      break;
 800701e:	e096      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007020:	4b4e      	ldr	r3, [pc, #312]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007026:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800702a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007032:	d00c      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007038:	d802      	bhi.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800703e:	e082      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007044:	d047      	beq.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007046:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800704a:	d06f      	beq.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800704c:	e07b      	b.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800704e:	4b44      	ldr	r3, [pc, #272]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007050:	617b      	str	r3, [r7, #20]
          break;
 8007052:	e07b      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007054:	4b41      	ldr	r3, [pc, #260]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007062:	d109      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007064:	4b3d      	ldr	r3, [pc, #244]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800706a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800706e:	4a3c      	ldr	r2, [pc, #240]	; (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	e019      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007078:	4b38      	ldr	r3, [pc, #224]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007084:	d109      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007086:	4b35      	ldr	r3, [pc, #212]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800708c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007090:	4a34      	ldr	r2, [pc, #208]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007092:	fbb2 f3f3 	udiv	r3, r2, r3
 8007096:	613b      	str	r3, [r7, #16]
 8007098:	e008      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800709a:	4b30      	ldr	r3, [pc, #192]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800709c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a4:	4a30      	ldr	r2, [pc, #192]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070ac:	4b2b      	ldr	r3, [pc, #172]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b2:	099b      	lsrs	r3, r3, #6
 80070b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070c0:	4b26      	ldr	r3, [pc, #152]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c6:	0f1b      	lsrs	r3, r3, #28
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d2:	617b      	str	r3, [r7, #20]
          break;
 80070d4:	e03a      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070d6:	4b21      	ldr	r3, [pc, #132]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070e2:	d108      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070e4:	4b1d      	ldr	r3, [pc, #116]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ec:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	e007      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070f6:	4b19      	ldr	r3, [pc, #100]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070fe:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	099b      	lsrs	r3, r3, #6
 800710c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	0f1b      	lsrs	r3, r3, #28
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	617b      	str	r3, [r7, #20]
          break;
 800712a:	e00f      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007138:	d102      	bne.n	8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800713c:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800713e:	e005      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8007140:	4b09      	ldr	r3, [pc, #36]	; (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007142:	617b      	str	r3, [r7, #20]
          break;
 8007144:	e002      	b.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]
          break;
 800714a:	bf00      	nop
        }
      }
      break;
 800714c:	bf00      	nop
    }
  }
  return frequency;
 800714e:	697b      	ldr	r3, [r7, #20]
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40023800 	.word	0x40023800
 8007160:	00bb8000 	.word	0x00bb8000
 8007164:	017d7840 	.word	0x017d7840
 8007168:	00f42400 	.word	0x00f42400

0800716c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d075      	beq.n	8007270 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007184:	4ba2      	ldr	r3, [pc, #648]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 030c 	and.w	r3, r3, #12
 800718c:	2b04      	cmp	r3, #4
 800718e:	d00c      	beq.n	80071aa <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007190:	4b9f      	ldr	r3, [pc, #636]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007198:	2b08      	cmp	r3, #8
 800719a:	d112      	bne.n	80071c2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800719c:	4b9c      	ldr	r3, [pc, #624]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071a8:	d10b      	bne.n	80071c2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071aa:	4b99      	ldr	r3, [pc, #612]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d05b      	beq.n	800726e <HAL_RCC_OscConfig+0x102>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d157      	bne.n	800726e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e20b      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ca:	d106      	bne.n	80071da <HAL_RCC_OscConfig+0x6e>
 80071cc:	4b90      	ldr	r3, [pc, #576]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a8f      	ldr	r2, [pc, #572]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e01d      	b.n	8007216 <HAL_RCC_OscConfig+0xaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e2:	d10c      	bne.n	80071fe <HAL_RCC_OscConfig+0x92>
 80071e4:	4b8a      	ldr	r3, [pc, #552]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a89      	ldr	r2, [pc, #548]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	4b87      	ldr	r3, [pc, #540]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a86      	ldr	r2, [pc, #536]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80071f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e00b      	b.n	8007216 <HAL_RCC_OscConfig+0xaa>
 80071fe:	4b84      	ldr	r3, [pc, #528]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a83      	ldr	r2, [pc, #524]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	4b81      	ldr	r3, [pc, #516]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a80      	ldr	r2, [pc, #512]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007214:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d013      	beq.n	8007246 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721e:	f7fb fe17 	bl	8002e50 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007226:	f7fb fe13 	bl	8002e50 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b64      	cmp	r3, #100	; 0x64
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e1d0      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007238:	4b75      	ldr	r3, [pc, #468]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0xba>
 8007244:	e014      	b.n	8007270 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fb fe03 	bl	8002e50 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800724e:	f7fb fdff 	bl	8002e50 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b64      	cmp	r3, #100	; 0x64
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e1bc      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007260:	4b6b      	ldr	r3, [pc, #428]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f0      	bne.n	800724e <HAL_RCC_OscConfig+0xe2>
 800726c:	e000      	b.n	8007270 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800726e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d063      	beq.n	8007344 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800727c:	4b64      	ldr	r3, [pc, #400]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 030c 	and.w	r3, r3, #12
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007288:	4b61      	ldr	r3, [pc, #388]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007290:	2b08      	cmp	r3, #8
 8007292:	d11c      	bne.n	80072ce <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007294:	4b5e      	ldr	r3, [pc, #376]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d116      	bne.n	80072ce <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072a0:	4b5b      	ldr	r3, [pc, #364]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <HAL_RCC_OscConfig+0x14c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e190      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b8:	4b55      	ldr	r3, [pc, #340]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4952      	ldr	r1, [pc, #328]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072cc:	e03a      	b.n	8007344 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d020      	beq.n	8007318 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d6:	4b4f      	ldr	r3, [pc, #316]	; (8007414 <HAL_RCC_OscConfig+0x2a8>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072dc:	f7fb fdb8 	bl	8002e50 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072e4:	f7fb fdb4 	bl	8002e50 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e171      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f6:	4b46      	ldr	r3, [pc, #280]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007302:	4b43      	ldr	r3, [pc, #268]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	493f      	ldr	r1, [pc, #252]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
 8007316:	e015      	b.n	8007344 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007318:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <HAL_RCC_OscConfig+0x2a8>)
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731e:	f7fb fd97 	bl	8002e50 <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007324:	e008      	b.n	8007338 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007326:	f7fb fd93 	bl	8002e50 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e150      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007338:	4b35      	ldr	r3, [pc, #212]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1f0      	bne.n	8007326 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b00      	cmp	r3, #0
 800734e:	d030      	beq.n	80073b2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d016      	beq.n	8007386 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007358:	4b2f      	ldr	r3, [pc, #188]	; (8007418 <HAL_RCC_OscConfig+0x2ac>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800735e:	f7fb fd77 	bl	8002e50 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007366:	f7fb fd73 	bl	8002e50 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e130      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007378:	4b25      	ldr	r3, [pc, #148]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0x1fa>
 8007384:	e015      	b.n	80073b2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <HAL_RCC_OscConfig+0x2ac>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738c:	f7fb fd60 	bl	8002e50 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007394:	f7fb fd5c 	bl	8002e50 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e119      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073a6:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80073a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 809f 	beq.w	80074fe <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c0:	2300      	movs	r3, #0
 80073c2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c4:	4b12      	ldr	r3, [pc, #72]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10f      	bne.n	80073f0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	4a0d      	ldr	r2, [pc, #52]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80073da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073de:	6413      	str	r3, [r2, #64]	; 0x40
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_RCC_OscConfig+0x2a4>)
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <HAL_RCC_OscConfig+0x2b0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d120      	bne.n	800743e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <HAL_RCC_OscConfig+0x2b0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a06      	ldr	r2, [pc, #24]	; (800741c <HAL_RCC_OscConfig+0x2b0>)
 8007402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007408:	f7fb fd22 	bl	8002e50 <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740e:	e010      	b.n	8007432 <HAL_RCC_OscConfig+0x2c6>
 8007410:	40023800 	.word	0x40023800
 8007414:	42470000 	.word	0x42470000
 8007418:	42470e80 	.word	0x42470e80
 800741c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007420:	f7fb fd16 	bl	8002e50 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e0d3      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007432:	4b6c      	ldr	r3, [pc, #432]	; (80075e4 <HAL_RCC_OscConfig+0x478>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d106      	bne.n	8007454 <HAL_RCC_OscConfig+0x2e8>
 8007446:	4b68      	ldr	r3, [pc, #416]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	4a67      	ldr	r2, [pc, #412]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	6713      	str	r3, [r2, #112]	; 0x70
 8007452:	e01c      	b.n	800748e <HAL_RCC_OscConfig+0x322>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b05      	cmp	r3, #5
 800745a:	d10c      	bne.n	8007476 <HAL_RCC_OscConfig+0x30a>
 800745c:	4b62      	ldr	r3, [pc, #392]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	4a61      	ldr	r2, [pc, #388]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007462:	f043 0304 	orr.w	r3, r3, #4
 8007466:	6713      	str	r3, [r2, #112]	; 0x70
 8007468:	4b5f      	ldr	r3, [pc, #380]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800746a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746c:	4a5e      	ldr	r2, [pc, #376]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	6713      	str	r3, [r2, #112]	; 0x70
 8007474:	e00b      	b.n	800748e <HAL_RCC_OscConfig+0x322>
 8007476:	4b5c      	ldr	r3, [pc, #368]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	4a5b      	ldr	r2, [pc, #364]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800747c:	f023 0301 	bic.w	r3, r3, #1
 8007480:	6713      	str	r3, [r2, #112]	; 0x70
 8007482:	4b59      	ldr	r3, [pc, #356]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	4a58      	ldr	r2, [pc, #352]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007488:	f023 0304 	bic.w	r3, r3, #4
 800748c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d015      	beq.n	80074c2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fb fcdb 	bl	8002e50 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fb fcd7 	bl	8002e50 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e092      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b4:	4b4c      	ldr	r3, [pc, #304]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ee      	beq.n	800749e <HAL_RCC_OscConfig+0x332>
 80074c0:	e014      	b.n	80074ec <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c2:	f7fb fcc5 	bl	8002e50 <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ca:	f7fb fcc1 	bl	8002e50 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d8:	4293      	cmp	r3, r2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e07c      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074e0:	4b41      	ldr	r3, [pc, #260]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 80074e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1ee      	bne.n	80074ca <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d105      	bne.n	80074fe <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f2:	4b3d      	ldr	r3, [pc, #244]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	4a3c      	ldr	r2, [pc, #240]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 80074f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d068      	beq.n	80075d8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007506:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
 800750e:	2b08      	cmp	r3, #8
 8007510:	d060      	beq.n	80075d4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d145      	bne.n	80075a6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800751a:	4b34      	ldr	r3, [pc, #208]	; (80075ec <HAL_RCC_OscConfig+0x480>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fb fc96 	bl	8002e50 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007528:	f7fb fc92 	bl	8002e50 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e04f      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753a:	4b2b      	ldr	r3, [pc, #172]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	69da      	ldr	r2, [r3, #28]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	019b      	lsls	r3, r3, #6
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	3b01      	subs	r3, #1
 8007560:	041b      	lsls	r3, r3, #16
 8007562:	431a      	orrs	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	061b      	lsls	r3, r3, #24
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	071b      	lsls	r3, r3, #28
 8007572:	491d      	ldr	r1, [pc, #116]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007578:	4b1c      	ldr	r3, [pc, #112]	; (80075ec <HAL_RCC_OscConfig+0x480>)
 800757a:	2201      	movs	r2, #1
 800757c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757e:	f7fb fc67 	bl	8002e50 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007586:	f7fb fc63 	bl	8002e50 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e020      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007598:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <HAL_RCC_OscConfig+0x41a>
 80075a4:	e018      	b.n	80075d8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a6:	4b11      	ldr	r3, [pc, #68]	; (80075ec <HAL_RCC_OscConfig+0x480>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ac:	f7fb fc50 	bl	8002e50 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075b4:	f7fb fc4c 	bl	8002e50 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e009      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c6:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <HAL_RCC_OscConfig+0x47c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f0      	bne.n	80075b4 <HAL_RCC_OscConfig+0x448>
 80075d2:	e001      	b.n	80075d8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40007000 	.word	0x40007000
 80075e8:	40023800 	.word	0x40023800
 80075ec:	42470060 	.word	0x42470060

080075f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e022      	b.n	8007648 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7fa f9ff 	bl	8001a18 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2203      	movs	r2, #3
 800761e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f814 	bl	8007650 <HAL_SD_InitCard>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e00a      	b.n	8007648 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007650:	b5b0      	push	{r4, r5, r7, lr}
 8007652:	b08e      	sub	sp, #56	; 0x38
 8007654:	af04      	add	r7, sp, #16
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007658:	2300      	movs	r3, #0
 800765a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007660:	2300      	movs	r3, #0
 8007662:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800766c:	2376      	movs	r3, #118	; 0x76
 800766e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681d      	ldr	r5, [r3, #0]
 8007674:	466c      	mov	r4, sp
 8007676:	f107 0314 	add.w	r3, r7, #20
 800767a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800767e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007682:	f107 0308 	add.w	r3, r7, #8
 8007686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007688:	4628      	mov	r0, r5
 800768a:	f001 fcd5 	bl	8009038 <SDIO_Init>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e031      	b.n	8007704 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80076a0:	4b1a      	ldr	r3, [pc, #104]	; (800770c <HAL_SD_InitCard+0xbc>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 fcfc 	bl	80090a8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80076b0:	4b16      	ldr	r3, [pc, #88]	; (800770c <HAL_SD_InitCard+0xbc>)
 80076b2:	2201      	movs	r2, #1
 80076b4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb18 	bl	8007cec <SD_PowerON>
 80076bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e013      	b.n	8007704 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa37 	bl	8007b50 <SD_InitCard>
 80076e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3728      	adds	r7, #40	; 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bdb0      	pop	{r4, r5, r7, pc}
 800770c:	422580a0 	.word	0x422580a0

08007710 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800771e:	0f9b      	lsrs	r3, r3, #30
 8007720:	b2da      	uxtb	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772a:	0e9b      	lsrs	r3, r3, #26
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	b2da      	uxtb	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800773c:	0e1b      	lsrs	r3, r3, #24
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	b2da      	uxtb	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	b2da      	uxtb	r2, r3
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	b2da      	uxtb	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007766:	b2da      	uxtb	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	b29a      	uxth	r2, r3
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800777c:	0c1b      	lsrs	r3, r3, #16
 800777e:	b2db      	uxtb	r3, r3
 8007780:	f003 030f 	and.w	r3, r3, #15
 8007784:	b2da      	uxtb	r2, r3
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778e:	0bdb      	lsrs	r3, r3, #15
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a0:	0b9b      	lsrs	r3, r3, #14
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b2:	0b5b      	lsrs	r3, r3, #13
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c4:	0b1b      	lsrs	r3, r3, #12
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2200      	movs	r2, #0
 80077d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d163      	bne.n	80078a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e4:	009a      	lsls	r2, r3, #2
 80077e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80077ea:	4013      	ands	r3, r2
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80077f0:	0f92      	lsrs	r2, r2, #30
 80077f2:	431a      	orrs	r2, r3
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fc:	0edb      	lsrs	r3, r3, #27
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	b2da      	uxtb	r2, r3
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780e:	0e1b      	lsrs	r3, r3, #24
 8007810:	b2db      	uxtb	r3, r3
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	b2da      	uxtb	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007820:	0d5b      	lsrs	r3, r3, #21
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	b2da      	uxtb	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007832:	0c9b      	lsrs	r3, r3, #18
 8007834:	b2db      	uxtb	r3, r3
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	b2da      	uxtb	r2, r3
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007844:	0bdb      	lsrs	r3, r3, #15
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	b2da      	uxtb	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	7e1b      	ldrb	r3, [r3, #24]
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	3302      	adds	r3, #2
 8007868:	2201      	movs	r2, #1
 800786a:	fa02 f303 	lsl.w	r3, r2, r3
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007872:	fb02 f203 	mul.w	r2, r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	7a1b      	ldrb	r3, [r3, #8]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 030f 	and.w	r3, r3, #15
 8007884:	2201      	movs	r2, #1
 8007886:	409a      	lsls	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007894:	0a52      	lsrs	r2, r2, #9
 8007896:	fb02 f203 	mul.w	r2, r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a4:	661a      	str	r2, [r3, #96]	; 0x60
 80078a6:	e031      	b.n	800790c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d11d      	bne.n	80078ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078be:	0c1b      	lsrs	r3, r3, #16
 80078c0:	431a      	orrs	r2, r3
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	3301      	adds	r3, #1
 80078cc:	029a      	lsls	r2, r3, #10
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	661a      	str	r2, [r3, #96]	; 0x60
 80078ea:	e00f      	b.n	800790c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a58      	ldr	r2, [pc, #352]	; (8007a54 <HAL_SD_GetCardCSD+0x344>)
 80078f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e09d      	b.n	8007a48 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007910:	0b9b      	lsrs	r3, r3, #14
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	b2da      	uxtb	r2, r3
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007922:	09db      	lsrs	r3, r3, #7
 8007924:	b2db      	uxtb	r3, r3
 8007926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792a:	b2da      	uxtb	r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007934:	b2db      	uxtb	r3, r3
 8007936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793a:	b2da      	uxtb	r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	0fdb      	lsrs	r3, r3, #31
 8007946:	b2da      	uxtb	r2, r3
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	0f5b      	lsrs	r3, r3, #29
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	b2da      	uxtb	r2, r3
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	0e9b      	lsrs	r3, r3, #26
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	b2da      	uxtb	r2, r3
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	0d9b      	lsrs	r3, r3, #22
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	b2da      	uxtb	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	0d5b      	lsrs	r3, r3, #21
 8007988:	b2db      	uxtb	r3, r3
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	b2da      	uxtb	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	0c1b      	lsrs	r3, r3, #16
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	0bdb      	lsrs	r3, r3, #15
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	0b9b      	lsrs	r3, r3, #14
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	0b5b      	lsrs	r3, r3, #13
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	0b1b      	lsrs	r3, r3, #12
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	0a9b      	lsrs	r3, r3, #10
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	004005ff 	.word	0x004005ff

08007a58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a58:	b5b0      	push	{r4, r5, r7, lr}
 8007a5a:	b08e      	sub	sp, #56	; 0x38
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2203      	movs	r2, #3
 8007a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d02e      	beq.n	8007ad0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a78:	d106      	bne.n	8007a88 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	639a      	str	r2, [r3, #56]	; 0x38
 8007a86:	e029      	b.n	8007adc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8e:	d10a      	bne.n	8007aa6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9b9 	bl	8007e08 <SD_WideBus_Enable>
 8007a96:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	639a      	str	r2, [r3, #56]	; 0x38
 8007aa4:	e01a      	b.n	8007adc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9f6 	bl	8007e9e <SD_WideBus_Disable>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
 8007ac0:	e00c      	b.n	8007adc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
 8007ace:	e005      	b.n	8007adc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d009      	beq.n	8007af8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a18      	ldr	r2, [pc, #96]	; (8007b4c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e024      	b.n	8007b42 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	466c      	mov	r4, sp
 8007b20:	f107 0318 	add.w	r3, r7, #24
 8007b24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b2c:	f107 030c 	add.w	r3, r7, #12
 8007b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b32:	4628      	mov	r0, r5
 8007b34:	f001 fa80 	bl	8009038 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bdb0      	pop	{r4, r5, r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	004005ff 	.word	0x004005ff

08007b50 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b50:	b5b0      	push	{r4, r5, r7, lr}
 8007b52:	b094      	sub	sp, #80	; 0x50
 8007b54:	af04      	add	r7, sp, #16
 8007b56:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fab0 	bl	80090c6 <SDIO_GetPowerState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b70:	e0b7      	b.n	8007ce2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d02f      	beq.n	8007bda <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 fc2f 	bl	80093e2 <SDMMC_CmdSendCID>
 8007b84:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <SD_InitCard+0x40>
    {
      return errorstate;
 8007b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8e:	e0a8      	b.n	8007ce2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fada 	bl	8009150 <SDIO_GetResponse>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fad1 	bl	8009150 <SDIO_GetResponse>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2108      	movs	r1, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 fac8 	bl	8009150 <SDIO_GetResponse>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	210c      	movs	r1, #12
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 fabf 	bl	8009150 <SDIO_GetResponse>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d00d      	beq.n	8007bfe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f107 020e 	add.w	r2, r7, #14
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 fc35 	bl	800945c <SDMMC_CmdSetRelAdd>
 8007bf2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <SD_InitCard+0xae>
    {
      return errorstate;
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	e071      	b.n	8007ce2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d036      	beq.n	8007c74 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c16:	041b      	lsls	r3, r3, #16
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f001 fbff 	bl	800941e <SDMMC_CmdSendCSD>
 8007c20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2a:	e05a      	b.n	8007ce2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2100      	movs	r1, #0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fa8c 	bl	8009150 <SDIO_GetResponse>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2104      	movs	r1, #4
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fa83 	bl	8009150 <SDIO_GetResponse>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2108      	movs	r1, #8
 8007c56:	4618      	mov	r0, r3
 8007c58:	f001 fa7a 	bl	8009150 <SDIO_GetResponse>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	210c      	movs	r1, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fa71 	bl	8009150 <SDIO_GetResponse>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2104      	movs	r1, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 fa68 	bl	8009150 <SDIO_GetResponse>
 8007c80:	4603      	mov	r3, r0
 8007c82:	0d1a      	lsrs	r2, r3, #20
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007c88:	f107 0310 	add.w	r3, r7, #16
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fd3e 	bl	8007710 <HAL_SD_GetCardCSD>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c9e:	e020      	b.n	8007ce2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f04f 0400 	mov.w	r4, #0
 8007cae:	461a      	mov	r2, r3
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	4608      	mov	r0, r1
 8007cb4:	f001 faad 	bl	8009212 <SDMMC_CmdSelDesel>
 8007cb8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <SD_InitCard+0x174>
  {
    return errorstate;
 8007cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc2:	e00e      	b.n	8007ce2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681d      	ldr	r5, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	466c      	mov	r4, sp
 8007ccc:	f103 0210 	add.w	r2, r3, #16
 8007cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8007cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f001 f9ac 	bl	8009038 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3740      	adds	r7, #64	; 0x40
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007cec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 faa7 	bl	8009258 <SDMMC_CmdGoIdleState>
 8007d0a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	e072      	b.n	8007dfc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 faba 	bl	8009294 <SDMMC_CmdOperCond>
 8007d20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 fa90 	bl	8009258 <SDMMC_CmdGoIdleState>
 8007d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	e05b      	b.n	8007dfc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d137      	bne.n	8007dc2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 faba 	bl	80092d2 <SDMMC_CmdAppCommand>
 8007d5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d02d      	beq.n	8007dc2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d6a:	e047      	b.n	8007dfc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 faad 	bl	80092d2 <SDMMC_CmdAppCommand>
 8007d78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <SD_PowerON+0x98>
    {
      return errorstate;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e03b      	b.n	8007dfc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	491e      	ldr	r1, [pc, #120]	; (8007e04 <SD_PowerON+0x118>)
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 fac3 	bl	8009316 <SDMMC_CmdAppOperCommand>
 8007d90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d9c:	e02e      	b.n	8007dfc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2100      	movs	r1, #0
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 f9d3 	bl	8009150 <SDIO_GetResponse>
 8007daa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	0fdb      	lsrs	r3, r3, #31
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <SD_PowerON+0xcc>
 8007db4:	2301      	movs	r3, #1
 8007db6:	e000      	b.n	8007dba <SD_PowerON+0xce>
 8007db8:	2300      	movs	r3, #0
 8007dba:	613b      	str	r3, [r7, #16]

    count++;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d802      	bhi.n	8007dd2 <SD_PowerON+0xe6>
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0cc      	beq.n	8007d6c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d902      	bls.n	8007de2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007de0:	e00c      	b.n	8007dfc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	645a      	str	r2, [r3, #68]	; 0x44
 8007df2:	e002      	b.n	8007dfa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	c1100000 	.word	0xc1100000

08007e08 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	2300      	movs	r3, #0
 8007e16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 f996 	bl	8009150 <SDIO_GetResponse>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e2e:	d102      	bne.n	8007e36 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e34:	e02f      	b.n	8007e96 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f879 	bl	8007f34 <SD_FindSCR>
 8007e42:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	e023      	b.n	8007e96 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01c      	beq.n	8007e92 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	041b      	lsls	r3, r3, #16
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f001 fa34 	bl	80092d2 <SDMMC_CmdAppCommand>
 8007e6a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	e00f      	b.n	8007e96 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f001 fa6d 	bl	800935c <SDMMC_CmdBusWidth>
 8007e82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	e003      	b.n	8007e96 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e001      	b.n	8007e96 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 f94b 	bl	8009150 <SDIO_GetResponse>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ec4:	d102      	bne.n	8007ecc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eca:	e02f      	b.n	8007f2c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ecc:	f107 030c 	add.w	r3, r7, #12
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f82e 	bl	8007f34 <SD_FindSCR>
 8007ed8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	e023      	b.n	8007f2c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d01c      	beq.n	8007f28 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f001 f9e9 	bl	80092d2 <SDMMC_CmdAppCommand>
 8007f00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	e00f      	b.n	8007f2c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fa22 	bl	800935c <SDMMC_CmdBusWidth>
 8007f18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	e003      	b.n	8007f2c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e001      	b.n	8007f2c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007f34:	b590      	push	{r4, r7, lr}
 8007f36:	b08f      	sub	sp, #60	; 0x3c
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007f3e:	f7fa ff87 	bl	8002e50 <HAL_GetTick>
 8007f42:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60bb      	str	r3, [r7, #8]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2108      	movs	r1, #8
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 f937 	bl	80091ce <SDMMC_CmdBlockLength>
 8007f60:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	e0a9      	b.n	80080c0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	4619      	mov	r1, r3
 8007f78:	4610      	mov	r0, r2
 8007f7a:	f001 f9aa 	bl	80092d2 <SDMMC_CmdAppCommand>
 8007f7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	e09a      	b.n	80080c0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007f90:	2308      	movs	r3, #8
 8007f92:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007f94:	2330      	movs	r3, #48	; 0x30
 8007f96:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f107 0210 	add.w	r2, r7, #16
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 f8e1 	bl	8009176 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f001 f9f1 	bl	80093a0 <SDMMC_CmdSendSCR>
 8007fbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d022      	beq.n	800800c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	e07a      	b.n	80080c0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00e      	beq.n	8007ff6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6819      	ldr	r1, [r3, #0]
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	f107 0208 	add.w	r2, r7, #8
 8007fe4:	18d4      	adds	r4, r2, r3
 8007fe6:	4608      	mov	r0, r1
 8007fe8:	f001 f851 	bl	800908e <SDIO_ReadFIFO>
 8007fec:	4603      	mov	r3, r0
 8007fee:	6023      	str	r3, [r4, #0]
      index++;
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ff6:	f7fa ff2b 	bl	8002e50 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d102      	bne.n	800800c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008006:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800800a:	e059      	b.n	80080c0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008012:	f240 432a 	movw	r3, #1066	; 0x42a
 8008016:	4013      	ands	r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0d6      	beq.n	8007fca <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2208      	movs	r2, #8
 8008030:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008032:	2308      	movs	r3, #8
 8008034:	e044      	b.n	80080c0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d005      	beq.n	8008050 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2202      	movs	r2, #2
 800804a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800804c:	2302      	movs	r3, #2
 800804e:	e037      	b.n	80080c0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d005      	beq.n	800806a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2220      	movs	r2, #32
 8008064:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008066:	2320      	movs	r3, #32
 8008068:	e02a      	b.n	80080c0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008072:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	061a      	lsls	r2, r3, #24
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008080:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	0a1b      	lsrs	r3, r3, #8
 8008086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800808a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	0e1b      	lsrs	r3, r3, #24
 8008090:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	601a      	str	r2, [r3, #0]
    scr++;
 8008096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008098:	3304      	adds	r3, #4
 800809a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	061a      	lsls	r2, r3, #24
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	0a1b      	lsrs	r3, r3, #8
 80080ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	0e1b      	lsrs	r3, r3, #24
 80080b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80080ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	373c      	adds	r7, #60	; 0x3c
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd90      	pop	{r4, r7, pc}

080080c8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e034      	b.n	8008148 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7f9 fdee 	bl	8001cd4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3308      	adds	r3, #8
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f000 fe94 	bl	8008e30 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	461a      	mov	r2, r3
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	f000 fefc 	bl	8008f10 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6858      	ldr	r0, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	f000 ff47 	bl	8008fb8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	6892      	ldr	r2, [r2, #8]
 8008132:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	6892      	ldr	r2, [r2, #8]
 800813e:	f041 0101 	orr.w	r1, r1, #1
 8008142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e03f      	b.n	80081e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f9 fcb6 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2224      	movs	r2, #36	; 0x24
 8008180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008192:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fab3 	bl	8008700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695a      	ldr	r2, [r3, #20]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2220      	movs	r2, #32
 80081d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	4613      	mov	r3, r2
 80081f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b20      	cmp	r3, #32
 8008202:	d140      	bne.n	8008286 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_UART_Receive_IT+0x26>
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e039      	b.n	8008288 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_UART_Receive_IT+0x38>
 800821e:	2302      	movs	r3, #2
 8008220:	e032      	b.n	8008288 <HAL_UART_Receive_IT+0x9e>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2222      	movs	r2, #34	; 0x22
 8008246:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008260:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0201 	orr.w	r2, r2, #1
 8008270:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0220 	orr.w	r2, r2, #32
 8008280:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
  }
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10d      	bne.n	80082e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <HAL_UART_IRQHandler+0x52>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f98c 	bl	80085fc <UART_Receive_IT>
      return;
 80082e4:	e0d1      	b.n	800848a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80b0 	beq.w	800844e <HAL_UART_IRQHandler+0x1ba>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d105      	bne.n	8008304 <HAL_UART_IRQHandler+0x70>
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 80a5 	beq.w	800844e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <HAL_UART_IRQHandler+0x90>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831c:	f043 0201 	orr.w	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <HAL_UART_IRQHandler+0xb0>
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	d005      	beq.n	8008344 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833c:	f043 0202 	orr.w	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <HAL_UART_IRQHandler+0xd0>
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835c:	f043 0204 	orr.w	r2, r3, #4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00f      	beq.n	800838e <HAL_UART_IRQHandler+0xfa>
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d104      	bne.n	8008382 <HAL_UART_IRQHandler+0xee>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	f043 0208 	orr.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d078      	beq.n	8008488 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f003 0320 	and.w	r3, r3, #32
 800839c:	2b00      	cmp	r3, #0
 800839e:	d007      	beq.n	80083b0 <HAL_UART_IRQHandler+0x11c>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f926 	bl	80085fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	bf0c      	ite	eq
 80083be:	2301      	moveq	r3, #1
 80083c0:	2300      	movne	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <HAL_UART_IRQHandler+0x144>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d031      	beq.n	800843c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f86f 	bl	80084bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e8:	2b40      	cmp	r3, #64	; 0x40
 80083ea:	d123      	bne.n	8008434 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	695a      	ldr	r2, [r3, #20]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d013      	beq.n	800842c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	4a21      	ldr	r2, [pc, #132]	; (8008490 <HAL_UART_IRQHandler+0x1fc>)
 800840a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	4618      	mov	r0, r3
 8008412:	f7fb fa91 	bl	8003938 <HAL_DMA_Abort_IT>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d016      	beq.n	800844a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008426:	4610      	mov	r0, r2
 8008428:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842a:	e00e      	b.n	800844a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f83b 	bl	80084a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008432:	e00a      	b.n	800844a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f837 	bl	80084a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843a:	e006      	b.n	800844a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f833 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008448:	e01e      	b.n	8008488 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800844a:	bf00      	nop
    return;
 800844c:	e01c      	b.n	8008488 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008454:	2b00      	cmp	r3, #0
 8008456:	d008      	beq.n	800846a <HAL_UART_IRQHandler+0x1d6>
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b00      	cmp	r3, #0
 8008460:	d003      	beq.n	800846a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f85c 	bl	8008520 <UART_Transmit_IT>
    return;
 8008468:	e00f      	b.n	800848a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <HAL_UART_IRQHandler+0x1f6>
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f8a4 	bl	80085cc <UART_EndTransmit_IT>
    return;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <HAL_UART_IRQHandler+0x1f6>
    return;
 8008488:	bf00      	nop
  }
}
 800848a:	3720      	adds	r7, #32
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	080084f9 	.word	0x080084f9

08008494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0201 	bic.w	r2, r2, #1
 80084e2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff ffc8 	bl	80084a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008518:	bf00      	nop
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b21      	cmp	r3, #33	; 0x21
 8008532:	d144      	bne.n	80085be <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853c:	d11a      	bne.n	8008574 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	461a      	mov	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008552:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	1c9a      	adds	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	621a      	str	r2, [r3, #32]
 8008566:	e00e      	b.n	8008586 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	621a      	str	r2, [r3, #32]
 8008572:	e008      	b.n	8008586 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	1c59      	adds	r1, r3, #1
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6211      	str	r1, [r2, #32]
 800857e:	781a      	ldrb	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800858a:	b29b      	uxth	r3, r3
 800858c:	3b01      	subs	r3, #1
 800858e:	b29b      	uxth	r3, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4619      	mov	r1, r3
 8008594:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10f      	bne.n	80085ba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68da      	ldr	r2, [r3, #12]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	e000      	b.n	80085c0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80085be:	2302      	movs	r3, #2
  }
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ff51 	bl	8008494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b22      	cmp	r3, #34	; 0x22
 800860e:	d171      	bne.n	80086f4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008618:	d123      	bne.n	8008662 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10e      	bne.n	8008646 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	1c9a      	adds	r2, r3, #2
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	629a      	str	r2, [r3, #40]	; 0x28
 8008644:	e029      	b.n	800869a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	b29b      	uxth	r3, r3
 800864e:	b2db      	uxtb	r3, r3
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	629a      	str	r2, [r3, #40]	; 0x28
 8008660:	e01b      	b.n	800869a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6858      	ldr	r0, [r3, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	1c59      	adds	r1, r3, #1
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6291      	str	r1, [r2, #40]	; 0x28
 800867a:	b2c2      	uxtb	r2, r0
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e00c      	b.n	800869a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	1c58      	adds	r0, r3, #1
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	6288      	str	r0, [r1, #40]	; 0x28
 8008692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	4619      	mov	r1, r3
 80086a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d120      	bne.n	80086f0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0220 	bic.w	r2, r2, #32
 80086bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0201 	bic.w	r2, r2, #1
 80086dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7f7 ff16 	bl	8000518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e002      	b.n	80086f6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	e000      	b.n	80086f6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80086f4:	2302      	movs	r3, #2
  }
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	4313      	orrs	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008742:	f023 030c 	bic.w	r3, r3, #12
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	430b      	orrs	r3, r1
 800874e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800876e:	f040 8199 	bne.w	8008aa4 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4ac6      	ldr	r2, [pc, #792]	; (8008a90 <UART_SetConfig+0x390>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00f      	beq.n	800879c <UART_SetConfig+0x9c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4ac4      	ldr	r2, [pc, #784]	; (8008a94 <UART_SetConfig+0x394>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00a      	beq.n	800879c <UART_SetConfig+0x9c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4ac3      	ldr	r2, [pc, #780]	; (8008a98 <UART_SetConfig+0x398>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d005      	beq.n	800879c <UART_SetConfig+0x9c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4ac1      	ldr	r2, [pc, #772]	; (8008a9c <UART_SetConfig+0x39c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f040 80bd 	bne.w	8008916 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800879c:	f7fe f8f6 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 80087a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	461d      	mov	r5, r3
 80087a6:	f04f 0600 	mov.w	r6, #0
 80087aa:	46a8      	mov	r8, r5
 80087ac:	46b1      	mov	r9, r6
 80087ae:	eb18 0308 	adds.w	r3, r8, r8
 80087b2:	eb49 0409 	adc.w	r4, r9, r9
 80087b6:	4698      	mov	r8, r3
 80087b8:	46a1      	mov	r9, r4
 80087ba:	eb18 0805 	adds.w	r8, r8, r5
 80087be:	eb49 0906 	adc.w	r9, r9, r6
 80087c2:	f04f 0100 	mov.w	r1, #0
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087d6:	4688      	mov	r8, r1
 80087d8:	4691      	mov	r9, r2
 80087da:	eb18 0005 	adds.w	r0, r8, r5
 80087de:	eb49 0106 	adc.w	r1, r9, r6
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	461d      	mov	r5, r3
 80087e8:	f04f 0600 	mov.w	r6, #0
 80087ec:	196b      	adds	r3, r5, r5
 80087ee:	eb46 0406 	adc.w	r4, r6, r6
 80087f2:	461a      	mov	r2, r3
 80087f4:	4623      	mov	r3, r4
 80087f6:	f7f7 fd0f 	bl	8000218 <__aeabi_uldivmod>
 80087fa:	4603      	mov	r3, r0
 80087fc:	460c      	mov	r4, r1
 80087fe:	461a      	mov	r2, r3
 8008800:	4ba7      	ldr	r3, [pc, #668]	; (8008aa0 <UART_SetConfig+0x3a0>)
 8008802:	fba3 2302 	umull	r2, r3, r3, r2
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	461d      	mov	r5, r3
 8008810:	f04f 0600 	mov.w	r6, #0
 8008814:	46a9      	mov	r9, r5
 8008816:	46b2      	mov	sl, r6
 8008818:	eb19 0309 	adds.w	r3, r9, r9
 800881c:	eb4a 040a 	adc.w	r4, sl, sl
 8008820:	4699      	mov	r9, r3
 8008822:	46a2      	mov	sl, r4
 8008824:	eb19 0905 	adds.w	r9, r9, r5
 8008828:	eb4a 0a06 	adc.w	sl, sl, r6
 800882c:	f04f 0100 	mov.w	r1, #0
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008838:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800883c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008840:	4689      	mov	r9, r1
 8008842:	4692      	mov	sl, r2
 8008844:	eb19 0005 	adds.w	r0, r9, r5
 8008848:	eb4a 0106 	adc.w	r1, sl, r6
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	461d      	mov	r5, r3
 8008852:	f04f 0600 	mov.w	r6, #0
 8008856:	196b      	adds	r3, r5, r5
 8008858:	eb46 0406 	adc.w	r4, r6, r6
 800885c:	461a      	mov	r2, r3
 800885e:	4623      	mov	r3, r4
 8008860:	f7f7 fcda 	bl	8000218 <__aeabi_uldivmod>
 8008864:	4603      	mov	r3, r0
 8008866:	460c      	mov	r4, r1
 8008868:	461a      	mov	r2, r3
 800886a:	4b8d      	ldr	r3, [pc, #564]	; (8008aa0 <UART_SetConfig+0x3a0>)
 800886c:	fba3 1302 	umull	r1, r3, r3, r2
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	2164      	movs	r1, #100	; 0x64
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	3332      	adds	r3, #50	; 0x32
 800887e:	4a88      	ldr	r2, [pc, #544]	; (8008aa0 <UART_SetConfig+0x3a0>)
 8008880:	fba2 2303 	umull	r2, r3, r2, r3
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800888c:	4498      	add	r8, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	461d      	mov	r5, r3
 8008892:	f04f 0600 	mov.w	r6, #0
 8008896:	46a9      	mov	r9, r5
 8008898:	46b2      	mov	sl, r6
 800889a:	eb19 0309 	adds.w	r3, r9, r9
 800889e:	eb4a 040a 	adc.w	r4, sl, sl
 80088a2:	4699      	mov	r9, r3
 80088a4:	46a2      	mov	sl, r4
 80088a6:	eb19 0905 	adds.w	r9, r9, r5
 80088aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80088ae:	f04f 0100 	mov.w	r1, #0
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088c2:	4689      	mov	r9, r1
 80088c4:	4692      	mov	sl, r2
 80088c6:	eb19 0005 	adds.w	r0, r9, r5
 80088ca:	eb4a 0106 	adc.w	r1, sl, r6
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	461d      	mov	r5, r3
 80088d4:	f04f 0600 	mov.w	r6, #0
 80088d8:	196b      	adds	r3, r5, r5
 80088da:	eb46 0406 	adc.w	r4, r6, r6
 80088de:	461a      	mov	r2, r3
 80088e0:	4623      	mov	r3, r4
 80088e2:	f7f7 fc99 	bl	8000218 <__aeabi_uldivmod>
 80088e6:	4603      	mov	r3, r0
 80088e8:	460c      	mov	r4, r1
 80088ea:	461a      	mov	r2, r3
 80088ec:	4b6c      	ldr	r3, [pc, #432]	; (8008aa0 <UART_SetConfig+0x3a0>)
 80088ee:	fba3 1302 	umull	r1, r3, r3, r2
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	2164      	movs	r1, #100	; 0x64
 80088f6:	fb01 f303 	mul.w	r3, r1, r3
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	00db      	lsls	r3, r3, #3
 80088fe:	3332      	adds	r3, #50	; 0x32
 8008900:	4a67      	ldr	r2, [pc, #412]	; (8008aa0 <UART_SetConfig+0x3a0>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	095b      	lsrs	r3, r3, #5
 8008908:	f003 0207 	and.w	r2, r3, #7
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4442      	add	r2, r8
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	e27d      	b.n	8008e12 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008916:	f7fe f825 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 800891a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	461d      	mov	r5, r3
 8008920:	f04f 0600 	mov.w	r6, #0
 8008924:	46a8      	mov	r8, r5
 8008926:	46b1      	mov	r9, r6
 8008928:	eb18 0308 	adds.w	r3, r8, r8
 800892c:	eb49 0409 	adc.w	r4, r9, r9
 8008930:	4698      	mov	r8, r3
 8008932:	46a1      	mov	r9, r4
 8008934:	eb18 0805 	adds.w	r8, r8, r5
 8008938:	eb49 0906 	adc.w	r9, r9, r6
 800893c:	f04f 0100 	mov.w	r1, #0
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008948:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800894c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008950:	4688      	mov	r8, r1
 8008952:	4691      	mov	r9, r2
 8008954:	eb18 0005 	adds.w	r0, r8, r5
 8008958:	eb49 0106 	adc.w	r1, r9, r6
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	461d      	mov	r5, r3
 8008962:	f04f 0600 	mov.w	r6, #0
 8008966:	196b      	adds	r3, r5, r5
 8008968:	eb46 0406 	adc.w	r4, r6, r6
 800896c:	461a      	mov	r2, r3
 800896e:	4623      	mov	r3, r4
 8008970:	f7f7 fc52 	bl	8000218 <__aeabi_uldivmod>
 8008974:	4603      	mov	r3, r0
 8008976:	460c      	mov	r4, r1
 8008978:	461a      	mov	r2, r3
 800897a:	4b49      	ldr	r3, [pc, #292]	; (8008aa0 <UART_SetConfig+0x3a0>)
 800897c:	fba3 2302 	umull	r2, r3, r3, r2
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	461d      	mov	r5, r3
 800898a:	f04f 0600 	mov.w	r6, #0
 800898e:	46a9      	mov	r9, r5
 8008990:	46b2      	mov	sl, r6
 8008992:	eb19 0309 	adds.w	r3, r9, r9
 8008996:	eb4a 040a 	adc.w	r4, sl, sl
 800899a:	4699      	mov	r9, r3
 800899c:	46a2      	mov	sl, r4
 800899e:	eb19 0905 	adds.w	r9, r9, r5
 80089a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80089a6:	f04f 0100 	mov.w	r1, #0
 80089aa:	f04f 0200 	mov.w	r2, #0
 80089ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089ba:	4689      	mov	r9, r1
 80089bc:	4692      	mov	sl, r2
 80089be:	eb19 0005 	adds.w	r0, r9, r5
 80089c2:	eb4a 0106 	adc.w	r1, sl, r6
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	461d      	mov	r5, r3
 80089cc:	f04f 0600 	mov.w	r6, #0
 80089d0:	196b      	adds	r3, r5, r5
 80089d2:	eb46 0406 	adc.w	r4, r6, r6
 80089d6:	461a      	mov	r2, r3
 80089d8:	4623      	mov	r3, r4
 80089da:	f7f7 fc1d 	bl	8000218 <__aeabi_uldivmod>
 80089de:	4603      	mov	r3, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	461a      	mov	r2, r3
 80089e4:	4b2e      	ldr	r3, [pc, #184]	; (8008aa0 <UART_SetConfig+0x3a0>)
 80089e6:	fba3 1302 	umull	r1, r3, r3, r2
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	2164      	movs	r1, #100	; 0x64
 80089ee:	fb01 f303 	mul.w	r3, r1, r3
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	3332      	adds	r3, #50	; 0x32
 80089f8:	4a29      	ldr	r2, [pc, #164]	; (8008aa0 <UART_SetConfig+0x3a0>)
 80089fa:	fba2 2303 	umull	r2, r3, r2, r3
 80089fe:	095b      	lsrs	r3, r3, #5
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a06:	4498      	add	r8, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	461d      	mov	r5, r3
 8008a0c:	f04f 0600 	mov.w	r6, #0
 8008a10:	46a9      	mov	r9, r5
 8008a12:	46b2      	mov	sl, r6
 8008a14:	eb19 0309 	adds.w	r3, r9, r9
 8008a18:	eb4a 040a 	adc.w	r4, sl, sl
 8008a1c:	4699      	mov	r9, r3
 8008a1e:	46a2      	mov	sl, r4
 8008a20:	eb19 0905 	adds.w	r9, r9, r5
 8008a24:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a3c:	4689      	mov	r9, r1
 8008a3e:	4692      	mov	sl, r2
 8008a40:	eb19 0005 	adds.w	r0, r9, r5
 8008a44:	eb4a 0106 	adc.w	r1, sl, r6
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	f04f 0600 	mov.w	r6, #0
 8008a52:	196b      	adds	r3, r5, r5
 8008a54:	eb46 0406 	adc.w	r4, r6, r6
 8008a58:	461a      	mov	r2, r3
 8008a5a:	4623      	mov	r3, r4
 8008a5c:	f7f7 fbdc 	bl	8000218 <__aeabi_uldivmod>
 8008a60:	4603      	mov	r3, r0
 8008a62:	460c      	mov	r4, r1
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <UART_SetConfig+0x3a0>)
 8008a68:	fba3 1302 	umull	r1, r3, r3, r2
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	2164      	movs	r1, #100	; 0x64
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	3332      	adds	r3, #50	; 0x32
 8008a7a:	4a09      	ldr	r2, [pc, #36]	; (8008aa0 <UART_SetConfig+0x3a0>)
 8008a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a80:	095b      	lsrs	r3, r3, #5
 8008a82:	f003 0207 	and.w	r2, r3, #7
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4442      	add	r2, r8
 8008a8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008a8e:	e1c0      	b.n	8008e12 <UART_SetConfig+0x712>
 8008a90:	40011000 	.word	0x40011000
 8008a94:	40011400 	.word	0x40011400
 8008a98:	40011800 	.word	0x40011800
 8008a9c:	40011c00 	.word	0x40011c00
 8008aa0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4adc      	ldr	r2, [pc, #880]	; (8008e1c <UART_SetConfig+0x71c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00f      	beq.n	8008ace <UART_SetConfig+0x3ce>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4adb      	ldr	r2, [pc, #876]	; (8008e20 <UART_SetConfig+0x720>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00a      	beq.n	8008ace <UART_SetConfig+0x3ce>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4ad9      	ldr	r2, [pc, #868]	; (8008e24 <UART_SetConfig+0x724>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d005      	beq.n	8008ace <UART_SetConfig+0x3ce>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4ad8      	ldr	r2, [pc, #864]	; (8008e28 <UART_SetConfig+0x728>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	f040 80d1 	bne.w	8008c70 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ace:	f7fd ff5d 	bl	800698c <HAL_RCC_GetPCLK2Freq>
 8008ad2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	469a      	mov	sl, r3
 8008ad8:	f04f 0b00 	mov.w	fp, #0
 8008adc:	46d0      	mov	r8, sl
 8008ade:	46d9      	mov	r9, fp
 8008ae0:	eb18 0308 	adds.w	r3, r8, r8
 8008ae4:	eb49 0409 	adc.w	r4, r9, r9
 8008ae8:	4698      	mov	r8, r3
 8008aea:	46a1      	mov	r9, r4
 8008aec:	eb18 080a 	adds.w	r8, r8, sl
 8008af0:	eb49 090b 	adc.w	r9, r9, fp
 8008af4:	f04f 0100 	mov.w	r1, #0
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b08:	4688      	mov	r8, r1
 8008b0a:	4691      	mov	r9, r2
 8008b0c:	eb1a 0508 	adds.w	r5, sl, r8
 8008b10:	eb4b 0609 	adc.w	r6, fp, r9
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	f04f 0200 	mov.w	r2, #0
 8008b1e:	f04f 0300 	mov.w	r3, #0
 8008b22:	f04f 0400 	mov.w	r4, #0
 8008b26:	0094      	lsls	r4, r2, #2
 8008b28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b2c:	008b      	lsls	r3, r1, #2
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4623      	mov	r3, r4
 8008b32:	4628      	mov	r0, r5
 8008b34:	4631      	mov	r1, r6
 8008b36:	f7f7 fb6f 	bl	8000218 <__aeabi_uldivmod>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	461a      	mov	r2, r3
 8008b40:	4bba      	ldr	r3, [pc, #744]	; (8008e2c <UART_SetConfig+0x72c>)
 8008b42:	fba3 2302 	umull	r2, r3, r3, r2
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	469b      	mov	fp, r3
 8008b50:	f04f 0c00 	mov.w	ip, #0
 8008b54:	46d9      	mov	r9, fp
 8008b56:	46e2      	mov	sl, ip
 8008b58:	eb19 0309 	adds.w	r3, r9, r9
 8008b5c:	eb4a 040a 	adc.w	r4, sl, sl
 8008b60:	4699      	mov	r9, r3
 8008b62:	46a2      	mov	sl, r4
 8008b64:	eb19 090b 	adds.w	r9, r9, fp
 8008b68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b6c:	f04f 0100 	mov.w	r1, #0
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b80:	4689      	mov	r9, r1
 8008b82:	4692      	mov	sl, r2
 8008b84:	eb1b 0509 	adds.w	r5, fp, r9
 8008b88:	eb4c 060a 	adc.w	r6, ip, sl
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	4619      	mov	r1, r3
 8008b92:	f04f 0200 	mov.w	r2, #0
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	f04f 0400 	mov.w	r4, #0
 8008b9e:	0094      	lsls	r4, r2, #2
 8008ba0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ba4:	008b      	lsls	r3, r1, #2
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4623      	mov	r3, r4
 8008baa:	4628      	mov	r0, r5
 8008bac:	4631      	mov	r1, r6
 8008bae:	f7f7 fb33 	bl	8000218 <__aeabi_uldivmod>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4b9c      	ldr	r3, [pc, #624]	; (8008e2c <UART_SetConfig+0x72c>)
 8008bba:	fba3 1302 	umull	r1, r3, r3, r2
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	2164      	movs	r1, #100	; 0x64
 8008bc2:	fb01 f303 	mul.w	r3, r1, r3
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	3332      	adds	r3, #50	; 0x32
 8008bcc:	4a97      	ldr	r2, [pc, #604]	; (8008e2c <UART_SetConfig+0x72c>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd8:	4498      	add	r8, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	469b      	mov	fp, r3
 8008bde:	f04f 0c00 	mov.w	ip, #0
 8008be2:	46d9      	mov	r9, fp
 8008be4:	46e2      	mov	sl, ip
 8008be6:	eb19 0309 	adds.w	r3, r9, r9
 8008bea:	eb4a 040a 	adc.w	r4, sl, sl
 8008bee:	4699      	mov	r9, r3
 8008bf0:	46a2      	mov	sl, r4
 8008bf2:	eb19 090b 	adds.w	r9, r9, fp
 8008bf6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008bfa:	f04f 0100 	mov.w	r1, #0
 8008bfe:	f04f 0200 	mov.w	r2, #0
 8008c02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c0e:	4689      	mov	r9, r1
 8008c10:	4692      	mov	sl, r2
 8008c12:	eb1b 0509 	adds.w	r5, fp, r9
 8008c16:	eb4c 060a 	adc.w	r6, ip, sl
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	f04f 0400 	mov.w	r4, #0
 8008c2c:	0094      	lsls	r4, r2, #2
 8008c2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c32:	008b      	lsls	r3, r1, #2
 8008c34:	461a      	mov	r2, r3
 8008c36:	4623      	mov	r3, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	f7f7 faec 	bl	8000218 <__aeabi_uldivmod>
 8008c40:	4603      	mov	r3, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	461a      	mov	r2, r3
 8008c46:	4b79      	ldr	r3, [pc, #484]	; (8008e2c <UART_SetConfig+0x72c>)
 8008c48:	fba3 1302 	umull	r1, r3, r3, r2
 8008c4c:	095b      	lsrs	r3, r3, #5
 8008c4e:	2164      	movs	r1, #100	; 0x64
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	3332      	adds	r3, #50	; 0x32
 8008c5a:	4a74      	ldr	r2, [pc, #464]	; (8008e2c <UART_SetConfig+0x72c>)
 8008c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c60:	095b      	lsrs	r3, r3, #5
 8008c62:	f003 020f 	and.w	r2, r3, #15
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4442      	add	r2, r8
 8008c6c:	609a      	str	r2, [r3, #8]
 8008c6e:	e0d0      	b.n	8008e12 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fd fe78 	bl	8006964 <HAL_RCC_GetPCLK1Freq>
 8008c74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f04f 0b00 	mov.w	fp, #0
 8008c7e:	46d0      	mov	r8, sl
 8008c80:	46d9      	mov	r9, fp
 8008c82:	eb18 0308 	adds.w	r3, r8, r8
 8008c86:	eb49 0409 	adc.w	r4, r9, r9
 8008c8a:	4698      	mov	r8, r3
 8008c8c:	46a1      	mov	r9, r4
 8008c8e:	eb18 080a 	adds.w	r8, r8, sl
 8008c92:	eb49 090b 	adc.w	r9, r9, fp
 8008c96:	f04f 0100 	mov.w	r1, #0
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ca2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ca6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008caa:	4688      	mov	r8, r1
 8008cac:	4691      	mov	r9, r2
 8008cae:	eb1a 0508 	adds.w	r5, sl, r8
 8008cb2:	eb4b 0609 	adc.w	r6, fp, r9
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	f04f 0400 	mov.w	r4, #0
 8008cc8:	0094      	lsls	r4, r2, #2
 8008cca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cce:	008b      	lsls	r3, r1, #2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	f7f7 fa9e 	bl	8000218 <__aeabi_uldivmod>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4b52      	ldr	r3, [pc, #328]	; (8008e2c <UART_SetConfig+0x72c>)
 8008ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8008ce8:	095b      	lsrs	r3, r3, #5
 8008cea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	469b      	mov	fp, r3
 8008cf2:	f04f 0c00 	mov.w	ip, #0
 8008cf6:	46d9      	mov	r9, fp
 8008cf8:	46e2      	mov	sl, ip
 8008cfa:	eb19 0309 	adds.w	r3, r9, r9
 8008cfe:	eb4a 040a 	adc.w	r4, sl, sl
 8008d02:	4699      	mov	r9, r3
 8008d04:	46a2      	mov	sl, r4
 8008d06:	eb19 090b 	adds.w	r9, r9, fp
 8008d0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d0e:	f04f 0100 	mov.w	r1, #0
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d22:	4689      	mov	r9, r1
 8008d24:	4692      	mov	sl, r2
 8008d26:	eb1b 0509 	adds.w	r5, fp, r9
 8008d2a:	eb4c 060a 	adc.w	r6, ip, sl
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	4619      	mov	r1, r3
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	f04f 0400 	mov.w	r4, #0
 8008d40:	0094      	lsls	r4, r2, #2
 8008d42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d46:	008b      	lsls	r3, r1, #2
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	4631      	mov	r1, r6
 8008d50:	f7f7 fa62 	bl	8000218 <__aeabi_uldivmod>
 8008d54:	4603      	mov	r3, r0
 8008d56:	460c      	mov	r4, r1
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4b34      	ldr	r3, [pc, #208]	; (8008e2c <UART_SetConfig+0x72c>)
 8008d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	2164      	movs	r1, #100	; 0x64
 8008d64:	fb01 f303 	mul.w	r3, r1, r3
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	3332      	adds	r3, #50	; 0x32
 8008d6e:	4a2f      	ldr	r2, [pc, #188]	; (8008e2c <UART_SetConfig+0x72c>)
 8008d70:	fba2 2303 	umull	r2, r3, r2, r3
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d7a:	4498      	add	r8, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	469b      	mov	fp, r3
 8008d80:	f04f 0c00 	mov.w	ip, #0
 8008d84:	46d9      	mov	r9, fp
 8008d86:	46e2      	mov	sl, ip
 8008d88:	eb19 0309 	adds.w	r3, r9, r9
 8008d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8008d90:	4699      	mov	r9, r3
 8008d92:	46a2      	mov	sl, r4
 8008d94:	eb19 090b 	adds.w	r9, r9, fp
 8008d98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d9c:	f04f 0100 	mov.w	r1, #0
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008db0:	4689      	mov	r9, r1
 8008db2:	4692      	mov	sl, r2
 8008db4:	eb1b 0509 	adds.w	r5, fp, r9
 8008db8:	eb4c 060a 	adc.w	r6, ip, sl
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 0400 	mov.w	r4, #0
 8008dce:	0094      	lsls	r4, r2, #2
 8008dd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008dd4:	008b      	lsls	r3, r1, #2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4623      	mov	r3, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	4631      	mov	r1, r6
 8008dde:	f7f7 fa1b 	bl	8000218 <__aeabi_uldivmod>
 8008de2:	4603      	mov	r3, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	461a      	mov	r2, r3
 8008de8:	4b10      	ldr	r3, [pc, #64]	; (8008e2c <UART_SetConfig+0x72c>)
 8008dea:	fba3 1302 	umull	r1, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	2164      	movs	r1, #100	; 0x64
 8008df2:	fb01 f303 	mul.w	r3, r1, r3
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	3332      	adds	r3, #50	; 0x32
 8008dfc:	4a0b      	ldr	r2, [pc, #44]	; (8008e2c <UART_SetConfig+0x72c>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	f003 020f 	and.w	r2, r3, #15
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4442      	add	r2, r8
 8008e0e:	609a      	str	r2, [r3, #8]
}
 8008e10:	e7ff      	b.n	8008e12 <UART_SetConfig+0x712>
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1c:	40011000 	.word	0x40011000
 8008e20:	40011400 	.word	0x40011400
 8008e24:	40011800 	.word	0x40011800
 8008e28:	40011c00 	.word	0x40011c00
 8008e2c:	51eb851f 	.word	0x51eb851f

08008e30 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4b2f      	ldr	r3, [pc, #188]	; (8008f0c <FSMC_NORSRAM_Init+0xdc>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e5a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008e60:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008e66:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008e6c:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8008e72:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008e78:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008e7e:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008e84:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008e8a:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008e90:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008e96:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008e9c:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008ea2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d103      	bne.n	8008eba <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb8:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68f9      	ldr	r1, [r7, #12]
 8008ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ece:	d10a      	bne.n	8008ee6 <FSMC_NORSRAM_Init+0xb6>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d006      	beq.n	8008ee6 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	ffc00480 	.word	0xffc00480

08008f10 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008f32:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f3e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f46:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f4e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f58:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	3b02      	subs	r3, #2
 8008f60:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f62:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6979      	ldr	r1, [r7, #20]
 8008f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f88:	d10e      	bne.n	8008fa8 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f92:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	051b      	lsls	r3, r3, #20
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	371c      	adds	r7, #28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fd0:	d122      	bne.n	8009018 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fda:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4b15      	ldr	r3, [pc, #84]	; (8009034 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008ff6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008ffe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009004:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	6979      	ldr	r1, [r7, #20]
 8009012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009016:	e005      	b.n	8009024 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	cff00000 	.word	0xcff00000

08009038 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009038:	b084      	sub	sp, #16
 800903a:	b480      	push	{r7}
 800903c:	b085      	sub	sp, #20
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	f107 001c 	add.w	r0, r7, #28
 8009046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800904e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009050:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009052:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009056:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800905a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800905c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800905e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009062:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	b004      	add	sp, #16
 800908c:	4770      	bx	lr

0800908e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800908e:	b480      	push	{r7}
 8009090:	b083      	sub	sp, #12
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2203      	movs	r2, #3
 80090b4:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80090b6:	2002      	movs	r0, #2
 80090b8:	f7f9 fed6 	bl	8002e68 <HAL_Delay>
  
  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0303 	and.w	r3, r3, #3
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009100:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009106:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800910c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800911c:	f023 030f 	bic.w	r3, r3, #15
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	b2db      	uxtb	r3, r3
}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3314      	adds	r3, #20
 800915e:	461a      	mov	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	4413      	add	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
}  
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800919c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80091a2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80091a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0

}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b088      	sub	sp, #32
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80091dc:	2310      	movs	r3, #16
 80091de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091e0:	2340      	movs	r3, #64	; 0x40
 80091e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091ee:	f107 0308 	add.w	r3, r7, #8
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff74 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80091fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fe:	2110      	movs	r1, #16
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f975 	bl	80094f0 <SDMMC_GetCmdResp1>
 8009206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009208:	69fb      	ldr	r3, [r7, #28]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3720      	adds	r7, #32
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b08a      	sub	sp, #40	; 0x28
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009222:	2307      	movs	r3, #7
 8009224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009226:	2340      	movs	r3, #64	; 0x40
 8009228:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800922a:	2300      	movs	r3, #0
 800922c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800922e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009232:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	4619      	mov	r1, r3
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f7ff ff51 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009240:	f241 3288 	movw	r2, #5000	; 0x1388
 8009244:	2107      	movs	r1, #7
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 f952 	bl	80094f0 <SDMMC_GetCmdResp1>
 800924c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009250:	4618      	mov	r0, r3
 8009252:	3728      	adds	r7, #40	; 0x28
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009268:	2300      	movs	r3, #0
 800926a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009274:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009276:	f107 0308 	add.w	r3, r7, #8
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff ff30 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f90c 	bl	80094a0 <SDMMC_GetCmdError>
 8009288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800928a:	69fb      	ldr	r3, [r7, #28]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3720      	adds	r7, #32
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800929c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80092a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092a2:	2308      	movs	r3, #8
 80092a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092a6:	2340      	movs	r3, #64	; 0x40
 80092a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092aa:	2300      	movs	r3, #0
 80092ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092b4:	f107 0308 	add.w	r3, r7, #8
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ff11 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 faf5 	bl	80098b0 <SDMMC_GetCmdResp7>
 80092c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092c8:	69fb      	ldr	r3, [r7, #28]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b088      	sub	sp, #32
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80092e0:	2337      	movs	r3, #55	; 0x37
 80092e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092e4:	2340      	movs	r3, #64	; 0x40
 80092e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092f2:	f107 0308 	add.w	r3, r7, #8
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f7ff fef2 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80092fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009302:	2137      	movs	r1, #55	; 0x37
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f8f3 	bl	80094f0 <SDMMC_GetCmdResp1>
 800930a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800930c:	69fb      	ldr	r3, [r7, #28]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3720      	adds	r7, #32
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b088      	sub	sp, #32
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800932a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800932c:	2329      	movs	r3, #41	; 0x29
 800932e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009330:	2340      	movs	r3, #64	; 0x40
 8009332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009334:	2300      	movs	r3, #0
 8009336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800933c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800933e:	f107 0308 	add.w	r3, r7, #8
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fecc 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa02 	bl	8009754 <SDMMC_GetCmdResp3>
 8009350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009352:	69fb      	ldr	r3, [r7, #28]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800936a:	2306      	movs	r3, #6
 800936c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800936e:	2340      	movs	r3, #64	; 0x40
 8009370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800937a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800937c:	f107 0308 	add.w	r3, r7, #8
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff fead 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009388:	f241 3288 	movw	r2, #5000	; 0x1388
 800938c:	2106      	movs	r1, #6
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f8ae 	bl	80094f0 <SDMMC_GetCmdResp1>
 8009394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009396:	69fb      	ldr	r3, [r7, #28]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3720      	adds	r7, #32
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80093ac:	2333      	movs	r3, #51	; 0x33
 80093ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093b0:	2340      	movs	r3, #64	; 0x40
 80093b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093be:	f107 0308 	add.w	r3, r7, #8
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff fe8c 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80093ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ce:	2133      	movs	r1, #51	; 0x33
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f88d 	bl	80094f0 <SDMMC_GetCmdResp1>
 80093d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093d8:	69fb      	ldr	r3, [r7, #28]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b088      	sub	sp, #32
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80093ee:	2302      	movs	r3, #2
 80093f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80093f2:	23c0      	movs	r3, #192	; 0xc0
 80093f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093f6:	2300      	movs	r3, #0
 80093f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009400:	f107 0308 	add.w	r3, r7, #8
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff fe6b 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f95b 	bl	80096c8 <SDMMC_GetCmdResp2>
 8009412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009414:	69fb      	ldr	r3, [r7, #28]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b088      	sub	sp, #32
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800942c:	2309      	movs	r3, #9
 800942e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009430:	23c0      	movs	r3, #192	; 0xc0
 8009432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800943c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff fe4c 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f93c 	bl	80096c8 <SDMMC_GetCmdResp2>
 8009450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009452:	69fb      	ldr	r3, [r7, #28]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800946a:	2303      	movs	r3, #3
 800946c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800946e:	2340      	movs	r3, #64	; 0x40
 8009470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800947a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800947c:	f107 0308 	add.w	r3, r7, #8
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7ff fe2d 	bl	80090e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	2103      	movs	r1, #3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 f99b 	bl	80097c8 <SDMMC_GetCmdResp6>
 8009492:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009494:	69fb      	ldr	r3, [r7, #28]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3720      	adds	r7, #32
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
	...

080094a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80094a0:	b490      	push	{r4, r7}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <SDMMC_GetCmdError+0x48>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a0f      	ldr	r2, [pc, #60]	; (80094ec <SDMMC_GetCmdError+0x4c>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	0a5b      	lsrs	r3, r3, #9
 80094b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80094bc:	4623      	mov	r3, r4
 80094be:	1e5c      	subs	r4, r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094c8:	e009      	b.n	80094de <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0f2      	beq.n	80094bc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	22c5      	movs	r2, #197	; 0xc5
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc90      	pop	{r4, r7}
 80094e6:	4770      	bx	lr
 80094e8:	20000008 	.word	0x20000008
 80094ec:	10624dd3 	.word	0x10624dd3

080094f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80094f0:	b590      	push	{r4, r7, lr}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	460b      	mov	r3, r1
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094fe:	4b6f      	ldr	r3, [pc, #444]	; (80096bc <SDMMC_GetCmdResp1+0x1cc>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a6f      	ldr	r2, [pc, #444]	; (80096c0 <SDMMC_GetCmdResp1+0x1d0>)
 8009504:	fba2 2303 	umull	r2, r3, r2, r3
 8009508:	0a5b      	lsrs	r3, r3, #9
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009510:	4623      	mov	r3, r4
 8009512:	1e5c      	subs	r4, r3, #1
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009518:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800951c:	e0c9      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800952a:	2b00      	cmp	r3, #0
 800952c:	d0f0      	beq.n	8009510 <SDMMC_GetCmdResp1+0x20>
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1eb      	bne.n	8009510 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2204      	movs	r2, #4
 8009548:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800954a:	2304      	movs	r3, #4
 800954c:	e0b1      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d004      	beq.n	8009564 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009560:	2301      	movs	r3, #1
 8009562:	e0a6      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	22c5      	movs	r2, #197	; 0xc5
 8009568:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7ff fde3 	bl	8009136 <SDIO_GetCommandResponse>
 8009570:	4603      	mov	r3, r0
 8009572:	461a      	mov	r2, r3
 8009574:	7afb      	ldrb	r3, [r7, #11]
 8009576:	4293      	cmp	r3, r2
 8009578:	d001      	beq.n	800957e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957a:	2301      	movs	r3, #1
 800957c:	e099      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800957e:	2100      	movs	r1, #0
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff fde5 	bl	8009150 <SDIO_GetResponse>
 8009586:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4b4e      	ldr	r3, [pc, #312]	; (80096c4 <SDMMC_GetCmdResp1+0x1d4>)
 800958c:	4013      	ands	r3, r2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009592:	2300      	movs	r3, #0
 8009594:	e08d      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	da02      	bge.n	80095a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800959c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095a0:	e087      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095ac:	2340      	movs	r3, #64	; 0x40
 80095ae:	e080      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095ba:	2380      	movs	r3, #128	; 0x80
 80095bc:	e079      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095cc:	e071      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095dc:	e069      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ec:	e061      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095fc:	e059      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800960c:	e051      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800961c:	e049      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009628:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800962c:	e041      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800963c:	e039      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800964c:	e031      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d002      	beq.n	800965e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009658:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800965c:	e029      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d002      	beq.n	800966e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009668:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800966c:	e021      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009678:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800967c:	e019      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009688:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800968c:	e011      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009698:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800969c:	e009      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096ac:	e001      	b.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd90      	pop	{r4, r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000008 	.word	0x20000008
 80096c0:	10624dd3 	.word	0x10624dd3
 80096c4:	fdffe008 	.word	0xfdffe008

080096c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80096c8:	b490      	push	{r4, r7}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096d0:	4b1e      	ldr	r3, [pc, #120]	; (800974c <SDMMC_GetCmdResp2+0x84>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a1e      	ldr	r2, [pc, #120]	; (8009750 <SDMMC_GetCmdResp2+0x88>)
 80096d6:	fba2 2303 	umull	r2, r3, r2, r3
 80096da:	0a5b      	lsrs	r3, r3, #9
 80096dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80096e4:	4623      	mov	r3, r4
 80096e6:	1e5c      	subs	r4, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096f0:	e026      	b.n	8009740 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0f0      	beq.n	80096e4 <SDMMC_GetCmdResp2+0x1c>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1eb      	bne.n	80096e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	f003 0304 	and.w	r3, r3, #4
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2204      	movs	r2, #4
 800971c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800971e:	2304      	movs	r3, #4
 8009720:	e00e      	b.n	8009740 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009734:	2301      	movs	r3, #1
 8009736:	e003      	b.n	8009740 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	22c5      	movs	r2, #197	; 0xc5
 800973c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bc90      	pop	{r4, r7}
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000008 	.word	0x20000008
 8009750:	10624dd3 	.word	0x10624dd3

08009754 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009754:	b490      	push	{r4, r7}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800975c:	4b18      	ldr	r3, [pc, #96]	; (80097c0 <SDMMC_GetCmdResp3+0x6c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a18      	ldr	r2, [pc, #96]	; (80097c4 <SDMMC_GetCmdResp3+0x70>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	0a5b      	lsrs	r3, r3, #9
 8009768:	f241 3288 	movw	r2, #5000	; 0x1388
 800976c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009770:	4623      	mov	r3, r4
 8009772:	1e5c      	subs	r4, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800977c:	e01b      	b.n	80097b6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009782:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0f0      	beq.n	8009770 <SDMMC_GetCmdResp3+0x1c>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1eb      	bne.n	8009770 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2204      	movs	r2, #4
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097aa:	2304      	movs	r3, #4
 80097ac:	e003      	b.n	80097b6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	22c5      	movs	r2, #197	; 0xc5
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bc90      	pop	{r4, r7}
 80097be:	4770      	bx	lr
 80097c0:	20000008 	.word	0x20000008
 80097c4:	10624dd3 	.word	0x10624dd3

080097c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097c8:	b590      	push	{r4, r7, lr}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	460b      	mov	r3, r1
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097d6:	4b34      	ldr	r3, [pc, #208]	; (80098a8 <SDMMC_GetCmdResp6+0xe0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a34      	ldr	r2, [pc, #208]	; (80098ac <SDMMC_GetCmdResp6+0xe4>)
 80097dc:	fba2 2303 	umull	r2, r3, r2, r3
 80097e0:	0a5b      	lsrs	r3, r3, #9
 80097e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80097ea:	4623      	mov	r3, r4
 80097ec:	1e5c      	subs	r4, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097f6:	e052      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009804:	2b00      	cmp	r3, #0
 8009806:	d0f0      	beq.n	80097ea <SDMMC_GetCmdResp6+0x22>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1eb      	bne.n	80097ea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009816:	f003 0304 	and.w	r3, r3, #4
 800981a:	2b00      	cmp	r3, #0
 800981c:	d004      	beq.n	8009828 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2204      	movs	r2, #4
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009824:	2304      	movs	r3, #4
 8009826:	e03a      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d004      	beq.n	800983e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800983a:	2301      	movs	r3, #1
 800983c:	e02f      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fc79 	bl	8009136 <SDIO_GetCommandResponse>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	4293      	cmp	r3, r2
 800984c:	d001      	beq.n	8009852 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800984e:	2301      	movs	r3, #1
 8009850:	e025      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	22c5      	movs	r2, #197	; 0xc5
 8009856:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009858:	2100      	movs	r1, #0
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fc78 	bl	8009150 <SDIO_GetResponse>
 8009860:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	0c1b      	lsrs	r3, r3, #16
 8009870:	b29a      	uxth	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009876:	2300      	movs	r3, #0
 8009878:	e011      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009888:	e009      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009898:	e001      	b.n	800989e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800989a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd90      	pop	{r4, r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000008 	.word	0x20000008
 80098ac:	10624dd3 	.word	0x10624dd3

080098b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80098b0:	b490      	push	{r4, r7}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098b8:	4b21      	ldr	r3, [pc, #132]	; (8009940 <SDMMC_GetCmdResp7+0x90>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a21      	ldr	r2, [pc, #132]	; (8009944 <SDMMC_GetCmdResp7+0x94>)
 80098be:	fba2 2303 	umull	r2, r3, r2, r3
 80098c2:	0a5b      	lsrs	r3, r3, #9
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80098cc:	4623      	mov	r3, r4
 80098ce:	1e5c      	subs	r4, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098d8:	e02c      	b.n	8009934 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0f0      	beq.n	80098cc <SDMMC_GetCmdResp7+0x1c>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1eb      	bne.n	80098cc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2204      	movs	r2, #4
 8009904:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009906:	2304      	movs	r3, #4
 8009908:	e014      	b.n	8009934 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800991c:	2301      	movs	r3, #1
 800991e:	e009      	b.n	8009934 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2240      	movs	r2, #64	; 0x40
 8009930:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009932:	2300      	movs	r3, #0
  
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bc90      	pop	{r4, r7}
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	20000008 	.word	0x20000008
 8009944:	10624dd3 	.word	0x10624dd3

08009948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009948:	b084      	sub	sp, #16
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	f107 001c 	add.w	r0, r7, #28
 8009956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	2b01      	cmp	r3, #1
 800995e:	d122      	bne.n	80099a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800998a:	2b01      	cmp	r3, #1
 800998c:	d105      	bne.n	800999a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f94a 	bl	8009c34 <USB_CoreReset>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]
 80099a4:	e01a      	b.n	80099dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f93e 	bl	8009c34 <USB_CoreReset>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	639a      	str	r2, [r3, #56]	; 0x38
 80099ce:	e005      	b.n	80099dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d10b      	bne.n	80099fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f043 0206 	orr.w	r2, r3, #6
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f043 0220 	orr.w	r2, r3, #32
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a06:	b004      	add	sp, #16
 8009a08:	4770      	bx	lr

08009a0a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f043 0201 	orr.w	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f023 0201 	bic.w	r2, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d106      	bne.n	8009a7a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	60da      	str	r2, [r3, #12]
 8009a78:	e00b      	b.n	8009a92 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]
 8009a8c:	e001      	b.n	8009a92 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e003      	b.n	8009a9a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009a92:	2032      	movs	r0, #50	; 0x32
 8009a94:	f7f9 f9e8 	bl	8002e68 <HAL_Delay>

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	019b      	lsls	r3, r3, #6
 8009ab6:	f043 0220 	orr.w	r2, r3, #32
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a09      	ldr	r2, [pc, #36]	; (8009aec <USB_FlushTxFifo+0x48>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d901      	bls.n	8009ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e006      	b.n	8009ade <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d0f0      	beq.n	8009abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	00030d40 	.word	0x00030d40

08009af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2210      	movs	r2, #16
 8009b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3301      	adds	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4a09      	ldr	r2, [pc, #36]	; (8009b30 <USB_FlushRxFifo+0x40>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d901      	bls.n	8009b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e006      	b.n	8009b22 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0310 	and.w	r3, r3, #16
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d0f0      	beq.n	8009b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	00030d40 	.word	0x00030d40

08009b34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b089      	sub	sp, #36	; 0x24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	4611      	mov	r1, r2
 8009b40:	461a      	mov	r2, r3
 8009b42:	460b      	mov	r3, r1
 8009b44:	71fb      	strb	r3, [r7, #7]
 8009b46:	4613      	mov	r3, r2
 8009b48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d11a      	bne.n	8009b90 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b5a:	88bb      	ldrh	r3, [r7, #4]
 8009b5c:	3303      	adds	r3, #3
 8009b5e:	089b      	lsrs	r3, r3, #2
 8009b60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e00f      	b.n	8009b88 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	031a      	lsls	r2, r3, #12
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b74:	461a      	mov	r2, r3
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	3301      	adds	r3, #1
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d3eb      	bcc.n	8009b68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3724      	adds	r7, #36	; 0x24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b089      	sub	sp, #36	; 0x24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009bb4:	88fb      	ldrh	r3, [r7, #6]
 8009bb6:	3303      	adds	r3, #3
 8009bb8:	089b      	lsrs	r3, r3, #2
 8009bba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61bb      	str	r3, [r7, #24]
 8009bc0:	e00b      	b.n	8009bda <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d3ef      	bcc.n	8009bc2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009be2:	69fb      	ldr	r3, [r7, #28]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3724      	adds	r7, #36	; 0x24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c08:	68fb      	ldr	r3, [r7, #12]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	f003 0301 	and.w	r3, r3, #1
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
	...

08009c34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4a13      	ldr	r2, [pc, #76]	; (8009c98 <USB_CoreReset+0x64>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d901      	bls.n	8009c52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e01b      	b.n	8009c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	daf2      	bge.n	8009c40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	f043 0201 	orr.w	r2, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <USB_CoreReset+0x64>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d901      	bls.n	8009c7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e006      	b.n	8009c8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f003 0301 	and.w	r3, r3, #1
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d0f0      	beq.n	8009c6a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	00030d40 	.word	0x00030d40

08009c9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	f107 001c 	add.w	r0, r7, #28
 8009caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cb8:	461a      	mov	r2, r3
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d018      	beq.n	8009d14 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d10a      	bne.n	8009cfe <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cf6:	f043 0304 	orr.w	r3, r3, #4
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	e014      	b.n	8009d28 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d0c:	f023 0304 	bic.w	r3, r3, #4
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	e009      	b.n	8009d28 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d22:	f023 0304 	bic.w	r3, r3, #4
 8009d26:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009d28:	2110      	movs	r1, #16
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff feba 	bl	8009aa4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff fedd 	bl	8009af0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	e015      	b.n	8009d68 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3301      	adds	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d3e5      	bcc.n	8009d3c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009d70:	2101      	movs	r1, #1
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f8ac 	bl	8009ed0 <USB_DriveVbus>

  HAL_Delay(200U);
 8009d78:	20c8      	movs	r0, #200	; 0xc8
 8009d7a:	f7f9 f875 	bl	8002e68 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00b      	beq.n	8009db0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a14      	ldr	r2, [pc, #80]	; (8009df4 <USB_HostInit+0x158>)
 8009da4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a13      	ldr	r2, [pc, #76]	; (8009df8 <USB_HostInit+0x15c>)
 8009daa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009dae:	e009      	b.n	8009dc4 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2280      	movs	r2, #128	; 0x80
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a10      	ldr	r2, [pc, #64]	; (8009dfc <USB_HostInit+0x160>)
 8009dba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a10      	ldr	r2, [pc, #64]	; (8009e00 <USB_HostInit+0x164>)
 8009dc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	f043 0210 	orr.w	r2, r3, #16
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <USB_HostInit+0x168>)
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dee:	b004      	add	sp, #16
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	01000200 	.word	0x01000200
 8009df8:	00e00300 	.word	0x00e00300
 8009dfc:	00600080 	.word	0x00600080
 8009e00:	004000e0 	.word	0x004000e0
 8009e04:	a3200008 	.word	0xa3200008

08009e08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e26:	f023 0303 	bic.w	r3, r3, #3
 8009e2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	f003 0303 	and.w	r3, r3, #3
 8009e3a:	68f9      	ldr	r1, [r7, #12]
 8009e3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009e40:	4313      	orrs	r3, r2
 8009e42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d107      	bne.n	8009e5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e50:	461a      	mov	r2, r3
 8009e52:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009e56:	6053      	str	r3, [r2, #4]
 8009e58:	e009      	b.n	8009e6e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d106      	bne.n	8009e6e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e66:	461a      	mov	r2, r3
 8009e68:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e6c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eaa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009eac:	2064      	movs	r0, #100	; 0x64
 8009eae:	f7f8 ffdb 	bl	8002e68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ebe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ec0:	200a      	movs	r0, #10
 8009ec2:	f7f8 ffd1 	bl	8002e68 <HAL_Delay>

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009ef4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <USB_DriveVbus+0x44>
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d106      	bne.n	8009f14 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f12:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f1e:	d109      	bne.n	8009f34 <USB_DriveVbus+0x64>
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d106      	bne.n	8009f34 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f32:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	0c5b      	lsrs	r3, r3, #17
 8009f60:	f003 0303 	and.w	r3, r3, #3
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	b29b      	uxth	r3, r3
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	70fb      	strb	r3, [r7, #3]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70bb      	strb	r3, [r7, #2]
 8009faa:	4613      	mov	r3, r2
 8009fac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009fca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d87e      	bhi.n	800a0d0 <USB_HC_Init+0x13c>
 8009fd2:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <USB_HC_Init+0x44>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	08009fe9 	.word	0x08009fe9
 8009fdc:	0800a093 	.word	0x0800a093
 8009fe0:	08009fe9 	.word	0x08009fe9
 8009fe4:	0800a055 	.word	0x0800a055
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f240 439d 	movw	r3, #1181	; 0x49d
 8009ffa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ffc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a000:	2b00      	cmp	r3, #0
 800a002:	da10      	bge.n	800a026 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	0151      	lsls	r1, r2, #5
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	440a      	add	r2, r1
 800a01a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a01e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a022:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a024:	e057      	b.n	800a0d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d051      	beq.n	800a0d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	0151      	lsls	r1, r2, #5
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	440a      	add	r2, r1
 800a048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a04c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a050:	60d3      	str	r3, [r2, #12]
      break;
 800a052:	e040      	b.n	800a0d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a060:	461a      	mov	r2, r3
 800a062:	f240 639d 	movw	r3, #1693	; 0x69d
 800a066:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a068:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	da34      	bge.n	800a0da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4413      	add	r3, r2
 800a078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	0151      	lsls	r1, r2, #5
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	440a      	add	r2, r1
 800a086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a08e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a090:	e023      	b.n	800a0da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f240 2325 	movw	r3, #549	; 0x225
 800a0a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a0a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da17      	bge.n	800a0de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	0151      	lsls	r1, r2, #5
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a0cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a0ce:	e006      	b.n	800a0de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d4:	e004      	b.n	800a0e0 <USB_HC_Init+0x14c>
      break;
 800a0d6:	bf00      	nop
 800a0d8:	e002      	b.n	800a0e0 <USB_HC_Init+0x14c>
      break;
 800a0da:	bf00      	nop
 800a0dc:	e000      	b.n	800a0e0 <USB_HC_Init+0x14c>
      break;
 800a0de:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0e6:	699a      	ldr	r2, [r3, #24]
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f4:	68b9      	ldr	r1, [r7, #8]
 800a0f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a10a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da03      	bge.n	800a11a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a116:	613b      	str	r3, [r7, #16]
 800a118:	e001      	b.n	800a11e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a11e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a122:	2b02      	cmp	r3, #2
 800a124:	d103      	bne.n	800a12e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	e001      	b.n	800a132 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a132:	787b      	ldrb	r3, [r7, #1]
 800a134:	059b      	lsls	r3, r3, #22
 800a136:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a13a:	78bb      	ldrb	r3, [r7, #2]
 800a13c:	02db      	lsls	r3, r3, #11
 800a13e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a142:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a144:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a148:	049b      	lsls	r3, r3, #18
 800a14a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a14e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a150:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a152:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a156:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	0159      	lsls	r1, r3, #5
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	440b      	add	r3, r1
 800a164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a168:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a16e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a170:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a174:	2b03      	cmp	r3, #3
 800a176:	d10f      	bne.n	800a198 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	78fa      	ldrb	r2, [r7, #3]
 800a188:	0151      	lsls	r1, r2, #5
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	440a      	add	r2, r1
 800a18e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a196:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop

0800a1a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08c      	sub	sp, #48	; 0x30
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	785b      	ldrb	r3, [r3, #1]
 800a1be:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a1c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1c4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d028      	beq.n	800a224 <USB_HC_StartXfer+0x7c>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	791b      	ldrb	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d124      	bne.n	800a224 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10b      	bne.n	800a1f8 <USB_HC_StartXfer+0x50>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	795b      	ldrb	r3, [r3, #5]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d107      	bne.n	800a1f8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fa30 	bl	800a654 <USB_DoPing>
      return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e114      	b.n	800a422 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d112      	bne.n	800a224 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	4413      	add	r3, r2
 800a206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	0151      	lsls	r1, r2, #5
 800a210:	6a3a      	ldr	r2, [r7, #32]
 800a212:	440a      	add	r2, r1
 800a214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a218:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a21c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2200      	movs	r2, #0
 800a222:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d018      	beq.n	800a25e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	8912      	ldrh	r2, [r2, #8]
 800a234:	4413      	add	r3, r2
 800a236:	3b01      	subs	r3, #1
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	8912      	ldrh	r2, [r2, #8]
 800a23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a240:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a242:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a244:	8b7b      	ldrh	r3, [r7, #26]
 800a246:	429a      	cmp	r2, r3
 800a248:	d90b      	bls.n	800a262 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a24a:	8b7b      	ldrh	r3, [r7, #26]
 800a24c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a24e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	8912      	ldrh	r2, [r2, #8]
 800a254:	fb02 f203 	mul.w	r2, r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	611a      	str	r2, [r3, #16]
 800a25c:	e001      	b.n	800a262 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a25e:	2301      	movs	r3, #1
 800a260:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	78db      	ldrb	r3, [r3, #3]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d006      	beq.n	800a278 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a26a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	8912      	ldrh	r2, [r2, #8]
 800a270:	fb02 f203 	mul.w	r2, r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a282:	04d9      	lsls	r1, r3, #19
 800a284:	4b69      	ldr	r3, [pc, #420]	; (800a42c <USB_HC_StartXfer+0x284>)
 800a286:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a288:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	7a9b      	ldrb	r3, [r3, #10]
 800a28e:	075b      	lsls	r3, r3, #29
 800a290:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a294:	69f9      	ldr	r1, [r7, #28]
 800a296:	0148      	lsls	r0, r1, #5
 800a298:	6a39      	ldr	r1, [r7, #32]
 800a29a:	4401      	add	r1, r0
 800a29c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a2a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a2a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	68d9      	ldr	r1, [r3, #12]
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	015a      	lsls	r2, r3, #5
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2ba:	460a      	mov	r2, r1
 800a2bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	bf0c      	ite	eq
 800a2ce:	2301      	moveq	r3, #1
 800a2d0:	2300      	movne	r3, #0
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69fa      	ldr	r2, [r7, #28]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	6a3a      	ldr	r2, [r7, #32]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	7e7b      	ldrb	r3, [r7, #25]
 800a306:	075b      	lsls	r3, r3, #29
 800a308:	69f9      	ldr	r1, [r7, #28]
 800a30a:	0148      	lsls	r0, r1, #5
 800a30c:	6a39      	ldr	r1, [r7, #32]
 800a30e:	4401      	add	r1, r0
 800a310:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a314:	4313      	orrs	r3, r2
 800a316:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a42      	ldr	r2, [pc, #264]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a328:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a32a:	4b41      	ldr	r3, [pc, #260]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a332:	4a3f      	ldr	r2, [pc, #252]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a334:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	78db      	ldrb	r3, [r3, #3]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d006      	beq.n	800a34c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a33e:	4b3c      	ldr	r3, [pc, #240]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a346:	4a3a      	ldr	r2, [pc, #232]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	e005      	b.n	800a358 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a34c:	4b38      	ldr	r3, [pc, #224]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a354:	4a36      	ldr	r2, [pc, #216]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a356:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a358:	4b35      	ldr	r3, [pc, #212]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a360:	4a33      	ldr	r2, [pc, #204]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a362:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	6a3b      	ldr	r3, [r7, #32]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a370:	461a      	mov	r2, r3
 800a372:	4b2f      	ldr	r3, [pc, #188]	; (800a430 <USB_HC_StartXfer+0x288>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	e04f      	b.n	800a422 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	78db      	ldrb	r3, [r3, #3]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d14a      	bne.n	800a420 <USB_HC_StartXfer+0x278>
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d046      	beq.n	800a420 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	79db      	ldrb	r3, [r3, #7]
 800a396:	2b03      	cmp	r3, #3
 800a398:	d830      	bhi.n	800a3fc <USB_HC_StartXfer+0x254>
 800a39a:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <USB_HC_StartXfer+0x1f8>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3b1 	.word	0x0800a3b1
 800a3a4:	0800a3d5 	.word	0x0800a3d5
 800a3a8:	0800a3b1 	.word	0x0800a3b1
 800a3ac:	0800a3d5 	.word	0x0800a3d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	3303      	adds	r3, #3
 800a3b6:	089b      	lsrs	r3, r3, #2
 800a3b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a3ba:	8afa      	ldrh	r2, [r7, #22]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d91c      	bls.n	800a400 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	f043 0220 	orr.w	r2, r3, #32
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3d2:	e015      	b.n	800a400 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	3303      	adds	r3, #3
 800a3da:	089b      	lsrs	r3, r3, #2
 800a3dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a3de:	8afa      	ldrh	r2, [r7, #22]
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d90a      	bls.n	800a404 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a3fa:	e003      	b.n	800a404 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a3fc:	bf00      	nop
 800a3fe:	e002      	b.n	800a406 <USB_HC_StartXfer+0x25e>
        break;
 800a400:	bf00      	nop
 800a402:	e000      	b.n	800a406 <USB_HC_StartXfer+0x25e>
        break;
 800a404:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	68d9      	ldr	r1, [r3, #12]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	785a      	ldrb	r2, [r3, #1]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	b298      	uxth	r0, r3
 800a414:	2300      	movs	r3, #0
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	4603      	mov	r3, r0
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff fb8a 	bl	8009b34 <USB_WritePacket>
  }

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3728      	adds	r7, #40	; 0x28
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	1ff80000 	.word	0x1ff80000
 800a430:	20000154 	.word	0x20000154

0800a434 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	b29b      	uxth	r3, r3
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a456:	b480      	push	{r7}
 800a458:	b087      	sub	sp, #28
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	4413      	add	r3, r2
 800a476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	0c9b      	lsrs	r3, r3, #18
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <USB_HC_Halt+0x3a>
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d16c      	bne.n	800a56a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4ae:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d143      	bne.n	800a544 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	015a      	lsls	r2, r3, #5
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	0151      	lsls	r1, r2, #5
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	440a      	add	r2, r1
 800a4d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	4413      	add	r3, r2
 800a504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	0151      	lsls	r1, r2, #5
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	440a      	add	r2, r1
 800a512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a51a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	3301      	adds	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a528:	d81d      	bhi.n	800a566 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	4413      	add	r3, r2
 800a532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a53c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a540:	d0ec      	beq.n	800a51c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a542:	e080      	b.n	800a646 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a55e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a562:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a564:	e06f      	b.n	800a646 <USB_HC_Halt+0x1f0>
          break;
 800a566:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a568:	e06d      	b.n	800a646 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	4413      	add	r3, r2
 800a572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	0151      	lsls	r1, r2, #5
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	440a      	add	r2, r1
 800a580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a588:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d143      	bne.n	800a622 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	693a      	ldr	r2, [r7, #16]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5d8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	0151      	lsls	r1, r2, #5
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	440a      	add	r2, r1
 800a5f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5f8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	617b      	str	r3, [r7, #20]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a606:	d81d      	bhi.n	800a644 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a61a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a61e:	d0ec      	beq.n	800a5fa <USB_HC_Halt+0x1a4>
 800a620:	e011      	b.n	800a646 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	440a      	add	r2, r1
 800a638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a63c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	e000      	b.n	800a646 <USB_HC_Halt+0x1f0>
          break;
 800a644:	bf00      	nop
    }
  }

  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	371c      	adds	r7, #28
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	460b      	mov	r3, r1
 800a65e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a668:	2301      	movs	r3, #1
 800a66a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	04da      	lsls	r2, r3, #19
 800a670:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <USB_DoPing+0x74>)
 800a672:	4013      	ands	r3, r2
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	0151      	lsls	r1, r2, #5
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	440a      	add	r2, r1
 800a67c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a684:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a69c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	1ff80000 	.word	0x1ff80000

0800a6cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff f9a5 	bl	8009a2c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a6e2:	2110      	movs	r1, #16
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff f9dd 	bl	8009aa4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff fa00 	bl	8009af0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	613b      	str	r3, [r7, #16]
 800a6f4:	e01f      	b.n	800a736 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a70c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a714:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a71c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a72a:	461a      	mov	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	3301      	adds	r3, #1
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	2b0f      	cmp	r3, #15
 800a73a:	d9dc      	bls.n	800a6f6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a73c:	2300      	movs	r3, #0
 800a73e:	613b      	str	r3, [r7, #16]
 800a740:	e034      	b.n	800a7ac <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a758:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a760:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a768:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a776:	461a      	mov	r2, r3
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	3301      	adds	r3, #1
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a788:	d80c      	bhi.n	800a7a4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7a0:	d0ec      	beq.n	800a77c <USB_StopHost+0xb0>
 800a7a2:	e000      	b.n	800a7a6 <USB_StopHost+0xda>
        break;
 800a7a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	2b0f      	cmp	r3, #15
 800a7b0:	d9c7      	bls.n	800a742 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a7be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7ff f91e 	bl	8009a0a <USB_EnableGlobalInt>

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3718      	adds	r7, #24
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a7d8:	b590      	push	{r4, r7, lr}
 800a7da:	b089      	sub	sp, #36	; 0x24
 800a7dc:	af04      	add	r7, sp, #16
 800a7de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	2102      	movs	r1, #2
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fc68 	bl	800b0bc <USBH_FindInterface>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	2bff      	cmp	r3, #255	; 0xff
 800a7f4:	d002      	beq.n	800a7fc <USBH_CDC_InterfaceInit+0x24>
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d901      	bls.n	800a800 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e13d      	b.n	800aa7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fc3d 	bl	800b084 <USBH_SelectInterface>
 800a80a:	4603      	mov	r3, r0
 800a80c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a814:	2302      	movs	r3, #2
 800a816:	e131      	b.n	800aa7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a81e:	2050      	movs	r0, #80	; 0x50
 800a820:	f002 fa04 	bl	800cc2c <malloc>
 800a824:	4603      	mov	r3, r0
 800a826:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a838:	2302      	movs	r3, #2
 800a83a:	e11f      	b.n	800aa7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a83c:	2250      	movs	r2, #80	; 0x50
 800a83e:	2100      	movs	r1, #0
 800a840:	68b8      	ldr	r0, [r7, #8]
 800a842:	f002 fa03 	bl	800cc4c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	211a      	movs	r1, #26
 800a84c:	fb01 f303 	mul.w	r3, r1, r3
 800a850:	4413      	add	r3, r2
 800a852:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	b25b      	sxtb	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	da15      	bge.n	800a88a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	211a      	movs	r1, #26
 800a864:	fb01 f303 	mul.w	r3, r1, r3
 800a868:	4413      	add	r3, r2
 800a86a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a86e:	781a      	ldrb	r2, [r3, #0]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	211a      	movs	r1, #26
 800a87a:	fb01 f303 	mul.w	r3, r1, r3
 800a87e:	4413      	add	r3, r2
 800a880:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a884:	881a      	ldrh	r2, [r3, #0]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fe36 	bl	800c502 <USBH_AllocPipe>
 800a896:	4603      	mov	r3, r0
 800a898:	461a      	mov	r2, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	7819      	ldrb	r1, [r3, #0]
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	7858      	ldrb	r0, [r3, #1]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	8952      	ldrh	r2, [r2, #10]
 800a8b6:	9202      	str	r2, [sp, #8]
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	9201      	str	r2, [sp, #4]
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	4623      	mov	r3, r4
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 fdee 	bl	800c4a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f002 f8fb 	bl	800cacc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2200      	movs	r2, #0
 800a8da:	210a      	movs	r1, #10
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fbed 	bl	800b0bc <USBH_FindInterface>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	2bff      	cmp	r3, #255	; 0xff
 800a8ea:	d002      	beq.n	800a8f2 <USBH_CDC_InterfaceInit+0x11a>
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d901      	bls.n	800a8f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a8f2:	2302      	movs	r3, #2
 800a8f4:	e0c2      	b.n	800aa7c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	211a      	movs	r1, #26
 800a8fc:	fb01 f303 	mul.w	r3, r1, r3
 800a900:	4413      	add	r3, r2
 800a902:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	da16      	bge.n	800a93c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	211a      	movs	r1, #26
 800a914:	fb01 f303 	mul.w	r3, r1, r3
 800a918:	4413      	add	r3, r2
 800a91a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	211a      	movs	r1, #26
 800a92a:	fb01 f303 	mul.w	r3, r1, r3
 800a92e:	4413      	add	r3, r2
 800a930:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a934:	881a      	ldrh	r2, [r3, #0]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	835a      	strh	r2, [r3, #26]
 800a93a:	e015      	b.n	800a968 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	211a      	movs	r1, #26
 800a942:	fb01 f303 	mul.w	r3, r1, r3
 800a946:	4413      	add	r3, r2
 800a948:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a94c:	781a      	ldrb	r2, [r3, #0]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	211a      	movs	r1, #26
 800a958:	fb01 f303 	mul.w	r3, r1, r3
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a962:	881a      	ldrh	r2, [r3, #0]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	211a      	movs	r1, #26
 800a96e:	fb01 f303 	mul.w	r3, r1, r3
 800a972:	4413      	add	r3, r2
 800a974:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	da16      	bge.n	800a9ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	211a      	movs	r1, #26
 800a986:	fb01 f303 	mul.w	r3, r1, r3
 800a98a:	4413      	add	r3, r2
 800a98c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a990:	781a      	ldrb	r2, [r3, #0]
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	211a      	movs	r1, #26
 800a99c:	fb01 f303 	mul.w	r3, r1, r3
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a9a6:	881a      	ldrh	r2, [r3, #0]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	835a      	strh	r2, [r3, #26]
 800a9ac:	e015      	b.n	800a9da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	211a      	movs	r1, #26
 800a9b4:	fb01 f303 	mul.w	r3, r1, r3
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a9be:	781a      	ldrb	r2, [r3, #0]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	211a      	movs	r1, #26
 800a9ca:	fb01 f303 	mul.w	r3, r1, r3
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a9d4:	881a      	ldrh	r2, [r3, #0]
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	7b9b      	ldrb	r3, [r3, #14]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 fd8e 	bl	800c502 <USBH_AllocPipe>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	7bdb      	ldrb	r3, [r3, #15]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fd84 	bl	800c502 <USBH_AllocPipe>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	7b59      	ldrb	r1, [r3, #13]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	7b98      	ldrb	r0, [r3, #14]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	8b12      	ldrh	r2, [r2, #24]
 800aa1a:	9202      	str	r2, [sp, #8]
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	9201      	str	r2, [sp, #4]
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	4623      	mov	r3, r4
 800aa24:	4602      	mov	r2, r0
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fd3c 	bl	800c4a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	7b19      	ldrb	r1, [r3, #12]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	7bd8      	ldrb	r0, [r3, #15]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	8b52      	ldrh	r2, [r2, #26]
 800aa44:	9202      	str	r2, [sp, #8]
 800aa46:	2202      	movs	r2, #2
 800aa48:	9201      	str	r2, [sp, #4]
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	4602      	mov	r2, r0
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fd27 	bl	800c4a4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	7b5b      	ldrb	r3, [r3, #13]
 800aa62:	2200      	movs	r2, #0
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f002 f830 	bl	800cacc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	7b1b      	ldrb	r3, [r3, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f002 f829 	bl	800cacc <USBH_LL_SetToggle>

  return USBH_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd90      	pop	{r4, r7, pc}

0800aa84 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00e      	beq.n	800aabc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 fd1c 	bl	800c4e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f001 fd47 	bl	800c544 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	7b1b      	ldrb	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00e      	beq.n	800aae2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	7b1b      	ldrb	r3, [r3, #12]
 800aac8:	4619      	mov	r1, r3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 fd09 	bl	800c4e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	7b1b      	ldrb	r3, [r3, #12]
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f001 fd34 	bl	800c544 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	7b5b      	ldrb	r3, [r3, #13]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00e      	beq.n	800ab08 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	7b5b      	ldrb	r3, [r3, #13]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 fcf6 	bl	800c4e2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	7b5b      	ldrb	r3, [r3, #13]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 fd21 	bl	800c544 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f002 f88d 	bl	800cc3c <free>
    phost->pActiveClass->pData = 0U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab28:	2200      	movs	r2, #0
 800ab2a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b084      	sub	sp, #16
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	3340      	adds	r3, #64	; 0x40
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f8b1 	bl	800acb6 <GetLineCoding>
 800ab54:	4603      	mov	r3, r0
 800ab56:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab64:	2102      	movs	r1, #2
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d877      	bhi.n	800ac88 <USBH_CDC_Process+0x114>
 800ab98:	a201      	add	r2, pc, #4	; (adr r2, 800aba0 <USBH_CDC_Process+0x2c>)
 800ab9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9e:	bf00      	nop
 800aba0:	0800abb5 	.word	0x0800abb5
 800aba4:	0800abbb 	.word	0x0800abbb
 800aba8:	0800abeb 	.word	0x0800abeb
 800abac:	0800ac5f 	.word	0x0800ac5f
 800abb0:	0800ac6d 	.word	0x0800ac6d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
      break;
 800abb8:	e06d      	b.n	800ac96 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f897 	bl	800acf4 <SetLineCoding>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d104      	bne.n	800abda <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800abd8:	e058      	b.n	800ac8c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d055      	beq.n	800ac8c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2204      	movs	r2, #4
 800abe4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800abe8:	e050      	b.n	800ac8c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	3340      	adds	r3, #64	; 0x40
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f860 	bl	800acb6 <GetLineCoding>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d126      	bne.n	800ac4e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac12:	791b      	ldrb	r3, [r3, #4]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d13b      	bne.n	800ac90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac22:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d133      	bne.n	800ac90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac32:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d12b      	bne.n	800ac90 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac40:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d124      	bne.n	800ac90 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f95a 	bl	800af00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac4c:	e020      	b.n	800ac90 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d01d      	beq.n	800ac90 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2204      	movs	r2, #4
 800ac58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ac5c:	e018      	b.n	800ac90 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f867 	bl	800ad32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f8dc 	bl	800ae22 <CDC_ProcessReception>
      break;
 800ac6a:	e014      	b.n	800ac96 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 ffe5 	bl	800bc3e <USBH_ClrFeature>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac78:	7bbb      	ldrb	r3, [r7, #14]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10a      	bne.n	800ac94 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ac86:	e005      	b.n	800ac94 <USBH_CDC_Process+0x120>

    default:
      break;
 800ac88:	bf00      	nop
 800ac8a:	e004      	b.n	800ac96 <USBH_CDC_Process+0x122>
      break;
 800ac8c:	bf00      	nop
 800ac8e:	e002      	b.n	800ac96 <USBH_CDC_Process+0x122>
      break;
 800ac90:	bf00      	nop
 800ac92:	e000      	b.n	800ac96 <USBH_CDC_Process+0x122>
      break;
 800ac94:	bf00      	nop

  }

  return status;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	22a1      	movs	r2, #161	; 0xa1
 800acc4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2221      	movs	r2, #33	; 0x21
 800acca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2207      	movs	r2, #7
 800acdc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2207      	movs	r2, #7
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f001 f98a 	bl	800bffe <USBH_CtlReq>
 800acea:	4603      	mov	r3, r0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2221      	movs	r2, #33	; 0x21
 800ad02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2220      	movs	r2, #32
 800ad08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2207      	movs	r2, #7
 800ad1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2207      	movs	r2, #7
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f001 f96b 	bl	800bffe <USBH_CtlReq>
 800ad28:	4603      	mov	r3, r0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af02      	add	r7, sp, #8
 800ad38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad40:	69db      	ldr	r3, [r3, #28]
 800ad42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad44:	2300      	movs	r3, #0
 800ad46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d002      	beq.n	800ad58 <CDC_ProcessTransmission+0x26>
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d025      	beq.n	800ada2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800ad56:	e060      	b.n	800ae1a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	8b12      	ldrh	r2, [r2, #24]
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d90c      	bls.n	800ad7e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	69d9      	ldr	r1, [r3, #28]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	8b1a      	ldrh	r2, [r3, #24]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	7b58      	ldrb	r0, [r3, #13]
 800ad70:	2301      	movs	r3, #1
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	4603      	mov	r3, r0
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 fb51 	bl	800c41e <USBH_BulkSendData>
 800ad7c:	e00c      	b.n	800ad98 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	7b58      	ldrb	r0, [r3, #13]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4603      	mov	r3, r0
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f001 fb43 	bl	800c41e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ada0:	e03b      	b.n	800ae1a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	7b5b      	ldrb	r3, [r3, #13]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 fe65 	bl	800ca78 <USBH_LL_GetURBState>
 800adae:	4603      	mov	r3, r0
 800adb0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d128      	bne.n	800ae0a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	8b12      	ldrh	r2, [r2, #24]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d90e      	bls.n	800ade2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	8b12      	ldrh	r2, [r2, #24]
 800adcc:	1a9a      	subs	r2, r3, r2
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	69db      	ldr	r3, [r3, #28]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	8b12      	ldrh	r2, [r2, #24]
 800adda:	441a      	add	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	61da      	str	r2, [r3, #28]
 800ade0:	e002      	b.n	800ade8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b00      	cmp	r3, #0
 800adee:	d004      	beq.n	800adfa <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800adf8:	e00e      	b.n	800ae18 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f868 	bl	800aed8 <USBH_CDC_TransmitCallback>
      break;
 800ae08:	e006      	b.n	800ae18 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800ae0a:	7afb      	ldrb	r3, [r7, #11]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d103      	bne.n	800ae18 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ae18:	bf00      	nop
  }
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b086      	sub	sp, #24
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae34:	2300      	movs	r3, #0
 800ae36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d002      	beq.n	800ae48 <CDC_ProcessReception+0x26>
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d00e      	beq.n	800ae64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ae46:	e043      	b.n	800aed0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	6a19      	ldr	r1, [r3, #32]
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	8b5a      	ldrh	r2, [r3, #26]
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	7b1b      	ldrb	r3, [r3, #12]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 fb07 	bl	800c468 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2204      	movs	r2, #4
 800ae5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ae62:	e035      	b.n	800aed0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	7b1b      	ldrb	r3, [r3, #12]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 fe04 	bl	800ca78 <USBH_LL_GetURBState>
 800ae70:	4603      	mov	r3, r0
 800ae72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ae74:	7cfb      	ldrb	r3, [r7, #19]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d129      	bne.n	800aece <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	7b1b      	ldrb	r3, [r3, #12]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 fd67 	bl	800c954 <USBH_LL_GetLastXferSize>
 800ae86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d016      	beq.n	800aec0 <CDC_ProcessReception+0x9e>
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	8b5b      	ldrh	r3, [r3, #26]
 800ae96:	461a      	mov	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d910      	bls.n	800aec0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	1ad2      	subs	r2, r2, r3
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	6a1a      	ldr	r2, [r3, #32]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	441a      	add	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2203      	movs	r2, #3
 800aeba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800aebe:	e006      	b.n	800aece <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f80f 	bl	800aeec <USBH_CDC_ReceiveCallback>
      break;
 800aece:	bf00      	nop
  }
}
 800aed0:	bf00      	nop
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800af28:	2302      	movs	r3, #2
 800af2a:	e029      	b.n	800af80 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	79fa      	ldrb	r2, [r7, #7]
 800af30:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f81f 	bl	800af88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d003      	beq.n	800af78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f001 fc39 	bl	800c7f0 <USBH_LL_Init>

  return USBH_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af94:	2300      	movs	r3, #0
 800af96:	60fb      	str	r3, [r7, #12]
 800af98:	e009      	b.n	800afae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	33e0      	adds	r3, #224	; 0xe0
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	2200      	movs	r2, #0
 800afa6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3301      	adds	r3, #1
 800afac:	60fb      	str	r3, [r7, #12]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2b0e      	cmp	r3, #14
 800afb2:	d9f2      	bls.n	800af9a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800afb4:	2300      	movs	r3, #0
 800afb6:	60fb      	str	r3, [r7, #12]
 800afb8:	e009      	b.n	800afce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afc4:	2200      	movs	r2, #0
 800afc6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3301      	adds	r3, #1
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd4:	d3f1      	bcc.n	800afba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2240      	movs	r2, #64	; 0x40
 800affa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d016      	beq.n	800b072 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10e      	bne.n	800b06c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b054:	1c59      	adds	r1, r3, #1
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	33de      	adds	r3, #222	; 0xde
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
 800b06a:	e004      	b.n	800b076 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b06c:	2302      	movs	r3, #2
 800b06e:	73fb      	strb	r3, [r7, #15]
 800b070:	e001      	b.n	800b076 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b072:	2302      	movs	r3, #2
 800b074:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b076:	7bfb      	ldrb	r3, [r7, #15]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b084:	b480      	push	{r7}
 800b086:	b085      	sub	sp, #20
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b09a:	78fa      	ldrb	r2, [r7, #3]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d204      	bcs.n	800b0aa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	78fa      	ldrb	r2, [r7, #3]
 800b0a4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b0a8:	e001      	b.n	800b0ae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b0aa:	2302      	movs	r3, #2
 800b0ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	70fb      	strb	r3, [r7, #3]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70bb      	strb	r3, [r7, #2]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b0e4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0e6:	e025      	b.n	800b134 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	221a      	movs	r2, #26
 800b0ec:	fb02 f303 	mul.w	r3, r2, r3
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	3302      	adds	r3, #2
 800b0f8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	795b      	ldrb	r3, [r3, #5]
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	429a      	cmp	r2, r3
 800b102:	d002      	beq.n	800b10a <USBH_FindInterface+0x4e>
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	2bff      	cmp	r3, #255	; 0xff
 800b108:	d111      	bne.n	800b12e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b10e:	78ba      	ldrb	r2, [r7, #2]
 800b110:	429a      	cmp	r2, r3
 800b112:	d002      	beq.n	800b11a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b114:	78bb      	ldrb	r3, [r7, #2]
 800b116:	2bff      	cmp	r3, #255	; 0xff
 800b118:	d109      	bne.n	800b12e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b11e:	787a      	ldrb	r2, [r7, #1]
 800b120:	429a      	cmp	r2, r3
 800b122:	d002      	beq.n	800b12a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b124:	787b      	ldrb	r3, [r7, #1]
 800b126:	2bff      	cmp	r3, #255	; 0xff
 800b128:	d101      	bne.n	800b12e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	e006      	b.n	800b13c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	3301      	adds	r3, #1
 800b132:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d9d6      	bls.n	800b0e8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b13a:	23ff      	movs	r3, #255	; 0xff
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	371c      	adds	r7, #28
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 fb89 	bl	800c868 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b156:	2101      	movs	r1, #1
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 fca0 	bl	800ca9e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af04      	add	r7, sp, #16
 800b16e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b170:	2302      	movs	r3, #2
 800b172:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b01      	cmp	r3, #1
 800b182:	d102      	bne.n	800b18a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2203      	movs	r2, #3
 800b188:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b0b      	cmp	r3, #11
 800b192:	f200 81b3 	bhi.w	800b4fc <USBH_Process+0x394>
 800b196:	a201      	add	r2, pc, #4	; (adr r2, 800b19c <USBH_Process+0x34>)
 800b198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b19c:	0800b1cd 	.word	0x0800b1cd
 800b1a0:	0800b1ff 	.word	0x0800b1ff
 800b1a4:	0800b267 	.word	0x0800b267
 800b1a8:	0800b497 	.word	0x0800b497
 800b1ac:	0800b4fd 	.word	0x0800b4fd
 800b1b0:	0800b30b 	.word	0x0800b30b
 800b1b4:	0800b43d 	.word	0x0800b43d
 800b1b8:	0800b341 	.word	0x0800b341
 800b1bc:	0800b361 	.word	0x0800b361
 800b1c0:	0800b381 	.word	0x0800b381
 800b1c4:	0800b3af 	.word	0x0800b3af
 800b1c8:	0800b47f 	.word	0x0800b47f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8193 	beq.w	800b500 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b1e0:	20c8      	movs	r0, #200	; 0xc8
 800b1e2:	f001 fca6 	bl	800cb32 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 fb99 	bl	800c91e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b1fc:	e180      	b.n	800b500 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b204:	2b01      	cmp	r3, #1
 800b206:	d107      	bne.n	800b218 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2202      	movs	r2, #2
 800b214:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b216:	e182      	b.n	800b51e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b21e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b222:	d914      	bls.n	800b24e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b22a:	3301      	adds	r3, #1
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d903      	bls.n	800b246 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	220d      	movs	r2, #13
 800b242:	701a      	strb	r2, [r3, #0]
      break;
 800b244:	e16b      	b.n	800b51e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	701a      	strb	r2, [r3, #0]
      break;
 800b24c:	e167      	b.n	800b51e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b254:	f103 020a 	add.w	r2, r3, #10
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b25e:	200a      	movs	r0, #10
 800b260:	f001 fc67 	bl	800cb32 <USBH_Delay>
      break;
 800b264:	e15b      	b.n	800b51e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d005      	beq.n	800b27c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b276:	2104      	movs	r1, #4
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b27c:	2064      	movs	r0, #100	; 0x64
 800b27e:	f001 fc58 	bl	800cb32 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f001 fb26 	bl	800c8d4 <USBH_LL_GetSpeed>
 800b288:	4603      	mov	r3, r0
 800b28a:	461a      	mov	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2205      	movs	r2, #5
 800b296:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b298:	2100      	movs	r1, #0
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f001 f931 	bl	800c502 <USBH_AllocPipe>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b2a8:	2180      	movs	r1, #128	; 0x80
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f001 f929 	bl	800c502 <USBH_AllocPipe>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	7919      	ldrb	r1, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2cc:	b292      	uxth	r2, r2
 800b2ce:	9202      	str	r2, [sp, #8]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	9201      	str	r2, [sp, #4]
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2280      	movs	r2, #128	; 0x80
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 f8e2 	bl	800c4a4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	7959      	ldrb	r1, [r3, #5]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2f4:	b292      	uxth	r2, r2
 800b2f6:	9202      	str	r2, [sp, #8]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	9201      	str	r2, [sp, #4]
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	4603      	mov	r3, r0
 800b300:	2200      	movs	r2, #0
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 f8ce 	bl	800c4a4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b308:	e109      	b.n	800b51e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f90c 	bl	800b528 <USBH_HandleEnum>
 800b310:	4603      	mov	r3, r0
 800b312:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f040 80f3 	bne.w	800b504 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d103      	bne.n	800b338 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2208      	movs	r2, #8
 800b334:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b336:	e0e5      	b.n	800b504 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2207      	movs	r2, #7
 800b33c:	701a      	strb	r2, [r3, #0]
      break;
 800b33e:	e0e1      	b.n	800b504 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b346:	2b00      	cmp	r3, #0
 800b348:	f000 80de 	beq.w	800b508 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b352:	2101      	movs	r1, #1
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2208      	movs	r2, #8
 800b35c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b35e:	e0d3      	b.n	800b508 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b366:	b29b      	uxth	r3, r3
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fc20 	bl	800bbb0 <USBH_SetCfg>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 80ca 	bne.w	800b50c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2209      	movs	r2, #9
 800b37c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b37e:	e0c5      	b.n	800b50c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b386:	f003 0320 	and.w	r3, r3, #32
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00b      	beq.n	800b3a6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b38e:	2101      	movs	r1, #1
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fc30 	bl	800bbf6 <USBH_SetFeature>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 80b9 	bne.w	800b510 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	220a      	movs	r2, #10
 800b3a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3a4:	e0b4      	b.n	800b510 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	220a      	movs	r2, #10
 800b3aa:	701a      	strb	r2, [r3, #0]
      break;
 800b3ac:	e0b0      	b.n	800b510 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 80ad 	beq.w	800b514 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
 800b3c6:	e016      	b.n	800b3f6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b3c8:	7bfa      	ldrb	r2, [r7, #15]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	32de      	adds	r2, #222	; 0xde
 800b3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d2:	791a      	ldrb	r2, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d108      	bne.n	800b3f0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b3de:	7bfa      	ldrb	r2, [r7, #15]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	32de      	adds	r2, #222	; 0xde
 800b3e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b3ee:	e005      	b.n	800b3fc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	73fb      	strb	r3, [r7, #15]
 800b3f6:	7bfb      	ldrb	r3, [r7, #15]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d0e5      	beq.n	800b3c8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d016      	beq.n	800b434 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
 800b412:	4603      	mov	r3, r0
 800b414:	2b00      	cmp	r3, #0
 800b416:	d109      	bne.n	800b42c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2206      	movs	r2, #6
 800b41c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b424:	2103      	movs	r1, #3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b42a:	e073      	b.n	800b514 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	220d      	movs	r2, #13
 800b430:	701a      	strb	r2, [r3, #0]
      break;
 800b432:	e06f      	b.n	800b514 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	220d      	movs	r2, #13
 800b438:	701a      	strb	r2, [r3, #0]
      break;
 800b43a:	e06b      	b.n	800b514 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b442:	2b00      	cmp	r3, #0
 800b444:	d017      	beq.n	800b476 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
 800b452:	4603      	mov	r3, r0
 800b454:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	220b      	movs	r2, #11
 800b462:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b464:	e058      	b.n	800b518 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d154      	bne.n	800b518 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	220d      	movs	r2, #13
 800b472:	701a      	strb	r2, [r3, #0]
      break;
 800b474:	e050      	b.n	800b518 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	220d      	movs	r2, #13
 800b47a:	701a      	strb	r2, [r3, #0]
      break;
 800b47c:	e04c      	b.n	800b518 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d049      	beq.n	800b51c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	4798      	blx	r3
      }
      break;
 800b494:	e042      	b.n	800b51c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7ff fd72 	bl	800af88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d009      	beq.n	800b4c2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4d2:	2105      	movs	r1, #5
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d107      	bne.n	800b4f4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff fe2b 	bl	800b148 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4f2:	e014      	b.n	800b51e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f001 f9b7 	bl	800c868 <USBH_LL_Start>
      break;
 800b4fa:	e010      	b.n	800b51e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b4fc:	bf00      	nop
 800b4fe:	e00e      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b500:	bf00      	nop
 800b502:	e00c      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b504:	bf00      	nop
 800b506:	e00a      	b.n	800b51e <USBH_Process+0x3b6>
    break;
 800b508:	bf00      	nop
 800b50a:	e008      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b50c:	bf00      	nop
 800b50e:	e006      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b510:	bf00      	nop
 800b512:	e004      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b514:	bf00      	nop
 800b516:	e002      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b518:	bf00      	nop
 800b51a:	e000      	b.n	800b51e <USBH_Process+0x3b6>
      break;
 800b51c:	bf00      	nop
  }
  return USBH_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3710      	adds	r7, #16
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af04      	add	r7, sp, #16
 800b52e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b534:	2301      	movs	r3, #1
 800b536:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	785b      	ldrb	r3, [r3, #1]
 800b53c:	2b07      	cmp	r3, #7
 800b53e:	f200 81c1 	bhi.w	800b8c4 <USBH_HandleEnum+0x39c>
 800b542:	a201      	add	r2, pc, #4	; (adr r2, 800b548 <USBH_HandleEnum+0x20>)
 800b544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b548:	0800b569 	.word	0x0800b569
 800b54c:	0800b627 	.word	0x0800b627
 800b550:	0800b691 	.word	0x0800b691
 800b554:	0800b71f 	.word	0x0800b71f
 800b558:	0800b789 	.word	0x0800b789
 800b55c:	0800b7f9 	.word	0x0800b7f9
 800b560:	0800b83f 	.word	0x0800b83f
 800b564:	0800b885 	.word	0x0800b885
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b568:	2108      	movs	r1, #8
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa50 	bl	800ba10 <USBH_Get_DevDesc>
 800b570:	4603      	mov	r3, r0
 800b572:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d130      	bne.n	800b5dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7919      	ldrb	r1, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b59e:	b292      	uxth	r2, r2
 800b5a0:	9202      	str	r2, [sp, #8]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	9201      	str	r2, [sp, #4]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2280      	movs	r2, #128	; 0x80
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 ff79 	bl	800c4a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7959      	ldrb	r1, [r3, #5]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	9202      	str	r2, [sp, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	9201      	str	r2, [sp, #4]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 ff65 	bl	800c4a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b5da:	e175      	b.n	800b8c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5dc:	7bbb      	ldrb	r3, [r7, #14]
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	f040 8172 	bne.w	800b8c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d903      	bls.n	800b606 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	220d      	movs	r2, #13
 800b602:	701a      	strb	r2, [r3, #0]
      break;
 800b604:	e160      	b.n	800b8c8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	795b      	ldrb	r3, [r3, #5]
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 ff99 	bl	800c544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	791b      	ldrb	r3, [r3, #4]
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 ff93 	bl	800c544 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	701a      	strb	r2, [r3, #0]
      break;
 800b624:	e150      	b.n	800b8c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b626:	2112      	movs	r1, #18
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f9f1 	bl	800ba10 <USBH_Get_DevDesc>
 800b62e:	4603      	mov	r3, r0
 800b630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b632:	7bbb      	ldrb	r3, [r7, #14]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2202      	movs	r2, #2
 800b63c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b63e:	e145      	b.n	800b8cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	2b03      	cmp	r3, #3
 800b644:	f040 8142 	bne.w	800b8cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b64e:	3301      	adds	r3, #1
 800b650:	b2da      	uxtb	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d903      	bls.n	800b66a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	220d      	movs	r2, #13
 800b666:	701a      	strb	r2, [r3, #0]
      break;
 800b668:	e130      	b.n	800b8cc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	795b      	ldrb	r3, [r3, #5]
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 ff67 	bl	800c544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	791b      	ldrb	r3, [r3, #4]
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 ff61 	bl	800c544 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	701a      	strb	r2, [r3, #0]
      break;
 800b68e:	e11d      	b.n	800b8cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b690:	2101      	movs	r1, #1
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fa68 	bl	800bb68 <USBH_SetAddress>
 800b698:	4603      	mov	r3, r0
 800b69a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d132      	bne.n	800b708 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b6a2:	2002      	movs	r0, #2
 800b6a4:	f001 fa45 	bl	800cb32 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2203      	movs	r2, #3
 800b6b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7919      	ldrb	r1, [r3, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6ca:	b292      	uxth	r2, r2
 800b6cc:	9202      	str	r2, [sp, #8]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	9201      	str	r2, [sp, #4]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2280      	movs	r2, #128	; 0x80
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fee3 	bl	800c4a4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	7959      	ldrb	r1, [r3, #5]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	9202      	str	r2, [sp, #8]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	9201      	str	r2, [sp, #4]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2200      	movs	r2, #0
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fecf 	bl	800c4a4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b706:	e0e3      	b.n	800b8d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b708:	7bbb      	ldrb	r3, [r7, #14]
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	f040 80e0 	bne.w	800b8d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	220d      	movs	r2, #13
 800b714:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	705a      	strb	r2, [r3, #1]
      break;
 800b71c:	e0d8      	b.n	800b8d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b71e:	2109      	movs	r1, #9
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f99d 	bl	800ba60 <USBH_Get_CfgDesc>
 800b726:	4603      	mov	r3, r0
 800b728:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d103      	bne.n	800b738 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2204      	movs	r2, #4
 800b734:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b736:	e0cd      	b.n	800b8d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	f040 80ca 	bne.w	800b8d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b746:	3301      	adds	r3, #1
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b756:	2b03      	cmp	r3, #3
 800b758:	d903      	bls.n	800b762 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	220d      	movs	r2, #13
 800b75e:	701a      	strb	r2, [r3, #0]
      break;
 800b760:	e0b8      	b.n	800b8d4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	795b      	ldrb	r3, [r3, #5]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 feeb 	bl	800c544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	791b      	ldrb	r3, [r3, #4]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fee5 	bl	800c544 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
      break;
 800b786:	e0a5      	b.n	800b8d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f965 	bl	800ba60 <USBH_Get_CfgDesc>
 800b796:	4603      	mov	r3, r0
 800b798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d103      	bne.n	800b7a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2205      	movs	r2, #5
 800b7a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7a6:	e097      	b.n	800b8d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7a8:	7bbb      	ldrb	r3, [r7, #14]
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	f040 8094 	bne.w	800b8d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	d903      	bls.n	800b7d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	220d      	movs	r2, #13
 800b7ce:	701a      	strb	r2, [r3, #0]
      break;
 800b7d0:	e082      	b.n	800b8d8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	795b      	ldrb	r3, [r3, #5]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 feb3 	bl	800c544 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	791b      	ldrb	r3, [r3, #4]
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 fead 	bl	800c544 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	701a      	strb	r2, [r3, #0]
      break;
 800b7f6:	e06f      	b.n	800b8d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d019      	beq.n	800b836 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b80e:	23ff      	movs	r3, #255	; 0xff
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f949 	bl	800baa8 <USBH_Get_StringDesc>
 800b816:	4603      	mov	r3, r0
 800b818:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d103      	bne.n	800b828 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2206      	movs	r2, #6
 800b824:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b826:	e059      	b.n	800b8dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d156      	bne.n	800b8dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2206      	movs	r2, #6
 800b832:	705a      	strb	r2, [r3, #1]
      break;
 800b834:	e052      	b.n	800b8dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2206      	movs	r2, #6
 800b83a:	705a      	strb	r2, [r3, #1]
      break;
 800b83c:	e04e      	b.n	800b8dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b844:	2b00      	cmp	r3, #0
 800b846:	d019      	beq.n	800b87c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b854:	23ff      	movs	r3, #255	; 0xff
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f926 	bl	800baa8 <USBH_Get_StringDesc>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b860:	7bbb      	ldrb	r3, [r7, #14]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2207      	movs	r2, #7
 800b86a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b86c:	e038      	b.n	800b8e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b03      	cmp	r3, #3
 800b872:	d135      	bne.n	800b8e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2207      	movs	r2, #7
 800b878:	705a      	strb	r2, [r3, #1]
      break;
 800b87a:	e031      	b.n	800b8e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2207      	movs	r2, #7
 800b880:	705a      	strb	r2, [r3, #1]
      break;
 800b882:	e02d      	b.n	800b8e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d017      	beq.n	800b8be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b89a:	23ff      	movs	r3, #255	; 0xff
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f903 	bl	800baa8 <USBH_Get_StringDesc>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d102      	bne.n	800b8b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b8b0:	e018      	b.n	800b8e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d115      	bne.n	800b8e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b8bc:	e012      	b.n	800b8e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8c2:	e00f      	b.n	800b8e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b8c4:	bf00      	nop
 800b8c6:	e00e      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8c8:	bf00      	nop
 800b8ca:	e00c      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8cc:	bf00      	nop
 800b8ce:	e00a      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8d0:	bf00      	nop
 800b8d2:	e008      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8d4:	bf00      	nop
 800b8d6:	e006      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8d8:	bf00      	nop
 800b8da:	e004      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8dc:	bf00      	nop
 800b8de:	e002      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8e0:	bf00      	nop
 800b8e2:	e000      	b.n	800b8e6 <USBH_HandleEnum+0x3be>
      break;
 800b8e4:	bf00      	nop
  }
  return Status;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b902:	bf00      	nop
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b91c:	1c5a      	adds	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f804 	bl	800b932 <USBH_HandleSof>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b082      	sub	sp, #8
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b0b      	cmp	r3, #11
 800b942:	d10a      	bne.n	800b95a <USBH_HandleSof+0x28>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
  }
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b972:	bf00      	nop
}
 800b974:	370c      	adds	r7, #12
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b98e:	bf00      	nop
}
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 ff58 	bl	800c89e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	791b      	ldrb	r3, [r3, #4]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fda5 	bl	800c544 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	795b      	ldrb	r3, [r3, #5]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fd9f 	bl	800c544 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba22:	78fb      	ldrb	r3, [r7, #3]
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba2e:	2100      	movs	r1, #0
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f864 	bl	800bafe <USBH_GetDescriptor>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73fb      	strb	r3, [r7, #15]
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d10a      	bne.n	800ba56 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba4c:	78fa      	ldrb	r2, [r7, #3]
 800ba4e:	b292      	uxth	r2, r2
 800ba50:	4619      	mov	r1, r3
 800ba52:	f000 f918 	bl	800bc86 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af02      	add	r7, sp, #8
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	331c      	adds	r3, #28
 800ba70:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ba72:	887b      	ldrh	r3, [r7, #2]
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f83d 	bl	800bafe <USBH_GetDescriptor>
 800ba84:	4603      	mov	r3, r0
 800ba86:	72fb      	strb	r3, [r7, #11]
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d107      	bne.n	800ba9e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ba94:	887a      	ldrh	r2, [r7, #2]
 800ba96:	68f9      	ldr	r1, [r7, #12]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 f964 	bl	800bd66 <USBH_ParseCfgDesc>
  }

  return status;
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b088      	sub	sp, #32
 800baac:	af02      	add	r7, sp, #8
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	607a      	str	r2, [r7, #4]
 800bab2:	461a      	mov	r2, r3
 800bab4:	460b      	mov	r3, r1
 800bab6:	72fb      	strb	r3, [r7, #11]
 800bab8:	4613      	mov	r3, r2
 800baba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800babc:	7afb      	ldrb	r3, [r7, #11]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bac4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bacc:	893b      	ldrh	r3, [r7, #8]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	460b      	mov	r3, r1
 800bad2:	2100      	movs	r1, #0
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 f812 	bl	800bafe <USBH_GetDescriptor>
 800bada:	4603      	mov	r3, r0
 800badc:	75fb      	strb	r3, [r7, #23]
 800bade:	7dfb      	ldrb	r3, [r7, #23]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d107      	bne.n	800baf4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800baea:	893a      	ldrh	r2, [r7, #8]
 800baec:	6879      	ldr	r1, [r7, #4]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 fa37 	bl	800bf62 <USBH_ParseStringDesc>
  }

  return status;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	607b      	str	r3, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	72fb      	strb	r3, [r7, #11]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	789b      	ldrb	r3, [r3, #2]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d11c      	bne.n	800bb52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bb18:	7afb      	ldrb	r3, [r7, #11]
 800bb1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2206      	movs	r2, #6
 800bb28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	893a      	ldrh	r2, [r7, #8]
 800bb2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bb30:	893b      	ldrh	r3, [r7, #8]
 800bb32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bb36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb3a:	d104      	bne.n	800bb46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f240 4209 	movw	r2, #1033	; 0x409
 800bb42:	829a      	strh	r2, [r3, #20]
 800bb44:	e002      	b.n	800bb4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8b3a      	ldrh	r2, [r7, #24]
 800bb50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bb52:	8b3b      	ldrh	r3, [r7, #24]
 800bb54:	461a      	mov	r2, r3
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 fa50 	bl	800bffe <USBH_CtlReq>
 800bb5e:	4603      	mov	r3, r0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	789b      	ldrb	r3, [r3, #2]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d10f      	bne.n	800bb9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2205      	movs	r2, #5
 800bb86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bb88:	78fb      	ldrb	r3, [r7, #3]
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2100      	movs	r1, #0
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fa2c 	bl	800bffe <USBH_CtlReq>
 800bba6:	4603      	mov	r3, r0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	789b      	ldrb	r3, [r3, #2]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d10e      	bne.n	800bbe2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2209      	movs	r2, #9
 800bbce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	887a      	ldrh	r2, [r7, #2]
 800bbd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fa09 	bl	800bffe <USBH_CtlReq>
 800bbec:	4603      	mov	r3, r0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	789b      	ldrb	r3, [r3, #2]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d10f      	bne.n	800bc2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2203      	movs	r2, #3
 800bc14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bc16:	78fb      	ldrb	r3, [r7, #3]
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f9e5 	bl	800bffe <USBH_CtlReq>
 800bc34:	4603      	mov	r3, r0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	789b      	ldrb	r3, [r3, #2]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d10f      	bne.n	800bc72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2202      	movs	r2, #2
 800bc56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bc72:	2200      	movs	r2, #0
 800bc74:	2100      	movs	r1, #0
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f9c1 	bl	800bffe <USBH_CtlReq>
 800bc7c:	4603      	mov	r3, r0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	4613      	mov	r3, r2
 800bc92:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	781a      	ldrb	r2, [r3, #0]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	785a      	ldrb	r2, [r3, #1]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	3302      	adds	r3, #2
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	3303      	adds	r3, #3
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	021b      	lsls	r3, r3, #8
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	791a      	ldrb	r2, [r3, #4]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	795a      	ldrb	r2, [r3, #5]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	799a      	ldrb	r2, [r3, #6]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	79da      	ldrb	r2, [r3, #7]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	2b08      	cmp	r3, #8
 800bce4:	d939      	bls.n	800bd5a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3308      	adds	r3, #8
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	3309      	adds	r3, #9
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	021b      	lsls	r3, r3, #8
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	330a      	adds	r3, #10
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	330b      	adds	r3, #11
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	021b      	lsls	r3, r3, #8
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	4313      	orrs	r3, r2
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	330c      	adds	r3, #12
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	330d      	adds	r3, #13
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	021b      	lsls	r3, r3, #8
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	4313      	orrs	r3, r2
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	7b9a      	ldrb	r2, [r3, #14]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	7bda      	ldrb	r2, [r3, #15]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	7c1a      	ldrb	r2, [r3, #16]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	7c5a      	ldrb	r2, [r3, #17]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	745a      	strb	r2, [r3, #17]
  }
}
 800bd5a:	bf00      	nop
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b08a      	sub	sp, #40	; 0x28
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	4613      	mov	r3, r2
 800bd72:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	785a      	ldrb	r2, [r3, #1]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	3302      	adds	r3, #2
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	3303      	adds	r3, #3
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	021b      	lsls	r3, r3, #8
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	4313      	orrs	r3, r2
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	791a      	ldrb	r2, [r3, #4]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	795a      	ldrb	r2, [r3, #5]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	799a      	ldrb	r2, [r3, #6]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	79da      	ldrb	r2, [r3, #7]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	7a1a      	ldrb	r2, [r3, #8]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	2b09      	cmp	r3, #9
 800bde0:	d95f      	bls.n	800bea2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bde2:	2309      	movs	r3, #9
 800bde4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdea:	e051      	b.n	800be90 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bdec:	f107 0316 	add.w	r3, r7, #22
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdf4:	f000 f8e8 	bl	800bfc8 <USBH_GetNextDesc>
 800bdf8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	2b04      	cmp	r3, #4
 800be00:	d146      	bne.n	800be90 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800be02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be06:	221a      	movs	r2, #26
 800be08:	fb02 f303 	mul.w	r3, r2, r3
 800be0c:	3308      	adds	r3, #8
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	4413      	add	r3, r2
 800be12:	3302      	adds	r3, #2
 800be14:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800be16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be18:	69f8      	ldr	r0, [r7, #28]
 800be1a:	f000 f846 	bl	800beaa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800be24:	2300      	movs	r3, #0
 800be26:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be28:	e022      	b.n	800be70 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800be2a:	f107 0316 	add.w	r3, r7, #22
 800be2e:	4619      	mov	r1, r3
 800be30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be32:	f000 f8c9 	bl	800bfc8 <USBH_GetNextDesc>
 800be36:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	785b      	ldrb	r3, [r3, #1]
 800be3c:	2b05      	cmp	r3, #5
 800be3e:	d117      	bne.n	800be70 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800be40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800be48:	3201      	adds	r2, #1
 800be4a:	00d2      	lsls	r2, r2, #3
 800be4c:	211a      	movs	r1, #26
 800be4e:	fb01 f303 	mul.w	r3, r1, r3
 800be52:	4413      	add	r3, r2
 800be54:	3308      	adds	r3, #8
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	3304      	adds	r3, #4
 800be5c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800be5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be60:	69b8      	ldr	r0, [r7, #24]
 800be62:	f000 f851 	bl	800bf08 <USBH_ParseEPDesc>
            ep_ix++;
 800be66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be6a:	3301      	adds	r3, #1
 800be6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	791b      	ldrb	r3, [r3, #4]
 800be74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800be78:	429a      	cmp	r2, r3
 800be7a:	d204      	bcs.n	800be86 <USBH_ParseCfgDesc+0x120>
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	885a      	ldrh	r2, [r3, #2]
 800be80:	8afb      	ldrh	r3, [r7, #22]
 800be82:	429a      	cmp	r2, r3
 800be84:	d8d1      	bhi.n	800be2a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800be86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be8a:	3301      	adds	r3, #1
 800be8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800be90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be94:	2b01      	cmp	r3, #1
 800be96:	d804      	bhi.n	800bea2 <USBH_ParseCfgDesc+0x13c>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	885a      	ldrh	r2, [r3, #2]
 800be9c:	8afb      	ldrh	r3, [r7, #22]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d8a4      	bhi.n	800bdec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bea2:	bf00      	nop
 800bea4:	3728      	adds	r7, #40	; 0x28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800beaa:	b480      	push	{r7}
 800beac:	b083      	sub	sp, #12
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781a      	ldrb	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	785a      	ldrb	r2, [r3, #1]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	789a      	ldrb	r2, [r3, #2]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	78da      	ldrb	r2, [r3, #3]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	791a      	ldrb	r2, [r3, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	795a      	ldrb	r2, [r3, #5]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	799a      	ldrb	r2, [r3, #6]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	79da      	ldrb	r2, [r3, #7]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	7a1a      	ldrb	r2, [r3, #8]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	721a      	strb	r2, [r3, #8]
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781a      	ldrb	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	785a      	ldrb	r2, [r3, #1]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	789a      	ldrb	r2, [r3, #2]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	78da      	ldrb	r2, [r3, #3]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	3304      	adds	r3, #4
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	3305      	adds	r3, #5
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	4313      	orrs	r3, r2
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	799a      	ldrb	r2, [r3, #6]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	719a      	strb	r2, [r3, #6]
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b087      	sub	sp, #28
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	60f8      	str	r0, [r7, #12]
 800bf6a:	60b9      	str	r1, [r7, #8]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d120      	bne.n	800bfbc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	1e9a      	subs	r2, r3, #2
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	4293      	cmp	r3, r2
 800bf84:	bf28      	it	cs
 800bf86:	4613      	movcs	r3, r2
 800bf88:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3302      	adds	r3, #2
 800bf8e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bf90:	2300      	movs	r3, #0
 800bf92:	82fb      	strh	r3, [r7, #22]
 800bf94:	e00b      	b.n	800bfae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bf96:	8afb      	ldrh	r3, [r7, #22]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bfa8:	8afb      	ldrh	r3, [r7, #22]
 800bfaa:	3302      	adds	r3, #2
 800bfac:	82fb      	strh	r3, [r7, #22]
 800bfae:	8afa      	ldrh	r2, [r7, #22]
 800bfb0:	8abb      	ldrh	r3, [r7, #20]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d3ef      	bcc.n	800bf96 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	701a      	strb	r2, [r3, #0]
  }
}
 800bfbc:	bf00      	nop
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	881a      	ldrh	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4413      	add	r3, r2
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bff0:	68fb      	ldr	r3, [r7, #12]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b086      	sub	sp, #24
 800c002:	af00      	add	r7, sp, #0
 800c004:	60f8      	str	r0, [r7, #12]
 800c006:	60b9      	str	r1, [r7, #8]
 800c008:	4613      	mov	r3, r2
 800c00a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c00c:	2301      	movs	r3, #1
 800c00e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	789b      	ldrb	r3, [r3, #2]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d002      	beq.n	800c01e <USBH_CtlReq+0x20>
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d00f      	beq.n	800c03c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c01c:	e027      	b.n	800c06e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	88fa      	ldrh	r2, [r7, #6]
 800c028:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2202      	movs	r2, #2
 800c034:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c036:	2301      	movs	r3, #1
 800c038:	75fb      	strb	r3, [r7, #23]
      break;
 800c03a:	e018      	b.n	800c06e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 f81b 	bl	800c078 <USBH_HandleControl>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <USBH_CtlReq+0x54>
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d106      	bne.n	800c060 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2201      	movs	r2, #1
 800c056:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	761a      	strb	r2, [r3, #24]
      break;
 800c05e:	e005      	b.n	800c06c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	2b02      	cmp	r3, #2
 800c064:	d102      	bne.n	800c06c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2201      	movs	r2, #1
 800c06a:	709a      	strb	r2, [r3, #2]
      break;
 800c06c:	bf00      	nop
  }
  return status;
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c080:	2301      	movs	r3, #1
 800c082:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c084:	2300      	movs	r3, #0
 800c086:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7e1b      	ldrb	r3, [r3, #24]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	2b0a      	cmp	r3, #10
 800c090:	f200 8158 	bhi.w	800c344 <USBH_HandleControl+0x2cc>
 800c094:	a201      	add	r2, pc, #4	; (adr r2, 800c09c <USBH_HandleControl+0x24>)
 800c096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09a:	bf00      	nop
 800c09c:	0800c0c9 	.word	0x0800c0c9
 800c0a0:	0800c0e3 	.word	0x0800c0e3
 800c0a4:	0800c14d 	.word	0x0800c14d
 800c0a8:	0800c173 	.word	0x0800c173
 800c0ac:	0800c1ab 	.word	0x0800c1ab
 800c0b0:	0800c1d7 	.word	0x0800c1d7
 800c0b4:	0800c229 	.word	0x0800c229
 800c0b8:	0800c24b 	.word	0x0800c24b
 800c0bc:	0800c287 	.word	0x0800c287
 800c0c0:	0800c2af 	.word	0x0800c2af
 800c0c4:	0800c2ed 	.word	0x0800c2ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f103 0110 	add.w	r1, r3, #16
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	795b      	ldrb	r3, [r3, #5]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f945 	bl	800c364 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	761a      	strb	r2, [r3, #24]
      break;
 800c0e0:	e13b      	b.n	800c35a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	795b      	ldrb	r3, [r3, #5]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fcc5 	bl	800ca78 <USBH_LL_GetURBState>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d11e      	bne.n	800c136 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	7c1b      	ldrb	r3, [r3, #16]
 800c0fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c100:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	8adb      	ldrh	r3, [r3, #22]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c10a:	7b7b      	ldrb	r3, [r7, #13]
 800c10c:	2b80      	cmp	r3, #128	; 0x80
 800c10e:	d103      	bne.n	800c118 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2203      	movs	r2, #3
 800c114:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c116:	e117      	b.n	800c348 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2205      	movs	r2, #5
 800c11c:	761a      	strb	r2, [r3, #24]
      break;
 800c11e:	e113      	b.n	800c348 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800c120:	7b7b      	ldrb	r3, [r7, #13]
 800c122:	2b80      	cmp	r3, #128	; 0x80
 800c124:	d103      	bne.n	800c12e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2209      	movs	r2, #9
 800c12a:	761a      	strb	r2, [r3, #24]
      break;
 800c12c:	e10c      	b.n	800c348 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2207      	movs	r2, #7
 800c132:	761a      	strb	r2, [r3, #24]
      break;
 800c134:	e108      	b.n	800c348 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	2b04      	cmp	r3, #4
 800c13a:	d003      	beq.n	800c144 <USBH_HandleControl+0xcc>
 800c13c:	7bbb      	ldrb	r3, [r7, #14]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	f040 8102 	bne.w	800c348 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	220b      	movs	r2, #11
 800c148:	761a      	strb	r2, [r3, #24]
      break;
 800c14a:	e0fd      	b.n	800c348 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6899      	ldr	r1, [r3, #8]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	899a      	ldrh	r2, [r3, #12]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	791b      	ldrb	r3, [r3, #4]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f93c 	bl	800c3e2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2204      	movs	r2, #4
 800c16e:	761a      	strb	r2, [r3, #24]
      break;
 800c170:	e0f3      	b.n	800c35a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	791b      	ldrb	r3, [r3, #4]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fc7d 	bl	800ca78 <USBH_LL_GetURBState>
 800c17e:	4603      	mov	r3, r0
 800c180:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d102      	bne.n	800c18e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2209      	movs	r2, #9
 800c18c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	2b05      	cmp	r3, #5
 800c192:	d102      	bne.n	800c19a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c194:	2303      	movs	r3, #3
 800c196:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c198:	e0d8      	b.n	800c34c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	2b04      	cmp	r3, #4
 800c19e:	f040 80d5 	bne.w	800c34c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	220b      	movs	r2, #11
 800c1a6:	761a      	strb	r2, [r3, #24]
      break;
 800c1a8:	e0d0      	b.n	800c34c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6899      	ldr	r1, [r3, #8]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	899a      	ldrh	r2, [r3, #12]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	7958      	ldrb	r0, [r3, #5]
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f8eb 	bl	800c398 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2206      	movs	r2, #6
 800c1d2:	761a      	strb	r2, [r3, #24]
      break;
 800c1d4:	e0c1      	b.n	800c35a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	795b      	ldrb	r3, [r3, #5]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fc4b 	bl	800ca78 <USBH_LL_GetURBState>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d103      	bne.n	800c1f4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2207      	movs	r2, #7
 800c1f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1f2:	e0ad      	b.n	800c350 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800c1f4:	7bbb      	ldrb	r3, [r7, #14]
 800c1f6:	2b05      	cmp	r3, #5
 800c1f8:	d105      	bne.n	800c206 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	220c      	movs	r2, #12
 800c1fe:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c200:	2303      	movs	r3, #3
 800c202:	73fb      	strb	r3, [r7, #15]
      break;
 800c204:	e0a4      	b.n	800c350 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c206:	7bbb      	ldrb	r3, [r7, #14]
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d103      	bne.n	800c214 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2205      	movs	r2, #5
 800c210:	761a      	strb	r2, [r3, #24]
      break;
 800c212:	e09d      	b.n	800c350 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b04      	cmp	r3, #4
 800c218:	f040 809a 	bne.w	800c350 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	220b      	movs	r2, #11
 800c220:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c222:	2302      	movs	r3, #2
 800c224:	73fb      	strb	r3, [r7, #15]
      break;
 800c226:	e093      	b.n	800c350 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	791b      	ldrb	r3, [r3, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	2100      	movs	r1, #0
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f8d6 	bl	800c3e2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2208      	movs	r2, #8
 800c246:	761a      	strb	r2, [r3, #24]

      break;
 800c248:	e087      	b.n	800c35a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	791b      	ldrb	r3, [r3, #4]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 fc11 	bl	800ca78 <USBH_LL_GetURBState>
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d105      	bne.n	800c26c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	220d      	movs	r2, #13
 800c264:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c26a:	e073      	b.n	800c354 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d103      	bne.n	800c27a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	220b      	movs	r2, #11
 800c276:	761a      	strb	r2, [r3, #24]
      break;
 800c278:	e06c      	b.n	800c354 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
 800c27c:	2b05      	cmp	r3, #5
 800c27e:	d169      	bne.n	800c354 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800c280:	2303      	movs	r3, #3
 800c282:	73fb      	strb	r3, [r7, #15]
      break;
 800c284:	e066      	b.n	800c354 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	795a      	ldrb	r2, [r3, #5]
 800c28a:	2301      	movs	r3, #1
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	4613      	mov	r3, r2
 800c290:	2200      	movs	r2, #0
 800c292:	2100      	movs	r1, #0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f87f 	bl	800c398 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	761a      	strb	r2, [r3, #24]
      break;
 800c2ac:	e055      	b.n	800c35a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	795b      	ldrb	r3, [r3, #5]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fbdf 	bl	800ca78 <USBH_LL_GetURBState>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c2be:	7bbb      	ldrb	r3, [r7, #14]
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d105      	bne.n	800c2d0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	220d      	movs	r2, #13
 800c2cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c2ce:	e043      	b.n	800c358 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d103      	bne.n	800c2de <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2209      	movs	r2, #9
 800c2da:	761a      	strb	r2, [r3, #24]
      break;
 800c2dc:	e03c      	b.n	800c358 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800c2de:	7bbb      	ldrb	r3, [r7, #14]
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	d139      	bne.n	800c358 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	220b      	movs	r2, #11
 800c2e8:	761a      	strb	r2, [r3, #24]
      break;
 800c2ea:	e035      	b.n	800c358 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7e5b      	ldrb	r3, [r3, #25]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	765a      	strb	r2, [r3, #25]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	7e5b      	ldrb	r3, [r3, #25]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d806      	bhi.n	800c30e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c30c:	e025      	b.n	800c35a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c314:	2106      	movs	r1, #6
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	795b      	ldrb	r3, [r3, #5]
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f90c 	bl	800c544 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	791b      	ldrb	r3, [r3, #4]
 800c330:	4619      	mov	r1, r3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 f906 	bl	800c544 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c33e:	2302      	movs	r3, #2
 800c340:	73fb      	strb	r3, [r7, #15]
      break;
 800c342:	e00a      	b.n	800c35a <USBH_HandleControl+0x2e2>

    default:
      break;
 800c344:	bf00      	nop
 800c346:	e008      	b.n	800c35a <USBH_HandleControl+0x2e2>
      break;
 800c348:	bf00      	nop
 800c34a:	e006      	b.n	800c35a <USBH_HandleControl+0x2e2>
      break;
 800c34c:	bf00      	nop
 800c34e:	e004      	b.n	800c35a <USBH_HandleControl+0x2e2>
      break;
 800c350:	bf00      	nop
 800c352:	e002      	b.n	800c35a <USBH_HandleControl+0x2e2>
      break;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <USBH_HandleControl+0x2e2>
      break;
 800c358:	bf00      	nop
  }

  return status;
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b088      	sub	sp, #32
 800c368:	af04      	add	r7, sp, #16
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	4613      	mov	r3, r2
 800c370:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c372:	79f9      	ldrb	r1, [r7, #7]
 800c374:	2300      	movs	r3, #0
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	2308      	movs	r3, #8
 800c37a:	9302      	str	r3, [sp, #8]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	2300      	movs	r3, #0
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	2300      	movs	r3, #0
 800c386:	2200      	movs	r2, #0
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f000 fb44 	bl	800ca16 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b088      	sub	sp, #32
 800c39c:	af04      	add	r7, sp, #16
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	80fb      	strh	r3, [r7, #6]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d001      	beq.n	800c3bc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3bc:	7979      	ldrb	r1, [r7, #5]
 800c3be:	7e3b      	ldrb	r3, [r7, #24]
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	88fb      	ldrh	r3, [r7, #6]
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f000 fb1f 	bl	800ca16 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b088      	sub	sp, #32
 800c3e6:	af04      	add	r7, sp, #16
 800c3e8:	60f8      	str	r0, [r7, #12]
 800c3ea:	60b9      	str	r1, [r7, #8]
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	80fb      	strh	r3, [r7, #6]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3f8:	7979      	ldrb	r1, [r7, #5]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	9303      	str	r3, [sp, #12]
 800c3fe:	88fb      	ldrh	r3, [r7, #6]
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	2301      	movs	r3, #1
 800c408:	9300      	str	r3, [sp, #0]
 800c40a:	2300      	movs	r3, #0
 800c40c:	2201      	movs	r2, #1
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 fb01 	bl	800ca16 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c414:	2300      	movs	r3, #0

}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b088      	sub	sp, #32
 800c422:	af04      	add	r7, sp, #16
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	4611      	mov	r1, r2
 800c42a:	461a      	mov	r2, r3
 800c42c:	460b      	mov	r3, r1
 800c42e:	80fb      	strh	r3, [r7, #6]
 800c430:	4613      	mov	r3, r2
 800c432:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c43e:	2300      	movs	r3, #0
 800c440:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c442:	7979      	ldrb	r1, [r7, #5]
 800c444:	7e3b      	ldrb	r3, [r7, #24]
 800c446:	9303      	str	r3, [sp, #12]
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	9301      	str	r3, [sp, #4]
 800c450:	2301      	movs	r3, #1
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	2302      	movs	r3, #2
 800c456:	2200      	movs	r2, #0
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fadc 	bl	800ca16 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af04      	add	r7, sp, #16
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	4611      	mov	r1, r2
 800c474:	461a      	mov	r2, r3
 800c476:	460b      	mov	r3, r1
 800c478:	80fb      	strh	r3, [r7, #6]
 800c47a:	4613      	mov	r3, r2
 800c47c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c47e:	7979      	ldrb	r1, [r7, #5]
 800c480:	2300      	movs	r3, #0
 800c482:	9303      	str	r3, [sp, #12]
 800c484:	88fb      	ldrh	r3, [r7, #6]
 800c486:	9302      	str	r3, [sp, #8]
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	2301      	movs	r3, #1
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	2302      	movs	r3, #2
 800c492:	2201      	movs	r2, #1
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 fabe 	bl	800ca16 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af04      	add	r7, sp, #16
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	70fb      	strb	r3, [r7, #3]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70bb      	strb	r3, [r7, #2]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c4be:	7878      	ldrb	r0, [r7, #1]
 800c4c0:	78ba      	ldrb	r2, [r7, #2]
 800c4c2:	78f9      	ldrb	r1, [r7, #3]
 800c4c4:	8b3b      	ldrh	r3, [r7, #24]
 800c4c6:	9302      	str	r3, [sp, #8]
 800c4c8:	7d3b      	ldrb	r3, [r7, #20]
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	7c3b      	ldrb	r3, [r7, #16]
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa51 	bl	800c97a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c4ee:	78fb      	ldrb	r3, [r7, #3]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fa70 	bl	800c9d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f836 	bl	800c580 <USBH_GetFreePipe>
 800c514:	4603      	mov	r3, r0
 800c516:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c518:	89fb      	ldrh	r3, [r7, #14]
 800c51a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00a      	beq.n	800c538 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c522:	78fa      	ldrb	r2, [r7, #3]
 800c524:	89fb      	ldrh	r3, [r7, #14]
 800c526:	f003 030f 	and.w	r3, r3, #15
 800c52a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c52e:	6879      	ldr	r1, [r7, #4]
 800c530:	33e0      	adds	r3, #224	; 0xe0
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	440b      	add	r3, r1
 800c536:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c538:	89fb      	ldrh	r3, [r7, #14]
 800c53a:	b2db      	uxtb	r3, r3
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	460b      	mov	r3, r1
 800c54e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	2b0a      	cmp	r3, #10
 800c554:	d80d      	bhi.n	800c572 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c556:	78fb      	ldrb	r3, [r7, #3]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	33e0      	adds	r3, #224	; 0xe0
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	685a      	ldr	r2, [r3, #4]
 800c562:	78fb      	ldrb	r3, [r7, #3]
 800c564:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	33e0      	adds	r3, #224	; 0xe0
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	440b      	add	r3, r1
 800c570:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c572:	2300      	movs	r3, #0
}
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c588:	2300      	movs	r3, #0
 800c58a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
 800c590:	e00f      	b.n	800c5b2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	33e0      	adds	r3, #224	; 0xe0
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	4413      	add	r3, r2
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d102      	bne.n	800c5ac <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	e007      	b.n	800c5bc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	73fb      	strb	r3, [r7, #15]
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
 800c5b4:	2b0a      	cmp	r3, #10
 800c5b6:	d9ec      	bls.n	800c592 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c5b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	490e      	ldr	r1, [pc, #56]	; (800c608 <MX_USB_HOST_Init+0x40>)
 800c5d0:	480e      	ldr	r0, [pc, #56]	; (800c60c <MX_USB_HOST_Init+0x44>)
 800c5d2:	f7fe fc9f 	bl	800af14 <USBH_Init>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c5dc:	f7f4 fe06 	bl	80011ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c5e0:	490b      	ldr	r1, [pc, #44]	; (800c610 <MX_USB_HOST_Init+0x48>)
 800c5e2:	480a      	ldr	r0, [pc, #40]	; (800c60c <MX_USB_HOST_Init+0x44>)
 800c5e4:	f7fe fd24 	bl	800b030 <USBH_RegisterClass>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d001      	beq.n	800c5f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c5ee:	f7f4 fdfd 	bl	80011ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c5f2:	4806      	ldr	r0, [pc, #24]	; (800c60c <MX_USB_HOST_Init+0x44>)
 800c5f4:	f7fe fda8 	bl	800b148 <USBH_Start>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c5fe:	f7f4 fdf5 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c602:	bf00      	nop
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	0800c629 	.word	0x0800c629
 800c60c:	2000055c 	.word	0x2000055c
 800c610:	20000060 	.word	0x20000060

0800c614 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c618:	4802      	ldr	r0, [pc, #8]	; (800c624 <MX_USB_HOST_Process+0x10>)
 800c61a:	f7fe fda5 	bl	800b168 <USBH_Process>
}
 800c61e:	bf00      	nop
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	2000055c 	.word	0x2000055c

0800c628 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	3b01      	subs	r3, #1
 800c638:	2b04      	cmp	r3, #4
 800c63a:	d819      	bhi.n	800c670 <USBH_UserProcess+0x48>
 800c63c:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <USBH_UserProcess+0x1c>)
 800c63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c642:	bf00      	nop
 800c644:	0800c671 	.word	0x0800c671
 800c648:	0800c661 	.word	0x0800c661
 800c64c:	0800c671 	.word	0x0800c671
 800c650:	0800c669 	.word	0x0800c669
 800c654:	0800c659 	.word	0x0800c659
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c658:	4b09      	ldr	r3, [pc, #36]	; (800c680 <USBH_UserProcess+0x58>)
 800c65a:	2203      	movs	r2, #3
 800c65c:	701a      	strb	r2, [r3, #0]
  break;
 800c65e:	e008      	b.n	800c672 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c660:	4b07      	ldr	r3, [pc, #28]	; (800c680 <USBH_UserProcess+0x58>)
 800c662:	2202      	movs	r2, #2
 800c664:	701a      	strb	r2, [r3, #0]
  break;
 800c666:	e004      	b.n	800c672 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c668:	4b05      	ldr	r3, [pc, #20]	; (800c680 <USBH_UserProcess+0x58>)
 800c66a:	2201      	movs	r2, #1
 800c66c:	701a      	strb	r2, [r3, #0]
  break;
 800c66e:	e000      	b.n	800c672 <USBH_UserProcess+0x4a>

  default:
  break;
 800c670:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c672:	bf00      	nop
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20000158 	.word	0x20000158

0800c684 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b08a      	sub	sp, #40	; 0x28
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c68c:	f107 0314 	add.w	r3, r7, #20
 800c690:	2200      	movs	r2, #0
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	605a      	str	r2, [r3, #4]
 800c696:	609a      	str	r2, [r3, #8]
 800c698:	60da      	str	r2, [r3, #12]
 800c69a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6a4:	d147      	bne.n	800c736 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	613b      	str	r3, [r7, #16]
 800c6aa:	4b25      	ldr	r3, [pc, #148]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ae:	4a24      	ldr	r2, [pc, #144]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c6b0:	f043 0301 	orr.w	r3, r3, #1
 800c6b4:	6313      	str	r3, [r2, #48]	; 0x30
 800c6b6:	4b22      	ldr	r3, [pc, #136]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	613b      	str	r3, [r7, #16]
 800c6c0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800c6c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c6d0:	f107 0314 	add.w	r3, r7, #20
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	481b      	ldr	r0, [pc, #108]	; (800c744 <HAL_HCD_MspInit+0xc0>)
 800c6d8:	f7f7 fa2a 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800c6dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c6e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c6ee:	230a      	movs	r3, #10
 800c6f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4812      	ldr	r0, [pc, #72]	; (800c744 <HAL_HCD_MspInit+0xc0>)
 800c6fa:	f7f7 fa19 	bl	8003b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c6fe:	4b10      	ldr	r3, [pc, #64]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c702:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c708:	6353      	str	r3, [r2, #52]	; 0x34
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
 800c70e:	4b0c      	ldr	r3, [pc, #48]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	4a0b      	ldr	r2, [pc, #44]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c718:	6453      	str	r3, [r2, #68]	; 0x44
 800c71a:	4b09      	ldr	r3, [pc, #36]	; (800c740 <HAL_HCD_MspInit+0xbc>)
 800c71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c71e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c726:	2200      	movs	r2, #0
 800c728:	2100      	movs	r1, #0
 800c72a:	2043      	movs	r0, #67	; 0x43
 800c72c:	f7f6 ff0b 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c730:	2043      	movs	r0, #67	; 0x43
 800c732:	f7f6 ff24 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c736:	bf00      	nop
 800c738:	3728      	adds	r7, #40	; 0x28
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	40023800 	.word	0x40023800
 800c744:	40020000 	.word	0x40020000

0800c748 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff f8d9 	bl	800b90e <USBH_LL_IncTimer>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff f911 	bl	800b99a <USBH_LL_Connect>
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff f91a 	bl	800b9c8 <USBH_LL_Disconnect>
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	70fb      	strb	r3, [r7, #3]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff f8cb 	bl	800b962 <USBH_LL_PortEnabled>
}
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7ff f8cb 	bl	800b97e <USBH_LL_PortDisabled>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d12a      	bne.n	800c858 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c802:	4a18      	ldr	r2, [pc, #96]	; (800c864 <USBH_LL_Init+0x74>)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a15      	ldr	r2, [pc, #84]	; (800c864 <USBH_LL_Init+0x74>)
 800c80e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c812:	4b14      	ldr	r3, [pc, #80]	; (800c864 <USBH_LL_Init+0x74>)
 800c814:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c818:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <USBH_LL_Init+0x74>)
 800c81c:	220c      	movs	r2, #12
 800c81e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c820:	4b10      	ldr	r3, [pc, #64]	; (800c864 <USBH_LL_Init+0x74>)
 800c822:	2201      	movs	r2, #1
 800c824:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c826:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <USBH_LL_Init+0x74>)
 800c828:	2200      	movs	r2, #0
 800c82a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c82c:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <USBH_LL_Init+0x74>)
 800c82e:	2202      	movs	r2, #2
 800c830:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c832:	4b0c      	ldr	r3, [pc, #48]	; (800c864 <USBH_LL_Init+0x74>)
 800c834:	2200      	movs	r2, #0
 800c836:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c838:	480a      	ldr	r0, [pc, #40]	; (800c864 <USBH_LL_Init+0x74>)
 800c83a:	f7f7 fb60 	bl	8003efe <HAL_HCD_Init>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c844:	f7f4 fcd2 	bl	80011ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c848:	4806      	ldr	r0, [pc, #24]	; (800c864 <USBH_LL_Init+0x74>)
 800c84a:	f7f7 ff63 	bl	8004714 <HAL_HCD_GetCurrentFrame>
 800c84e:	4603      	mov	r3, r0
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff f84c 	bl	800b8f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	20000934 	.word	0x20000934

0800c868 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f7 fed0 	bl	8004624 <HAL_HCD_Start>
 800c884:	4603      	mov	r3, r0
 800c886:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f95c 	bl	800cb48 <USBH_Get_USB_Status>
 800c890:	4603      	mov	r3, r0
 800c892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c894:	7bbb      	ldrb	r3, [r7, #14]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7f7 fed8 	bl	800466a <HAL_HCD_Stop>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f000 f941 	bl	800cb48 <USBH_Get_USB_Status>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7f7 ff22 	bl	8004730 <HAL_HCD_GetCurrentSpeed>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d007      	beq.n	800c902 <USBH_LL_GetSpeed+0x2e>
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d302      	bcc.n	800c8fc <USBH_LL_GetSpeed+0x28>
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d006      	beq.n	800c908 <USBH_LL_GetSpeed+0x34>
 800c8fa:	e008      	b.n	800c90e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c900:	e008      	b.n	800c914 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c902:	2301      	movs	r3, #1
 800c904:	73fb      	strb	r3, [r7, #15]
    break;
 800c906:	e005      	b.n	800c914 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c908:	2302      	movs	r3, #2
 800c90a:	73fb      	strb	r3, [r7, #15]
    break;
 800c90c:	e002      	b.n	800c914 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c90e:	2301      	movs	r3, #1
 800c910:	73fb      	strb	r3, [r7, #15]
    break;
 800c912:	bf00      	nop
  }
  return  speed;
 800c914:	7bfb      	ldrb	r3, [r7, #15]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c926:	2300      	movs	r3, #0
 800c928:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c934:	4618      	mov	r0, r3
 800c936:	f7f7 feb5 	bl	80046a4 <HAL_HCD_ResetPort>
 800c93a:	4603      	mov	r3, r0
 800c93c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	4618      	mov	r0, r3
 800c942:	f000 f901 	bl	800cb48 <USBH_Get_USB_Status>
 800c946:	4603      	mov	r3, r0
 800c948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c966:	78fa      	ldrb	r2, [r7, #3]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7f7 febd 	bl	80046ea <HAL_HCD_HC_GetXferCount>
 800c970:	4603      	mov	r3, r0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c97a:	b590      	push	{r4, r7, lr}
 800c97c:	b089      	sub	sp, #36	; 0x24
 800c97e:	af04      	add	r7, sp, #16
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	4608      	mov	r0, r1
 800c984:	4611      	mov	r1, r2
 800c986:	461a      	mov	r2, r3
 800c988:	4603      	mov	r3, r0
 800c98a:	70fb      	strb	r3, [r7, #3]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70bb      	strb	r3, [r7, #2]
 800c990:	4613      	mov	r3, r2
 800c992:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c9a2:	787c      	ldrb	r4, [r7, #1]
 800c9a4:	78ba      	ldrb	r2, [r7, #2]
 800c9a6:	78f9      	ldrb	r1, [r7, #3]
 800c9a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9aa:	9302      	str	r3, [sp, #8]
 800c9ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	f7f7 fb02 	bl	8003fc2 <HAL_HCD_HC_Init>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 f8bf 	bl	800cb48 <USBH_Get_USB_Status>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd90      	pop	{r4, r7, pc}

0800c9d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9f2:	78fa      	ldrb	r2, [r7, #3]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f7 fb7b 	bl	80040f2 <HAL_HCD_HC_Halt>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca00:	7bfb      	ldrb	r3, [r7, #15]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 f8a0 	bl	800cb48 <USBH_Get_USB_Status>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ca16:	b590      	push	{r4, r7, lr}
 800ca18:	b089      	sub	sp, #36	; 0x24
 800ca1a:	af04      	add	r7, sp, #16
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4611      	mov	r1, r2
 800ca22:	461a      	mov	r2, r3
 800ca24:	4603      	mov	r3, r0
 800ca26:	70fb      	strb	r3, [r7, #3]
 800ca28:	460b      	mov	r3, r1
 800ca2a:	70bb      	strb	r3, [r7, #2]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ca3e:	787c      	ldrb	r4, [r7, #1]
 800ca40:	78ba      	ldrb	r2, [r7, #2]
 800ca42:	78f9      	ldrb	r1, [r7, #3]
 800ca44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca48:	9303      	str	r3, [sp, #12]
 800ca4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca4c:	9302      	str	r3, [sp, #8]
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	9301      	str	r3, [sp, #4]
 800ca52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	4623      	mov	r3, r4
 800ca5a:	f7f7 fb6d 	bl	8004138 <HAL_HCD_HC_SubmitRequest>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca62:	7bfb      	ldrb	r3, [r7, #15]
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 f86f 	bl	800cb48 <USBH_Get_USB_Status>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd90      	pop	{r4, r7, pc}

0800ca78 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca8a:	78fa      	ldrb	r2, [r7, #3]
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f7 fe16 	bl	80046c0 <HAL_HCD_HC_GetURBState>
 800ca94:	4603      	mov	r3, r0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	460b      	mov	r3, r1
 800caa8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d103      	bne.n	800cabc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 f872 	bl	800cba0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cabc:	20c8      	movs	r0, #200	; 0xc8
 800cabe:	f7f6 f9d3 	bl	8002e68 <HAL_Delay>
  return USBH_OK;
 800cac2:	2300      	movs	r3, #0
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
 800cad8:	4613      	mov	r3, r2
 800cada:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cae2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cae4:	78fa      	ldrb	r2, [r7, #3]
 800cae6:	68f9      	ldr	r1, [r7, #12]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	440b      	add	r3, r1
 800caf2:	333b      	adds	r3, #59	; 0x3b
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cafa:	78fa      	ldrb	r2, [r7, #3]
 800cafc:	68f9      	ldr	r1, [r7, #12]
 800cafe:	4613      	mov	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	440b      	add	r3, r1
 800cb08:	3350      	adds	r3, #80	; 0x50
 800cb0a:	78ba      	ldrb	r2, [r7, #2]
 800cb0c:	701a      	strb	r2, [r3, #0]
 800cb0e:	e009      	b.n	800cb24 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cb10:	78fa      	ldrb	r2, [r7, #3]
 800cb12:	68f9      	ldr	r1, [r7, #12]
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	440b      	add	r3, r1
 800cb1e:	3351      	adds	r3, #81	; 0x51
 800cb20:	78ba      	ldrb	r2, [r7, #2]
 800cb22:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b082      	sub	sp, #8
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7f6 f994 	bl	8002e68 <HAL_Delay>
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb56:	79fb      	ldrb	r3, [r7, #7]
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d817      	bhi.n	800cb8c <USBH_Get_USB_Status+0x44>
 800cb5c:	a201      	add	r2, pc, #4	; (adr r2, 800cb64 <USBH_Get_USB_Status+0x1c>)
 800cb5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb62:	bf00      	nop
 800cb64:	0800cb75 	.word	0x0800cb75
 800cb68:	0800cb7b 	.word	0x0800cb7b
 800cb6c:	0800cb81 	.word	0x0800cb81
 800cb70:	0800cb87 	.word	0x0800cb87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	73fb      	strb	r3, [r7, #15]
    break;
 800cb78:	e00b      	b.n	800cb92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7e:	e008      	b.n	800cb92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cb80:	2301      	movs	r3, #1
 800cb82:	73fb      	strb	r3, [r7, #15]
    break;
 800cb84:	e005      	b.n	800cb92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cb86:	2302      	movs	r3, #2
 800cb88:	73fb      	strb	r3, [r7, #15]
    break;
 800cb8a:	e002      	b.n	800cb92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb90:	bf00      	nop
  }
  return usb_status;
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cbae:	79fb      	ldrb	r3, [r7, #7]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d102      	bne.n	800cbba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	73fb      	strb	r3, [r7, #15]
 800cbb8:	e001      	b.n	800cbbe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbc6:	4803      	ldr	r0, [pc, #12]	; (800cbd4 <MX_DriverVbusFS+0x34>)
 800cbc8:	f7f7 f95c 	bl	8003e84 <HAL_GPIO_WritePin>
}
 800cbcc:	bf00      	nop
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	40021800 	.word	0x40021800

0800cbd8 <__errno>:
 800cbd8:	4b01      	ldr	r3, [pc, #4]	; (800cbe0 <__errno+0x8>)
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	20000080 	.word	0x20000080

0800cbe4 <__libc_init_array>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	4e0d      	ldr	r6, [pc, #52]	; (800cc1c <__libc_init_array+0x38>)
 800cbe8:	4c0d      	ldr	r4, [pc, #52]	; (800cc20 <__libc_init_array+0x3c>)
 800cbea:	1ba4      	subs	r4, r4, r6
 800cbec:	10a4      	asrs	r4, r4, #2
 800cbee:	2500      	movs	r5, #0
 800cbf0:	42a5      	cmp	r5, r4
 800cbf2:	d109      	bne.n	800cc08 <__libc_init_array+0x24>
 800cbf4:	4e0b      	ldr	r6, [pc, #44]	; (800cc24 <__libc_init_array+0x40>)
 800cbf6:	4c0c      	ldr	r4, [pc, #48]	; (800cc28 <__libc_init_array+0x44>)
 800cbf8:	f000 f8ea 	bl	800cdd0 <_init>
 800cbfc:	1ba4      	subs	r4, r4, r6
 800cbfe:	10a4      	asrs	r4, r4, #2
 800cc00:	2500      	movs	r5, #0
 800cc02:	42a5      	cmp	r5, r4
 800cc04:	d105      	bne.n	800cc12 <__libc_init_array+0x2e>
 800cc06:	bd70      	pop	{r4, r5, r6, pc}
 800cc08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc0c:	4798      	blx	r3
 800cc0e:	3501      	adds	r5, #1
 800cc10:	e7ee      	b.n	800cbf0 <__libc_init_array+0xc>
 800cc12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc16:	4798      	blx	r3
 800cc18:	3501      	adds	r5, #1
 800cc1a:	e7f2      	b.n	800cc02 <__libc_init_array+0x1e>
 800cc1c:	0800ed38 	.word	0x0800ed38
 800cc20:	0800ed38 	.word	0x0800ed38
 800cc24:	0800ed38 	.word	0x0800ed38
 800cc28:	0800ed3c 	.word	0x0800ed3c

0800cc2c <malloc>:
 800cc2c:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <malloc+0xc>)
 800cc2e:	4601      	mov	r1, r0
 800cc30:	6818      	ldr	r0, [r3, #0]
 800cc32:	f000 b861 	b.w	800ccf8 <_malloc_r>
 800cc36:	bf00      	nop
 800cc38:	20000080 	.word	0x20000080

0800cc3c <free>:
 800cc3c:	4b02      	ldr	r3, [pc, #8]	; (800cc48 <free+0xc>)
 800cc3e:	4601      	mov	r1, r0
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	f000 b80b 	b.w	800cc5c <_free_r>
 800cc46:	bf00      	nop
 800cc48:	20000080 	.word	0x20000080

0800cc4c <memset>:
 800cc4c:	4402      	add	r2, r0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d100      	bne.n	800cc56 <memset+0xa>
 800cc54:	4770      	bx	lr
 800cc56:	f803 1b01 	strb.w	r1, [r3], #1
 800cc5a:	e7f9      	b.n	800cc50 <memset+0x4>

0800cc5c <_free_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	4605      	mov	r5, r0
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d045      	beq.n	800ccf0 <_free_r+0x94>
 800cc64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc68:	1f0c      	subs	r4, r1, #4
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	bfb8      	it	lt
 800cc6e:	18e4      	addlt	r4, r4, r3
 800cc70:	f000 f8ac 	bl	800cdcc <__malloc_lock>
 800cc74:	4a1f      	ldr	r2, [pc, #124]	; (800ccf4 <_free_r+0x98>)
 800cc76:	6813      	ldr	r3, [r2, #0]
 800cc78:	4610      	mov	r0, r2
 800cc7a:	b933      	cbnz	r3, 800cc8a <_free_r+0x2e>
 800cc7c:	6063      	str	r3, [r4, #4]
 800cc7e:	6014      	str	r4, [r2, #0]
 800cc80:	4628      	mov	r0, r5
 800cc82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc86:	f000 b8a2 	b.w	800cdce <__malloc_unlock>
 800cc8a:	42a3      	cmp	r3, r4
 800cc8c:	d90c      	bls.n	800cca8 <_free_r+0x4c>
 800cc8e:	6821      	ldr	r1, [r4, #0]
 800cc90:	1862      	adds	r2, r4, r1
 800cc92:	4293      	cmp	r3, r2
 800cc94:	bf04      	itt	eq
 800cc96:	681a      	ldreq	r2, [r3, #0]
 800cc98:	685b      	ldreq	r3, [r3, #4]
 800cc9a:	6063      	str	r3, [r4, #4]
 800cc9c:	bf04      	itt	eq
 800cc9e:	1852      	addeq	r2, r2, r1
 800cca0:	6022      	streq	r2, [r4, #0]
 800cca2:	6004      	str	r4, [r0, #0]
 800cca4:	e7ec      	b.n	800cc80 <_free_r+0x24>
 800cca6:	4613      	mov	r3, r2
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	b10a      	cbz	r2, 800ccb0 <_free_r+0x54>
 800ccac:	42a2      	cmp	r2, r4
 800ccae:	d9fa      	bls.n	800cca6 <_free_r+0x4a>
 800ccb0:	6819      	ldr	r1, [r3, #0]
 800ccb2:	1858      	adds	r0, r3, r1
 800ccb4:	42a0      	cmp	r0, r4
 800ccb6:	d10b      	bne.n	800ccd0 <_free_r+0x74>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	4401      	add	r1, r0
 800ccbc:	1858      	adds	r0, r3, r1
 800ccbe:	4282      	cmp	r2, r0
 800ccc0:	6019      	str	r1, [r3, #0]
 800ccc2:	d1dd      	bne.n	800cc80 <_free_r+0x24>
 800ccc4:	6810      	ldr	r0, [r2, #0]
 800ccc6:	6852      	ldr	r2, [r2, #4]
 800ccc8:	605a      	str	r2, [r3, #4]
 800ccca:	4401      	add	r1, r0
 800cccc:	6019      	str	r1, [r3, #0]
 800ccce:	e7d7      	b.n	800cc80 <_free_r+0x24>
 800ccd0:	d902      	bls.n	800ccd8 <_free_r+0x7c>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	602b      	str	r3, [r5, #0]
 800ccd6:	e7d3      	b.n	800cc80 <_free_r+0x24>
 800ccd8:	6820      	ldr	r0, [r4, #0]
 800ccda:	1821      	adds	r1, r4, r0
 800ccdc:	428a      	cmp	r2, r1
 800ccde:	bf04      	itt	eq
 800cce0:	6811      	ldreq	r1, [r2, #0]
 800cce2:	6852      	ldreq	r2, [r2, #4]
 800cce4:	6062      	str	r2, [r4, #4]
 800cce6:	bf04      	itt	eq
 800cce8:	1809      	addeq	r1, r1, r0
 800ccea:	6021      	streq	r1, [r4, #0]
 800ccec:	605c      	str	r4, [r3, #4]
 800ccee:	e7c7      	b.n	800cc80 <_free_r+0x24>
 800ccf0:	bd38      	pop	{r3, r4, r5, pc}
 800ccf2:	bf00      	nop
 800ccf4:	2000015c 	.word	0x2000015c

0800ccf8 <_malloc_r>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	1ccd      	adds	r5, r1, #3
 800ccfc:	f025 0503 	bic.w	r5, r5, #3
 800cd00:	3508      	adds	r5, #8
 800cd02:	2d0c      	cmp	r5, #12
 800cd04:	bf38      	it	cc
 800cd06:	250c      	movcc	r5, #12
 800cd08:	2d00      	cmp	r5, #0
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	db01      	blt.n	800cd12 <_malloc_r+0x1a>
 800cd0e:	42a9      	cmp	r1, r5
 800cd10:	d903      	bls.n	800cd1a <_malloc_r+0x22>
 800cd12:	230c      	movs	r3, #12
 800cd14:	6033      	str	r3, [r6, #0]
 800cd16:	2000      	movs	r0, #0
 800cd18:	bd70      	pop	{r4, r5, r6, pc}
 800cd1a:	f000 f857 	bl	800cdcc <__malloc_lock>
 800cd1e:	4a21      	ldr	r2, [pc, #132]	; (800cda4 <_malloc_r+0xac>)
 800cd20:	6814      	ldr	r4, [r2, #0]
 800cd22:	4621      	mov	r1, r4
 800cd24:	b991      	cbnz	r1, 800cd4c <_malloc_r+0x54>
 800cd26:	4c20      	ldr	r4, [pc, #128]	; (800cda8 <_malloc_r+0xb0>)
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	b91b      	cbnz	r3, 800cd34 <_malloc_r+0x3c>
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f000 f83d 	bl	800cdac <_sbrk_r>
 800cd32:	6020      	str	r0, [r4, #0]
 800cd34:	4629      	mov	r1, r5
 800cd36:	4630      	mov	r0, r6
 800cd38:	f000 f838 	bl	800cdac <_sbrk_r>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	d124      	bne.n	800cd8a <_malloc_r+0x92>
 800cd40:	230c      	movs	r3, #12
 800cd42:	6033      	str	r3, [r6, #0]
 800cd44:	4630      	mov	r0, r6
 800cd46:	f000 f842 	bl	800cdce <__malloc_unlock>
 800cd4a:	e7e4      	b.n	800cd16 <_malloc_r+0x1e>
 800cd4c:	680b      	ldr	r3, [r1, #0]
 800cd4e:	1b5b      	subs	r3, r3, r5
 800cd50:	d418      	bmi.n	800cd84 <_malloc_r+0x8c>
 800cd52:	2b0b      	cmp	r3, #11
 800cd54:	d90f      	bls.n	800cd76 <_malloc_r+0x7e>
 800cd56:	600b      	str	r3, [r1, #0]
 800cd58:	50cd      	str	r5, [r1, r3]
 800cd5a:	18cc      	adds	r4, r1, r3
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f000 f836 	bl	800cdce <__malloc_unlock>
 800cd62:	f104 000b 	add.w	r0, r4, #11
 800cd66:	1d23      	adds	r3, r4, #4
 800cd68:	f020 0007 	bic.w	r0, r0, #7
 800cd6c:	1ac3      	subs	r3, r0, r3
 800cd6e:	d0d3      	beq.n	800cd18 <_malloc_r+0x20>
 800cd70:	425a      	negs	r2, r3
 800cd72:	50e2      	str	r2, [r4, r3]
 800cd74:	e7d0      	b.n	800cd18 <_malloc_r+0x20>
 800cd76:	428c      	cmp	r4, r1
 800cd78:	684b      	ldr	r3, [r1, #4]
 800cd7a:	bf16      	itet	ne
 800cd7c:	6063      	strne	r3, [r4, #4]
 800cd7e:	6013      	streq	r3, [r2, #0]
 800cd80:	460c      	movne	r4, r1
 800cd82:	e7eb      	b.n	800cd5c <_malloc_r+0x64>
 800cd84:	460c      	mov	r4, r1
 800cd86:	6849      	ldr	r1, [r1, #4]
 800cd88:	e7cc      	b.n	800cd24 <_malloc_r+0x2c>
 800cd8a:	1cc4      	adds	r4, r0, #3
 800cd8c:	f024 0403 	bic.w	r4, r4, #3
 800cd90:	42a0      	cmp	r0, r4
 800cd92:	d005      	beq.n	800cda0 <_malloc_r+0xa8>
 800cd94:	1a21      	subs	r1, r4, r0
 800cd96:	4630      	mov	r0, r6
 800cd98:	f000 f808 	bl	800cdac <_sbrk_r>
 800cd9c:	3001      	adds	r0, #1
 800cd9e:	d0cf      	beq.n	800cd40 <_malloc_r+0x48>
 800cda0:	6025      	str	r5, [r4, #0]
 800cda2:	e7db      	b.n	800cd5c <_malloc_r+0x64>
 800cda4:	2000015c 	.word	0x2000015c
 800cda8:	20000160 	.word	0x20000160

0800cdac <_sbrk_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4c06      	ldr	r4, [pc, #24]	; (800cdc8 <_sbrk_r+0x1c>)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	6023      	str	r3, [r4, #0]
 800cdb8:	f7f5 f82e 	bl	8001e18 <_sbrk>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_sbrk_r+0x1a>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_sbrk_r+0x1a>
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20000bf8 	.word	0x20000bf8

0800cdcc <__malloc_lock>:
 800cdcc:	4770      	bx	lr

0800cdce <__malloc_unlock>:
 800cdce:	4770      	bx	lr

0800cdd0 <_init>:
 800cdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd2:	bf00      	nop
 800cdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdd6:	bc08      	pop	{r3}
 800cdd8:	469e      	mov	lr, r3
 800cdda:	4770      	bx	lr

0800cddc <_fini>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	bf00      	nop
 800cde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cde2:	bc08      	pop	{r3}
 800cde4:	469e      	mov	lr, r3
 800cde6:	4770      	bx	lr
