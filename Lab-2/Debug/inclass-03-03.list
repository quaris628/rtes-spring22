
inclass-03-03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b89c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800ba74  0800ba74  0001ba74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bac0  0800bac0  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800bac0  0800bac0  0001bac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bac8  0800bac8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bac8  0800bac8  0001bac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800bad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000094  0800bb64  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b44  0800bb64  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ee2  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049b1  00000000  00000000  00044fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  00049958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0004b578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000289e7  00000000  00000000  0004cf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001abf9  00000000  00000000  00075957  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4682  00000000  00000000  00090550  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174bd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078e0  00000000  00000000  00174c50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000094 	.word	0x20000094
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ba5c 	.word	0x0800ba5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000098 	.word	0x20000098
 8000214:	0800ba5c 	.word	0x0800ba5c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b972 	b.w	8000524 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	4604      	mov	r4, r0
 8000260:	4688      	mov	r8, r1
 8000262:	2b00      	cmp	r3, #0
 8000264:	d14b      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000266:	428a      	cmp	r2, r1
 8000268:	4615      	mov	r5, r2
 800026a:	d967      	bls.n	800033c <__udivmoddi4+0xe4>
 800026c:	fab2 f282 	clz	r2, r2
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0720 	rsb	r7, r2, #32
 8000276:	fa01 f302 	lsl.w	r3, r1, r2
 800027a:	fa20 f707 	lsr.w	r7, r0, r7
 800027e:	4095      	lsls	r5, r2
 8000280:	ea47 0803 	orr.w	r8, r7, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800028a:	0c23      	lsrs	r3, r4, #16
 800028c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000290:	fa1f fc85 	uxth.w	ip, r5
 8000294:	fb0e 8817 	mls	r8, lr, r7, r8
 8000298:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029c:	fb07 f10c 	mul.w	r1, r7, ip
 80002a0:	4299      	cmp	r1, r3
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x60>
 80002a4:	18eb      	adds	r3, r5, r3
 80002a6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002aa:	f080 811b 	bcs.w	80004e4 <__udivmoddi4+0x28c>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 8118 	bls.w	80004e4 <__udivmoddi4+0x28c>
 80002b4:	3f02      	subs	r7, #2
 80002b6:	442b      	add	r3, r5
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002cc:	45a4      	cmp	ip, r4
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x8c>
 80002d0:	192c      	adds	r4, r5, r4
 80002d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d6:	f080 8107 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002da:	45a4      	cmp	ip, r4
 80002dc:	f240 8104 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002e0:	3802      	subs	r0, #2
 80002e2:	442c      	add	r4, r5
 80002e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e8:	eba4 040c 	sub.w	r4, r4, ip
 80002ec:	2700      	movs	r7, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa0>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d909      	bls.n	8000316 <__udivmoddi4+0xbe>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80eb 	beq.w	80004de <__udivmoddi4+0x286>
 8000308:	2700      	movs	r7, #0
 800030a:	e9c6 0100 	strd	r0, r1, [r6]
 800030e:	4638      	mov	r0, r7
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f783 	clz	r7, r3
 800031a:	2f00      	cmp	r7, #0
 800031c:	d147      	bne.n	80003ae <__udivmoddi4+0x156>
 800031e:	428b      	cmp	r3, r1
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd0>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fa 	bhi.w	800051c <__udivmoddi4+0x2c4>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb61 0303 	sbc.w	r3, r1, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e0      	beq.n	80002f8 <__udivmoddi4+0xa0>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7dd      	b.n	80002f8 <__udivmoddi4+0xa0>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xe8>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 808f 	bne.w	8000468 <__udivmoddi4+0x210>
 800034a:	1b49      	subs	r1, r1, r5
 800034c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000350:	fa1f f885 	uxth.w	r8, r5
 8000354:	2701      	movs	r7, #1
 8000356:	fbb1 fcfe 	udiv	ip, r1, lr
 800035a:	0c23      	lsrs	r3, r4, #16
 800035c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb08 f10c 	mul.w	r1, r8, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x124>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4299      	cmp	r1, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2bc>
 800037a:	4684      	mov	ip, r0
 800037c:	1a59      	subs	r1, r3, r1
 800037e:	b2a3      	uxth	r3, r4
 8000380:	fbb1 f0fe 	udiv	r0, r1, lr
 8000384:	fb0e 1410 	mls	r4, lr, r0, r1
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	fb08 f800 	mul.w	r8, r8, r0
 8000390:	45a0      	cmp	r8, r4
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x14c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x14a>
 800039c:	45a0      	cmp	r8, r4
 800039e:	f200 80b6 	bhi.w	800050e <__udivmoddi4+0x2b6>
 80003a2:	4618      	mov	r0, r3
 80003a4:	eba4 0408 	sub.w	r4, r4, r8
 80003a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ac:	e79f      	b.n	80002ee <__udivmoddi4+0x96>
 80003ae:	f1c7 0c20 	rsb	ip, r7, #32
 80003b2:	40bb      	lsls	r3, r7
 80003b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003bc:	fa01 f407 	lsl.w	r4, r1, r7
 80003c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003cc:	4325      	orrs	r5, r4
 80003ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80003d2:	0c2c      	lsrs	r4, r5, #16
 80003d4:	fb08 3319 	mls	r3, r8, r9, r3
 80003d8:	fa1f fa8e 	uxth.w	sl, lr
 80003dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e0:	fb09 f40a 	mul.w	r4, r9, sl
 80003e4:	429c      	cmp	r4, r3
 80003e6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ea:	fa00 f107 	lsl.w	r1, r0, r7
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1e 0303 	adds.w	r3, lr, r3
 80003f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f8:	f080 8087 	bcs.w	800050a <__udivmoddi4+0x2b2>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f240 8084 	bls.w	800050a <__udivmoddi4+0x2b2>
 8000402:	f1a9 0902 	sub.w	r9, r9, #2
 8000406:	4473      	add	r3, lr
 8000408:	1b1b      	subs	r3, r3, r4
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000410:	fb08 3310 	mls	r3, r8, r0, r3
 8000414:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000418:	fb00 fa0a 	mul.w	sl, r0, sl
 800041c:	45a2      	cmp	sl, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1e 0404 	adds.w	r4, lr, r4
 8000424:	f100 33ff 	add.w	r3, r0, #4294967295
 8000428:	d26b      	bcs.n	8000502 <__udivmoddi4+0x2aa>
 800042a:	45a2      	cmp	sl, r4
 800042c:	d969      	bls.n	8000502 <__udivmoddi4+0x2aa>
 800042e:	3802      	subs	r0, #2
 8000430:	4474      	add	r4, lr
 8000432:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	454c      	cmp	r4, r9
 8000440:	46c2      	mov	sl, r8
 8000442:	464b      	mov	r3, r9
 8000444:	d354      	bcc.n	80004f0 <__udivmoddi4+0x298>
 8000446:	d051      	beq.n	80004ec <__udivmoddi4+0x294>
 8000448:	2e00      	cmp	r6, #0
 800044a:	d069      	beq.n	8000520 <__udivmoddi4+0x2c8>
 800044c:	ebb1 050a 	subs.w	r5, r1, sl
 8000450:	eb64 0403 	sbc.w	r4, r4, r3
 8000454:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000458:	40fd      	lsrs	r5, r7
 800045a:	40fc      	lsrs	r4, r7
 800045c:	ea4c 0505 	orr.w	r5, ip, r5
 8000460:	e9c6 5400 	strd	r5, r4, [r6]
 8000464:	2700      	movs	r7, #0
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0xa0>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f703 	lsr.w	r7, r0, r3
 8000470:	4095      	lsls	r5, r2
 8000472:	fa01 f002 	lsl.w	r0, r1, r2
 8000476:	fa21 f303 	lsr.w	r3, r1, r3
 800047a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800047e:	4338      	orrs	r0, r7
 8000480:	0c01      	lsrs	r1, r0, #16
 8000482:	fbb3 f7fe 	udiv	r7, r3, lr
 8000486:	fa1f f885 	uxth.w	r8, r5
 800048a:	fb0e 3317 	mls	r3, lr, r7, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb07 f308 	mul.w	r3, r7, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x256>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004a4:	d22f      	bcs.n	8000506 <__udivmoddi4+0x2ae>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d92d      	bls.n	8000506 <__udivmoddi4+0x2ae>
 80004aa:	3f02      	subs	r7, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1acb      	subs	r3, r1, r3
 80004b0:	b281      	uxth	r1, r0
 80004b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb00 f308 	mul.w	r3, r0, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x27e>
 80004c6:	1869      	adds	r1, r5, r1
 80004c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004cc:	d217      	bcs.n	80004fe <__udivmoddi4+0x2a6>
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d915      	bls.n	80004fe <__udivmoddi4+0x2a6>
 80004d2:	3802      	subs	r0, #2
 80004d4:	4429      	add	r1, r5
 80004d6:	1ac9      	subs	r1, r1, r3
 80004d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xfe>
 80004de:	4637      	mov	r7, r6
 80004e0:	4630      	mov	r0, r6
 80004e2:	e709      	b.n	80002f8 <__udivmoddi4+0xa0>
 80004e4:	4607      	mov	r7, r0
 80004e6:	e6e7      	b.n	80002b8 <__udivmoddi4+0x60>
 80004e8:	4618      	mov	r0, r3
 80004ea:	e6fb      	b.n	80002e4 <__udivmoddi4+0x8c>
 80004ec:	4541      	cmp	r1, r8
 80004ee:	d2ab      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004f4:	eb69 020e 	sbc.w	r2, r9, lr
 80004f8:	3801      	subs	r0, #1
 80004fa:	4613      	mov	r3, r2
 80004fc:	e7a4      	b.n	8000448 <__udivmoddi4+0x1f0>
 80004fe:	4660      	mov	r0, ip
 8000500:	e7e9      	b.n	80004d6 <__udivmoddi4+0x27e>
 8000502:	4618      	mov	r0, r3
 8000504:	e795      	b.n	8000432 <__udivmoddi4+0x1da>
 8000506:	4667      	mov	r7, ip
 8000508:	e7d1      	b.n	80004ae <__udivmoddi4+0x256>
 800050a:	4681      	mov	r9, r0
 800050c:	e77c      	b.n	8000408 <__udivmoddi4+0x1b0>
 800050e:	3802      	subs	r0, #2
 8000510:	442c      	add	r4, r5
 8000512:	e747      	b.n	80003a4 <__udivmoddi4+0x14c>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	442b      	add	r3, r5
 800051a:	e72f      	b.n	800037c <__udivmoddi4+0x124>
 800051c:	4638      	mov	r0, r7
 800051e:	e708      	b.n	8000332 <__udivmoddi4+0xda>
 8000520:	4637      	mov	r7, r6
 8000522:	e6e9      	b.n	80002f8 <__udivmoddi4+0xa0>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_UART_RxCpltCallback>:
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	bMSGtransmit = 1;
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_UART_RxCpltCallback+0x2c>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
	// triggers interrupt when 4 bytes are received
	HAL_UART_Receive_IT(&huart6, rx_buffer, 4);
 8000536:	2204      	movs	r2, #4
 8000538:	4907      	ldr	r1, [pc, #28]	; (8000558 <HAL_UART_RxCpltCallback+0x30>)
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <HAL_UART_RxCpltCallback+0x34>)
 800053c:	f006 fca4 	bl	8006e88 <HAL_UART_Receive_IT>
	// turn on LED as an indicator
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2108      	movs	r1, #8
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <HAL_UART_RxCpltCallback+0x38>)
 8000546:	f002 fbe5 	bl	8002d14 <HAL_GPIO_WritePin>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000b0 	.word	0x200000b0
 8000558:	20000244 	.word	0x20000244
 800055c:	200003cc 	.word	0x200003cc
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2108      	movs	r1, #8
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <HAL_UART_TxCpltCallback+0x1c>)
 8000572:	f002 fbcf 	bl	8002d14 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b598      	push	{r3, r4, r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 fb5c 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f840 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fb10 	bl	8000bb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000594:	f000 f8dc 	bl	8000750 <MX_ADC1_Init>
  MX_DAC_Init();
 8000598:	f000 f92c 	bl	80007f4 <MX_DAC_Init>
  MX_DFSDM1_Init();
 800059c:	f000 f954 	bl	8000848 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80005a0:	f000 f98a 	bl	80008b8 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80005a4:	f000 f9f2 	bl	800098c <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80005a8:	f000 fcac 	bl	8000f04 <MX_FSMC_Init>
  MX_I2S2_Init();
 80005ac:	f000 fa24 	bl	80009f8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80005b0:	f000 fa50 	bl	8000a54 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80005b4:	f000 fa7a 	bl	8000aac <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80005b8:	f000 faa8 	bl	8000b0c <MX_UART10_Init>
  MX_USART6_UART_Init();
 80005bc:	f000 fad0 	bl	8000b60 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 80005c0:	f00a fe48 	bl	800b254 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart6, rx_buffer, 4);
 80005c4:	2204      	movs	r2, #4
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <main+0x7c>)
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0x80>)
 80005ca:	f006 fc5d 	bl	8006e88 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ce:	f00a fe67 	bl	800b2a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    // is it time to transmit a message?
    if (bMSGtransmit == 1) {
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <main+0x84>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d1f9      	bne.n	80005ce <main+0x4a>
    	// message received
    	bMSGtransmit = 0;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <main+0x84>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
    	// send acknowledgement message back
    	HAL_UART_Transmit_IT(&huart6, data, strlen(data));
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x88>)
 80005e2:	681c      	ldr	r4, [r3, #0]
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <main+0x88>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fe15 	bl	8000218 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	4621      	mov	r1, r4
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <main+0x80>)
 80005f8:	f006 fc01 	bl	8006dfe <HAL_UART_Transmit_IT>
    MX_USB_HOST_Process();
 80005fc:	e7e7      	b.n	80005ce <main+0x4a>
 80005fe:	bf00      	nop
 8000600:	20000244 	.word	0x20000244
 8000604:	200003cc 	.word	0x200003cc
 8000608:	200000b0 	.word	0x200000b0
 800060c:	20000000 	.word	0x20000000

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0aa      	sub	sp, #168	; 0xa8
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00b f95a 	bl	800b8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2258      	movs	r2, #88	; 0x58
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f00b f94b 	bl	800b8d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <SystemClock_Config+0x138>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a3f      	ldr	r2, [pc, #252]	; (8000748 <SystemClock_Config+0x138>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <SystemClock_Config+0x138>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b3a      	ldr	r3, [pc, #232]	; (800074c <SystemClock_Config+0x13c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a39      	ldr	r2, [pc, #228]	; (800074c <SystemClock_Config+0x13c>)
 8000668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <SystemClock_Config+0x13c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800067a:	2303      	movs	r3, #3
 800067c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000682:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2310      	movs	r3, #16
 800068c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800069e:	230f      	movs	r3, #15
 80006a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006b0:	2305      	movs	r3, #5
 80006b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 fb5d 	bl	8005d80 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 fccc 	bl	8001068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fda0 	bl	8005230 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006f6:	f000 fcb7 	bl	8001068 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80006fa:	f240 1371 	movw	r3, #369	; 0x171
 80006fe:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000700:	2332      	movs	r3, #50	; 0x32
 8000702:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000704:	230c      	movs	r3, #12
 8000706:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800071e:	2300      	movs	r3, #0
 8000720:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4618      	mov	r0, r3
 8000730:	f004 ff4a 	bl	80055c8 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800073a:	f000 fc95 	bl	8001068 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	37a8      	adds	r7, #168	; 0xa8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000764:	4a21      	ldr	r2, [pc, #132]	; (80007ec <MX_ADC1_Init+0x9c>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_ADC1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_ADC1_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000790:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_ADC1_Init+0xa0>)
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_ADC1_Init+0x98>)
 800079c:	2201      	movs	r2, #1
 800079e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007b0:	f001 fadc 	bl	8001d6c <HAL_ADC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 fc55 	bl	8001068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007be:	230a      	movs	r3, #10
 80007c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_ADC1_Init+0x98>)
 80007d0:	f001 fb10 	bl	8001df4 <HAL_ADC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 fc45 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000250 	.word	0x20000250
 80007ec:	40012000 	.word	0x40012000
 80007f0:	0f000001 	.word	0x0f000001

080007f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_DAC_Init+0x4c>)
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MX_DAC_Init+0x50>)
 8000806:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_DAC_Init+0x4c>)
 800080a:	f001 fe32 	bl	8002472 <HAL_DAC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000814:	f000 fc28 	bl	8001068 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_DAC_Init+0x4c>)
 8000828:	f001 fe45 	bl	80024b6 <HAL_DAC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000832:	f000 fc19 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000298 	.word	0x20000298
 8000844:	40007400 	.word	0x40007400

08000848 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 800084e:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <MX_DFSDM1_Init+0x6c>)
 8000850:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000854:	2201      	movs	r2, #1
 8000856:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000860:	2202      	movs	r2, #2
 8000862:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000878:	2202      	movs	r2, #2
 800087a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 800088a:	2201      	movs	r2, #1
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_DFSDM1_Init+0x68>)
 800089c:	f001 fe58 	bl	8002550 <HAL_DFSDM_ChannelInit>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008a6:	f000 fbdf 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000010c 	.word	0x2000010c
 80008b4:	40016020 	.word	0x40016020

080008b8 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008be:	4a30      	ldr	r2, [pc, #192]	; (8000980 <MX_DFSDM2_Init+0xc8>)
 80008c0:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_DFSDM2_Init+0xc4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_DFSDM2_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_DFSDM2_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800090a:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_DFSDM2_Init+0xc4>)
 800090c:	f001 fe20 	bl	8002550 <HAL_DFSDM_ChannelInit>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000916:	f000 fba7 	bl	8001068 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <MX_DFSDM2_Init+0xd0>)
 800091e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000922:	2201      	movs	r2, #1
 8000924:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 800092e:	2202      	movs	r2, #2
 8000930:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000946:	2202      	movs	r2, #2
 8000948:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000958:	2201      	movs	r2, #1
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 800095e:	2200      	movs	r2, #0
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_DFSDM2_Init+0xcc>)
 800096a:	f001 fdf1 	bl	8002550 <HAL_DFSDM_ChannelInit>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000974:	f000 fb78 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000020c 	.word	0x2000020c
 8000980:	40016420 	.word	0x40016420
 8000984:	20000144 	.word	0x20000144
 8000988:	400164e0 	.word	0x400164e0

0800098c <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <MX_FMPI2C1_Init+0x64>)
 8000994:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 8000998:	4a16      	ldr	r2, [pc, #88]	; (80009f4 <MX_FMPI2C1_Init+0x68>)
 800099a:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009c6:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009c8:	f001 ff38 	bl	800283c <HAL_FMPI2C_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 80009d2:	f000 fb49 	bl	8001068 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_FMPI2C1_Init+0x60>)
 80009da:	f001 ffbe 	bl	800295a <HAL_FMPI2CEx_ConfigAnalogFilter>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80009e4:	f000 fb40 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200002ac 	.word	0x200002ac
 80009f0:	40006000 	.word	0x40006000
 80009f4:	00303d5b 	.word	0x00303d5b

080009f8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_I2S2_Init+0x54>)
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <MX_I2S2_Init+0x58>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a24:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2S2_Init+0x54>)
 8000a3a:	f003 fe75 	bl	8004728 <HAL_I2S_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a44:	f000 fb10 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000040c 	.word	0x2000040c
 8000a50:	40003800 	.word	0x40003800

08000a54 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_QUADSPI_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a60:	22ff      	movs	r2, #255	; 0xff
 8000a62:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_QUADSPI_Init+0x50>)
 8000a90:	f004 fb0c 	bl	80050ac <HAL_QSPI_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a9a:	f000 fae5 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000454 	.word	0x20000454
 8000aa8:	a0001000 	.word	0xa0001000

08000aac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <MX_SDIO_SD_Init+0x5c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000adc:	f005 fb92 	bl	8006204 <HAL_SD_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ae6:	f000 fabf 	bl	8001068 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_SDIO_SD_Init+0x58>)
 8000af0:	f005 fdbc 	bl	800666c <HAL_SD_ConfigWideBusOperation>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000afa:	f000 fab5 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000348 	.word	0x20000348
 8000b08:	40012c00 	.word	0x40012c00

08000b0c <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_UART10_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_UART10_Init+0x4c>)
 8000b44:	f006 f90e 	bl	8006d64 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 fa8b 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000017c 	.word	0x2000017c
 8000b5c:	40011c00 	.word	0x40011c00

08000b60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART6_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART6_UART_Init+0x4c>)
 8000b98:	f006 f8e4 	bl	8006d64 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 fa61 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200003cc 	.word	0x200003cc
 8000bb0:	40011400 	.word	0x40011400

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
 8000bce:	4bb0      	ldr	r3, [pc, #704]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4aaf      	ldr	r2, [pc, #700]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4bad      	ldr	r3, [pc, #692]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	623b      	str	r3, [r7, #32]
 8000be4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	4ba9      	ldr	r3, [pc, #676]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4aa8      	ldr	r2, [pc, #672]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4ba6      	ldr	r3, [pc, #664]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	4ba2      	ldr	r3, [pc, #648]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4aa1      	ldr	r2, [pc, #644]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b9f      	ldr	r3, [pc, #636]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	4b9b      	ldr	r3, [pc, #620]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a9a      	ldr	r2, [pc, #616]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b98      	ldr	r3, [pc, #608]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b94      	ldr	r3, [pc, #592]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a93      	ldr	r2, [pc, #588]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b8d      	ldr	r3, [pc, #564]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a8c      	ldr	r2, [pc, #560]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b8a      	ldr	r3, [pc, #552]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a85      	ldr	r2, [pc, #532]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b83      	ldr	r3, [pc, #524]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b7f      	ldr	r3, [pc, #508]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a7e      	ldr	r2, [pc, #504]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <MX_GPIO_Init+0x2dc>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2138      	movs	r1, #56	; 0x38
 8000cae:	4879      	ldr	r0, [pc, #484]	; (8000e94 <MX_GPIO_Init+0x2e0>)
 8000cb0:	f002 f830 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	4877      	ldr	r0, [pc, #476]	; (8000e98 <MX_GPIO_Init+0x2e4>)
 8000cba:	f002 f82b 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000cc4:	4875      	ldr	r0, [pc, #468]	; (8000e9c <MX_GPIO_Init+0x2e8>)
 8000cc6:	f002 f825 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000cd0:	4873      	ldr	r0, [pc, #460]	; (8000ea0 <MX_GPIO_Init+0x2ec>)
 8000cd2:	f002 f81f 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000cd6:	2338      	movs	r3, #56	; 0x38
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4869      	ldr	r0, [pc, #420]	; (8000e94 <MX_GPIO_Init+0x2e0>)
 8000cee:	f001 fe7f 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000d02:	2303      	movs	r3, #3
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4861      	ldr	r0, [pc, #388]	; (8000e94 <MX_GPIO_Init+0x2e0>)
 8000d0e:	f001 fe6f 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d24:	2302      	movs	r3, #2
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485d      	ldr	r0, [pc, #372]	; (8000ea4 <MX_GPIO_Init+0x2f0>)
 8000d30:	f001 fe5e 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000d34:	2302      	movs	r3, #2
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <MX_GPIO_Init+0x2f4>)
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	4854      	ldr	r0, [pc, #336]	; (8000e98 <MX_GPIO_Init+0x2e4>)
 8000d48:	f001 fe52 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	4b55      	ldr	r3, [pc, #340]	; (8000ea8 <MX_GPIO_Init+0x2f4>)
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4853      	ldr	r0, [pc, #332]	; (8000eac <MX_GPIO_Init+0x2f8>)
 8000d60:	f001 fe46 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000d64:	2320      	movs	r3, #32
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4847      	ldr	r0, [pc, #284]	; (8000e98 <MX_GPIO_Init+0x2e4>)
 8000d7c:	f001 fe38 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000d80:	2301      	movs	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d90:	2302      	movs	r3, #2
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4840      	ldr	r0, [pc, #256]	; (8000e9c <MX_GPIO_Init+0x2e8>)
 8000d9c:	f001 fe28 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <MX_GPIO_Init+0x2f4>)
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	483b      	ldr	r0, [pc, #236]	; (8000ea4 <MX_GPIO_Init+0x2f0>)
 8000db6:	f001 fe1b 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4831      	ldr	r0, [pc, #196]	; (8000e9c <MX_GPIO_Init+0x2e8>)
 8000dd8:	f001 fe0a 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000dee:	2307      	movs	r3, #7
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4828      	ldr	r0, [pc, #160]	; (8000e9c <MX_GPIO_Init+0x2e8>)
 8000dfa:	f001 fdf9 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000dfe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4821      	ldr	r0, [pc, #132]	; (8000e9c <MX_GPIO_Init+0x2e8>)
 8000e18:	f001 fdea 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000e1c:	f248 0380 	movw	r3, #32896	; 0x8080
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <MX_GPIO_Init+0x2f4>)
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <MX_GPIO_Init+0x2ec>)
 8000e32:	f001 fddd 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin;
 8000e36:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <MX_GPIO_Init+0x2ec>)
 8000e50:	f001 fdce 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e66:	2301      	movs	r3, #1
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <MX_GPIO_Init+0x2f8>)
 8000e72:	f001 fdbd 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000e76:	2330      	movs	r3, #48	; 0x30
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e86:	2306      	movs	r3, #6
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	e00f      	b.n	8000eb0 <MX_GPIO_Init+0x2fc>
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	40021400 	.word	0x40021400
 8000ea8:	10110000 	.word	0x10110000
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <MX_GPIO_Init+0x348>)
 8000eb4:	f001 fd9c 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_GPIO_Init+0x34c>)
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_GPIO_Init+0x348>)
 8000ecc:	f001 fd90 	bl	80029f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <MX_GPIO_Init+0x348>)
 8000eee:	f001 fd7f 	bl	80029f0 <HAL_GPIO_Init>

}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020400 	.word	0x40020400
 8000f00:	10110000 	.word	0x10110000

08000f04 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f1c:	4b4f      	ldr	r3, [pc, #316]	; (800105c <MX_FSMC_Init+0x158>)
 8000f1e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f22:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f24:	4b4d      	ldr	r3, [pc, #308]	; (800105c <MX_FSMC_Init+0x158>)
 8000f26:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <MX_FSMC_Init+0x15c>)
 8000f28:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <MX_FSMC_Init+0x158>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000f30:	4b4a      	ldr	r3, [pc, #296]	; (800105c <MX_FSMC_Init+0x158>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <MX_FSMC_Init+0x158>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f3c:	4b47      	ldr	r3, [pc, #284]	; (800105c <MX_FSMC_Init+0x158>)
 8000f3e:	2210      	movs	r2, #16
 8000f40:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <MX_FSMC_Init+0x158>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <MX_FSMC_Init+0x158>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <MX_FSMC_Init+0x158>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <MX_FSMC_Init+0x158>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <MX_FSMC_Init+0x158>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000f60:	4b3e      	ldr	r3, [pc, #248]	; (800105c <MX_FSMC_Init+0x158>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <MX_FSMC_Init+0x158>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	; (800105c <MX_FSMC_Init+0x158>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <MX_FSMC_Init+0x158>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000f78:	4b38      	ldr	r3, [pc, #224]	; (800105c <MX_FSMC_Init+0x158>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <MX_FSMC_Init+0x158>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f84:	230f      	movs	r3, #15
 8000f86:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f90:	230f      	movs	r3, #15
 8000f92:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f94:	2310      	movs	r3, #16
 8000f96:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f98:	2311      	movs	r3, #17
 8000f9a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482d      	ldr	r0, [pc, #180]	; (800105c <MX_FSMC_Init+0x158>)
 8000fa8:	f005 fe98 	bl	8006cdc <HAL_SRAM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8000fb2:	f000 f859 	bl	8001068 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fb8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fbc:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <MX_FSMC_Init+0x15c>)
 8000fc2:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fd8:	2210      	movs	r2, #16
 8000fda:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <MX_FSMC_Init+0x160>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_FSMC_Init+0x160>)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_FSMC_Init+0x160>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_FSMC_Init+0x160>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_FSMC_Init+0x160>)
 8001004:	2200      	movs	r2, #0
 8001006:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_FSMC_Init+0x160>)
 800100a:	2200      	movs	r2, #0
 800100c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_FSMC_Init+0x160>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_FSMC_Init+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_FSMC_Init+0x160>)
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001020:	230f      	movs	r3, #15
 8001022:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001024:	230f      	movs	r3, #15
 8001026:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001028:	23ff      	movs	r3, #255	; 0xff
 800102a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800102c:	230f      	movs	r3, #15
 800102e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001030:	2310      	movs	r3, #16
 8001032:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001034:	2311      	movs	r3, #17
 8001036:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <MX_FSMC_Init+0x160>)
 8001044:	f005 fe4a 	bl	8006cdc <HAL_SRAM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 800104e:	f000 f80b 	bl	8001068 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001052:	bf00      	nop
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200001bc 	.word	0x200001bc
 8001060:	a0000104 	.word	0xa0000104
 8001064:	200002f8 	.word	0x200002f8

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_ADC_MspInit+0xe4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d15b      	bne.n	80011a2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 800115a:	2311      	movs	r3, #17
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <HAL_ADC_MspInit+0xec>)
 800116e:	f001 fc3f 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001172:	2326      	movs	r3, #38	; 0x26
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <HAL_ADC_MspInit+0xf0>)
 8001186:	f001 fc33 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 800118a:	2302      	movs	r3, #2
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <HAL_ADC_MspInit+0xf4>)
 800119e:	f001 fc27 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3730      	adds	r7, #48	; 0x30
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400

080011c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_DAC_MspInit+0x7c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d127      	bne.n	8001232 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_DAC_MspInit+0x80>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_DAC_MspInit+0x80>)
 80011ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_DAC_MspInit+0x80>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_DAC_MspInit+0x80>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_DAC_MspInit+0x80>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_DAC_MspInit+0x80>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800121a:	2310      	movs	r3, #16
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_DAC_MspInit+0x84>)
 800122e:	f001 fbdf 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40007400 	.word	0x40007400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020000 	.word	0x40020000

08001248 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a77      	ldr	r2, [pc, #476]	; (8001444 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d00e      	beq.n	8001288 <HAL_DFSDM_ChannelMspInit+0x40>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a76      	ldr	r2, [pc, #472]	; (8001448 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d009      	beq.n	8001288 <HAL_DFSDM_ChannelMspInit+0x40>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a74      	ldr	r2, [pc, #464]	; (800144c <HAL_DFSDM_ChannelMspInit+0x204>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d004      	beq.n	8001288 <HAL_DFSDM_ChannelMspInit+0x40>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a73      	ldr	r2, [pc, #460]	; (8001450 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d154      	bne.n	8001332 <HAL_DFSDM_ChannelMspInit+0xea>
 8001288:	4b72      	ldr	r3, [pc, #456]	; (8001454 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d150      	bne.n	8001332 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
 8001294:	4b70      	ldr	r3, [pc, #448]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	4a6f      	ldr	r2, [pc, #444]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 800129a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
 80012a0:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a68      	ldr	r2, [pc, #416]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	4b62      	ldr	r3, [pc, #392]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4a61      	ldr	r2, [pc, #388]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80012f6:	2306      	movs	r3, #6
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4856      	ldr	r0, [pc, #344]	; (800145c <HAL_DFSDM_ChannelMspInit+0x214>)
 8001302:	f001 fb75 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001316:	2306      	movs	r3, #6
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	484f      	ldr	r0, [pc, #316]	; (8001460 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001322:	f001 fb65 	bl	80029f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001326:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800132e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001330:	e084      	b.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a43      	ldr	r2, [pc, #268]	; (8001444 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d07f      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a41      	ldr	r2, [pc, #260]	; (8001448 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d07a      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a40      	ldr	r2, [pc, #256]	; (800144c <HAL_DFSDM_ChannelMspInit+0x204>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d075      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d070      	beq.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d16c      	bne.n	800143c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 800136c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a34      	ldr	r2, [pc, #208]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80013e2:	2307      	movs	r3, #7
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	481b      	ldr	r0, [pc, #108]	; (800145c <HAL_DFSDM_ChannelMspInit+0x214>)
 80013ee:	f001 faff 	bl	80029f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80013f2:	2304      	movs	r3, #4
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001402:	2303      	movs	r3, #3
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	4619      	mov	r1, r3
 800140c:	4814      	ldr	r0, [pc, #80]	; (8001460 <HAL_DFSDM_ChannelMspInit+0x218>)
 800140e:	f001 faef 	bl	80029f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001422:	2306      	movs	r3, #6
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <HAL_DFSDM_ChannelMspInit+0x220>)
 800142e:	f001 fadf 	bl	80029f0 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40016000 	.word	0x40016000
 8001448:	40016020 	.word	0x40016020
 800144c:	40016040 	.word	0x40016040
 8001450:	40016060 	.word	0x40016060
 8001454:	200000b4 	.word	0x200000b4
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020c00 	.word	0x40020c00
 8001464:	200000b8 	.word	0x200000b8
 8001468:	40020400 	.word	0x40020400

0800146c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_FMPI2C_MspInit+0x84>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12b      	bne.n	80014e6 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80014ba:	2304      	movs	r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <HAL_FMPI2C_MspInit+0x8c>)
 80014c6:	f001 fa93 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_FMPI2C_MspInit+0x88>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40006000 	.word	0x40006000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020800 	.word	0x40020800

080014fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_I2S_MspInit+0x15c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	f040 8097 	bne.w	800164e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_I2S_MspInit+0x160>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a45      	ldr	r2, [pc, #276]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b43      	ldr	r3, [pc, #268]	; (800165c <HAL_I2S_MspInit+0x160>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b3f      	ldr	r3, [pc, #252]	; (800165c <HAL_I2S_MspInit+0x160>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a3e      	ldr	r2, [pc, #248]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_I2S_MspInit+0x160>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <HAL_I2S_MspInit+0x160>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a37      	ldr	r2, [pc, #220]	; (800165c <HAL_I2S_MspInit+0x160>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_I2S_MspInit+0x160>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a30      	ldr	r2, [pc, #192]	; (800165c <HAL_I2S_MspInit+0x160>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_I2S_MspInit+0x160>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80015ac:	2304      	movs	r3, #4
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80015bc:	2306      	movs	r3, #6
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4826      	ldr	r0, [pc, #152]	; (8001660 <HAL_I2S_MspInit+0x164>)
 80015c8:	f001 fa12 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80015cc:	2308      	movs	r3, #8
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2305      	movs	r3, #5
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	481e      	ldr	r0, [pc, #120]	; (8001660 <HAL_I2S_MspInit+0x164>)
 80015e8:	f001 fa02 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80015ec:	2308      	movs	r3, #8
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015fc:	2305      	movs	r3, #5
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	4817      	ldr	r0, [pc, #92]	; (8001664 <HAL_I2S_MspInit+0x168>)
 8001608:	f001 f9f2 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 800160c:	2308      	movs	r3, #8
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161c:	2305      	movs	r3, #5
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <HAL_I2S_MspInit+0x16c>)
 8001628:	f001 f9e2 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800162c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163e:	2305      	movs	r3, #5
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	; (800166c <HAL_I2S_MspInit+0x170>)
 800164a:	f001 f9d1 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3730      	adds	r7, #48	; 0x30
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40003800 	.word	0x40003800
 800165c:	40023800 	.word	0x40023800
 8001660:	40020800 	.word	0x40020800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020400 	.word	0x40020400

08001670 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	; 0x38
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_QSPI_MspInit+0x178>)
 800168e:	4293      	cmp	r3, r2
 8001690:	f040 80a6 	bne.w	80017e0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	4b54      	ldr	r3, [pc, #336]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800169a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169c:	4a53      	ldr	r2, [pc, #332]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	6393      	str	r3, [r2, #56]	; 0x38
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a45      	ldr	r2, [pc, #276]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4a3e      	ldr	r2, [pc, #248]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	6313      	str	r3, [r2, #48]	; 0x30
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4a37      	ldr	r2, [pc, #220]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6313      	str	r3, [r2, #48]	; 0x30
 8001714:	4b35      	ldr	r3, [pc, #212]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a30      	ldr	r2, [pc, #192]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 800172a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <HAL_QSPI_MspInit+0x17c>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800173c:	2304      	movs	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800174c:	2309      	movs	r3, #9
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4826      	ldr	r0, [pc, #152]	; (80017f0 <HAL_QSPI_MspInit+0x180>)
 8001758:	f001 f94a 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800175c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800176e:	230a      	movs	r3, #10
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	4619      	mov	r1, r3
 8001778:	481e      	ldr	r0, [pc, #120]	; (80017f4 <HAL_QSPI_MspInit+0x184>)
 800177a:	f001 f939 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800177e:	2304      	movs	r3, #4
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800178e:	2309      	movs	r3, #9
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001796:	4619      	mov	r1, r3
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <HAL_QSPI_MspInit+0x188>)
 800179a:	f001 f929 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017b0:	2309      	movs	r3, #9
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4810      	ldr	r0, [pc, #64]	; (80017fc <HAL_QSPI_MspInit+0x18c>)
 80017bc:	f001 f918 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017d0:	230a      	movs	r3, #10
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_QSPI_MspInit+0x190>)
 80017dc:	f001 f908 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3738      	adds	r7, #56	; 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	a0001000 	.word	0xa0001000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40021400 	.word	0x40021400
 80017f8:	40020400 	.word	0x40020400
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	40021800 	.word	0x40021800

08001804 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_SD_MspInit+0xc0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d14a      	bne.n	80018bc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_SD_MspInit+0xc4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800188a:	230c      	movs	r3, #12
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <HAL_SD_MspInit+0xc8>)
 8001896:	f001 f8ab 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 800189a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800189e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018ac:	230c      	movs	r3, #12
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_SD_MspInit+0xcc>)
 80018b8:	f001 f89a 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40012c00 	.word	0x40012c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020800 	.word	0x40020800

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a37      	ldr	r2, [pc, #220]	; (80019d0 <HAL_UART_MspInit+0xfc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12d      	bne.n	8001952 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_UART_MspInit+0x100>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <HAL_UART_MspInit+0x100>)
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 800192e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001938:	2301      	movs	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001940:	230b      	movs	r3, #11
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	4619      	mov	r1, r3
 800194a:	4823      	ldr	r0, [pc, #140]	; (80019d8 <HAL_UART_MspInit+0x104>)
 800194c:	f001 f850 	bl	80029f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001950:	e039      	b.n	80019c6 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a21      	ldr	r2, [pc, #132]	; (80019dc <HAL_UART_MspInit+0x108>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d134      	bne.n	80019c6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	6453      	str	r3, [r2, #68]	; 0x44
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x100>)
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_UART_MspInit+0x100>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_UART_MspInit+0x100>)
 8001982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001986:	6313      	str	r3, [r2, #48]	; 0x30
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_UART_MspInit+0x100>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001994:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019a6:	2308      	movs	r3, #8
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_UART_MspInit+0x104>)
 80019b2:	f001 f81d 	bl	80029f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2047      	movs	r0, #71	; 0x47
 80019bc:	f000 fd23 	bl	8002406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019c0:	2047      	movs	r0, #71	; 0x47
 80019c2:	f000 fd3c 	bl	800243e <HAL_NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40011c00 	.word	0x40011c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40021800 	.word	0x40021800
 80019dc:	40011400 	.word	0x40011400

080019e0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80019f4:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <HAL_FSMC_MspInit+0xc8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d151      	bne.n	8001aa0 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80019fc:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <HAL_FSMC_MspInit+0xc8>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_FSMC_MspInit+0xcc>)
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	4a28      	ldr	r2, [pc, #160]	; (8001aac <HAL_FSMC_MspInit+0xcc>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_FSMC_MspInit+0xcc>)
 8001a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001a1e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001a22:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a30:	230c      	movs	r3, #12
 8001a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <HAL_FSMC_MspInit+0xd0>)
 8001a3a:	f000 ffd9 	bl	80029f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001a3e:	f240 433f 	movw	r3, #1087	; 0x43f
 8001a42:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a50:	230c      	movs	r3, #12
 8001a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <HAL_FSMC_MspInit+0xd4>)
 8001a5a:	f000 ffc9 	bl	80029f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001a5e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a62:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a70:	230c      	movs	r3, #12
 8001a72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_FSMC_MspInit+0xd8>)
 8001a7a:	f000 ffb9 	bl	80029f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001a7e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001a82:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a90:	230c      	movs	r3, #12
 8001a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_FSMC_MspInit+0xdc>)
 8001a9a:	f000 ffa9 	bl	80029f0 <HAL_GPIO_Init>
 8001a9e:	e000      	b.n	8001aa2 <HAL_FSMC_MspInit+0xc2>
    return;
 8001aa0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200000bc 	.word	0x200000bc
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020c00 	.word	0x40020c00

08001ac0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ac8:	f7ff ff8a 	bl	80019e0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 f8de 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <OTG_FS_IRQHandler+0x10>)
 8001b36:	f001 fb95 	bl	8003264 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000087c 	.word	0x2000087c

08001b44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART6_IRQHandler+0x10>)
 8001b4a:	f005 f9f3 	bl	8006f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200003cc 	.word	0x200003cc

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f009 fe6c 	bl	800b864 <__errno>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	230c      	movs	r3, #12
 8001b90:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20050000 	.word	0x20050000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	200000c0 	.word	0x200000c0
 8001bc0:	20000b48 	.word	0x20000b48

08001bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <SystemInit+0x28>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a07      	ldr	r2, [pc, #28]	; (8001bec <SystemInit+0x28>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SystemInit+0x28>)
 8001bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bde:	609a      	str	r2, [r3, #8]
#endif
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001bf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bf6:	e003      	b.n	8001c00 <LoopCopyDataInit>

08001bf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bfe:	3104      	adds	r1, #4

08001c00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c08:	d3f6      	bcc.n	8001bf8 <CopyDataInit>
  ldr  r2, =_sbss
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c0c:	e002      	b.n	8001c14 <LoopFillZerobss>

08001c0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001c0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c10:	f842 3b04 	str.w	r3, [r2], #4

08001c14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c18:	d3f9      	bcc.n	8001c0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c1a:	f7ff ffd3 	bl	8001bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f009 fe27 	bl	800b870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c22:	f7fe fcaf 	bl	8000584 <main>
  bx  lr    
 8001c26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001c2c:	0800bad0 	.word	0x0800bad0
  ldr  r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c34:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001c38:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001c3c:	20000b44 	.word	0x20000b44

08001c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_Init+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <HAL_Init+0x40>)
 8001c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_Init+0x40>)
 8001c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_Init+0x40>)
 8001c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f000 fbbf 	bl	80023f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f808 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c78:	f7ff f9fe 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023c00 	.word	0x40023c00

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fbd7 	bl	800245a <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 fb9f 	bl	8002406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	2000000c 	.word	0x2000000c
 8001d0c:	200004a0 	.word	0x200004a0

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200004a0 	.word	0x200004a0

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_Delay+0x40>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffde 	bl	8001d10 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000000c 	.word	0x2000000c

08001d6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e033      	b.n	8001dea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d109      	bne.n	8001d9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff f99c 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001db2:	f023 0302 	bic.w	r3, r3, #2
 8001db6:	f043 0202 	orr.w	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f94a 	bl	8002058 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dda:	e001      	b.n	8001de0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x1c>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e113      	b.n	8002038 <HAL_ADC_ConfigChannel+0x244>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d925      	bls.n	8001e6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	2207      	movs	r2, #7
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4403      	add	r3, r0
 8001e5e:	3b1e      	subs	r3, #30
 8001e60:	409a      	lsls	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	e022      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6919      	ldr	r1, [r3, #16]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	2207      	movs	r2, #7
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4403      	add	r3, r0
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d824      	bhi.n	8001f04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b05      	subs	r3, #5
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3b05      	subs	r3, #5
 8001ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
 8001f02:	e04c      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d824      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b23      	subs	r3, #35	; 0x23
 8001f1e:	221f      	movs	r2, #31
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43da      	mvns	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b23      	subs	r3, #35	; 0x23
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
 8001f54:	e023      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b41      	subs	r3, #65	; 0x41
 8001f68:	221f      	movs	r2, #31
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b41      	subs	r3, #65	; 0x41
 8001f92:	fa00 f203 	lsl.w	r2, r0, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_ADC_ConfigChannel+0x250>)
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_ADC_ConfigChannel+0x254>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d10f      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1d8>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b12      	cmp	r3, #18
 8001fb2:	d10b      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_ADC_ConfigChannel+0x254>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12b      	bne.n	800202e <HAL_ADC_ConfigChannel+0x23a>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_ADC_ConfigChannel+0x258>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d122      	bne.n	800202e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_ADC_ConfigChannel+0x258>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d111      	bne.n	800202e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_ADC_ConfigChannel+0x25c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_ADC_ConfigChannel+0x260>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	0c9a      	lsrs	r2, r3, #18
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002020:	e002      	b.n	8002028 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40012300 	.word	0x40012300
 8002048:	40012000 	.word	0x40012000
 800204c:	10000012 	.word	0x10000012
 8002050:	20000004 	.word	0x20000004
 8002054:	431bde83 	.word	0x431bde83

08002058 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002060:	4b79      	ldr	r3, [pc, #484]	; (8002248 <ADC_Init+0x1f0>)
 8002062:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	431a      	orrs	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	4a58      	ldr	r2, [pc, #352]	; (800224c <ADC_Init+0x1f4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d022      	beq.n	8002136 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6899      	ldr	r1, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e00f      	b.n	8002156 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0202 	bic.w	r2, r2, #2
 8002164:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
 8002170:	005a      	lsls	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002192:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	3b01      	subs	r3, #1
 80021b0:	035a      	lsls	r2, r3, #13
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	e007      	b.n	80021cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	051a      	lsls	r2, r3, #20
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800220e:	025a      	lsls	r2, r3, #9
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	029a      	lsls	r2, r3, #10
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40012300 	.word	0x40012300
 800224c:	0f000001 	.word	0x0f000001

08002250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800226c:	4013      	ands	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002282:	4a04      	ldr	r2, [pc, #16]	; (8002294 <__NVIC_SetPriorityGrouping+0x44>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60d3      	str	r3, [r2, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <__NVIC_GetPriorityGrouping+0x18>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0307 	and.w	r3, r3, #7
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db0b      	blt.n	80022de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <__NVIC_EnableIRQ+0x38>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2001      	movs	r0, #1
 80022d6:	fa00 f202 	lsl.w	r2, r0, r2
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d301      	bcc.n	80023c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023be:	2301      	movs	r3, #1
 80023c0:	e00f      	b.n	80023e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <SysTick_Config+0x40>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ca:	210f      	movs	r1, #15
 80023cc:	f04f 30ff 	mov.w	r0, #4294967295
 80023d0:	f7ff ff8e 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SysTick_Config+0x40>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SysTick_Config+0x40>)
 80023dc:	2207      	movs	r2, #7
 80023de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000e010 	.word	0xe000e010

080023f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ff29 	bl	8002250 <__NVIC_SetPriorityGrouping>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff3e 	bl	8002298 <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff8e 	bl	8002344 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5d 	bl	80022f0 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff31 	bl	80022b4 <__NVIC_EnableIRQ>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffa2 	bl	80023ac <SysTick_Config>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e014      	b.n	80024ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	791b      	ldrb	r3, [r3, #4]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7fe fe93 	bl	80011c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b087      	sub	sp, #28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	795b      	ldrb	r3, [r3, #5]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_DAC_ConfigChannel+0x20>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e036      	b.n	8002544 <HAL_DAC_ConfigChannel+0x8e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2202      	movs	r2, #2
 80024e0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80024ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	22c0      	movs	r2, #192	; 0xc0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43da      	mvns	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e0cf      	b.n	8002702 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a69      	ldr	r2, [pc, #420]	; (800270c <HAL_DFSDM_ChannelInit+0x1bc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_DFSDM_ChannelInit+0x3a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a67      	ldr	r2, [pc, #412]	; (8002710 <HAL_DFSDM_ChannelInit+0x1c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_DFSDM_ChannelInit+0x3a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a66      	ldr	r2, [pc, #408]	; (8002714 <HAL_DFSDM_ChannelInit+0x1c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_DFSDM_ChannelInit+0x3a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a64      	ldr	r2, [pc, #400]	; (8002718 <HAL_DFSDM_ChannelInit+0x1c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d106      	bne.n	8002598 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <HAL_DFSDM_ChannelInit+0x1cc>)
 800258c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800258e:	4b64      	ldr	r3, [pc, #400]	; (8002720 <HAL_DFSDM_ChannelInit+0x1d0>)
 8002590:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8002592:	4b5e      	ldr	r3, [pc, #376]	; (800270c <HAL_DFSDM_ChannelInit+0x1bc>)
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e005      	b.n	80025a4 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8002598:	4b62      	ldr	r3, [pc, #392]	; (8002724 <HAL_DFSDM_ChannelInit+0x1d4>)
 800259a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 800259c:	4b62      	ldr	r3, [pc, #392]	; (8002728 <HAL_DFSDM_ChannelInit+0x1d8>)
 800259e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80025a0:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_DFSDM_ChannelInit+0x1dc>)
 80025a2:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f8c1 	bl	8002730 <DFSDM_GetChannelFromInstance>
 80025ae:	4603      	mov	r3, r0
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0a0      	b.n	8002702 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe fe41 	bl	8001248 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d125      	bne.n	8002624 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	791b      	ldrb	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d108      	bne.n	8002618 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	3b01      	subs	r3, #1
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002632:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8002642:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8002648:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 020f 	bic.w	r2, r2, #15
 8002660:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002688:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6899      	ldr	r1, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 0207 	and.w	r2, r2, #7
 80026b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e0:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f81e 	bl	8002730 <DFSDM_GetChannelFromInstance>
 80026f4:	4603      	mov	r3, r0
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4413      	add	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40016000 	.word	0x40016000
 8002710:	40016020 	.word	0x40016020
 8002714:	40016040 	.word	0x40016040
 8002718:	40016060 	.word	0x40016060
 800271c:	200000c4 	.word	0x200000c4
 8002720:	200000c8 	.word	0x200000c8
 8002724:	200000d8 	.word	0x200000d8
 8002728:	200000dc 	.word	0x200000dc
 800272c:	40016400 	.word	0x40016400

08002730 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a24      	ldr	r2, [pc, #144]	; (80027cc <DFSDM_GetChannelFromInstance+0x9c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <DFSDM_GetChannelFromInstance+0x18>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <DFSDM_GetChannelFromInstance+0xa0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d102      	bne.n	800274e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e037      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <DFSDM_GetChannelFromInstance+0xa4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <DFSDM_GetChannelFromInstance+0x2e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <DFSDM_GetChannelFromInstance+0xa8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d102      	bne.n	8002764 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800275e:	2301      	movs	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e02c      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <DFSDM_GetChannelFromInstance+0xac>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <DFSDM_GetChannelFromInstance+0x44>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <DFSDM_GetChannelFromInstance+0xb0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d102      	bne.n	800277a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8002774:	2302      	movs	r3, #2
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e021      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <DFSDM_GetChannelFromInstance+0xb4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <DFSDM_GetChannelFromInstance+0x5a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <DFSDM_GetChannelFromInstance+0xb8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d102      	bne.n	8002790 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800278a:	2303      	movs	r3, #3
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e016      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <DFSDM_GetChannelFromInstance+0xbc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d102      	bne.n	800279e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8002798:	2304      	movs	r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e00f      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <DFSDM_GetChannelFromInstance+0xc0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d102      	bne.n	80027ac <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80027a6:	2305      	movs	r3, #5
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e008      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <DFSDM_GetChannelFromInstance+0xc4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d102      	bne.n	80027ba <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80027b4:	2306      	movs	r3, #6
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e001      	b.n	80027be <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80027ba:	2307      	movs	r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40016000 	.word	0x40016000
 80027d0:	40016400 	.word	0x40016400
 80027d4:	40016020 	.word	0x40016020
 80027d8:	40016420 	.word	0x40016420
 80027dc:	40016040 	.word	0x40016040
 80027e0:	40016440 	.word	0x40016440
 80027e4:	40016060 	.word	0x40016060
 80027e8:	40016460 	.word	0x40016460
 80027ec:	40016480 	.word	0x40016480
 80027f0:	400164a0 	.word	0x400164a0
 80027f4:	400164c0 	.word	0x400164c0

080027f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d004      	beq.n	8002816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e00c      	b.n	8002830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2205      	movs	r2, #5
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e081      	b.n	8002952 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fe02 	bl	800146c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d104      	bne.n	80028d6 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69d9      	ldr	r1, [r3, #28]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d138      	bne.n	80029e2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 800297a:	2302      	movs	r3, #2
 800297c:	e032      	b.n	80029e4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2224      	movs	r2, #36	; 0x24
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e165      	b.n	8002cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8154 	bne.w	8002cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00b      	beq.n	8002a4a <HAL_GPIO_Init+0x5a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d007      	beq.n	8002a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a3e:	2b11      	cmp	r3, #17
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0xfc>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80ae 	beq.w	8002cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	; (8002cec <HAL_GPIO_Init+0x2fc>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a5b      	ldr	r2, [pc, #364]	; (8002cec <HAL_GPIO_Init+0x2fc>)
 8002b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_GPIO_Init+0x2fc>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b92:	4a57      	ldr	r2, [pc, #348]	; (8002cf0 <HAL_GPIO_Init+0x300>)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	3302      	adds	r3, #2
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4e      	ldr	r2, [pc, #312]	; (8002cf4 <HAL_GPIO_Init+0x304>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d025      	beq.n	8002c0a <HAL_GPIO_Init+0x21a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4d      	ldr	r2, [pc, #308]	; (8002cf8 <HAL_GPIO_Init+0x308>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_GPIO_Init+0x216>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <HAL_GPIO_Init+0x30c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x212>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4b      	ldr	r2, [pc, #300]	; (8002d00 <HAL_GPIO_Init+0x310>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4a      	ldr	r2, [pc, #296]	; (8002d04 <HAL_GPIO_Init+0x314>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x20a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a49      	ldr	r2, [pc, #292]	; (8002d08 <HAL_GPIO_Init+0x318>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x206>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a48      	ldr	r2, [pc, #288]	; (8002d0c <HAL_GPIO_Init+0x31c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x202>
 8002bee:	2306      	movs	r3, #6
 8002bf0:	e00c      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00a      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	e008      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x21c>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f002 0203 	and.w	r2, r2, #3
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	4093      	lsls	r3, r2
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1c:	4934      	ldr	r1, [pc, #208]	; (8002cf0 <HAL_GPIO_Init+0x300>)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c4e:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca2:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <HAL_GPIO_Init+0x320>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	f67f ae96 	bls.w	8002a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3724      	adds	r7, #36	; 0x24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40013800 	.word	0x40013800
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40020400 	.word	0x40020400
 8002cfc:	40020800 	.word	0x40020800
 8002d00:	40020c00 	.word	0x40020c00
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40013c00 	.word	0x40013c00

08002d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
 8002d20:	4613      	mov	r3, r2
 8002d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d24:	787b      	ldrb	r3, [r7, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d2a:	887a      	ldrh	r2, [r7, #2]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d30:	e003      	b.n	8002d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d32:	887b      	ldrh	r3, [r7, #2]
 8002d34:	041a      	lsls	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	619a      	str	r2, [r3, #24]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d48:	b08f      	sub	sp, #60	; 0x3c
 8002d4a:	af0a      	add	r7, sp, #40	; 0x28
 8002d4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e054      	b.n	8002e02 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f008 facc 	bl	800b310 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 fc8e 	bl	80086b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	687e      	ldr	r6, [r7, #4]
 8002da4:	466d      	mov	r5, sp
 8002da6:	f106 0410 	add.w	r4, r6, #16
 8002daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dba:	1d33      	adds	r3, r6, #4
 8002dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dbe:	6838      	ldr	r0, [r7, #0]
 8002dc0:	f005 fc08 	bl	80085d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f005 fc85 	bl	80086da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	687e      	ldr	r6, [r7, #4]
 8002dd8:	466d      	mov	r5, sp
 8002dda:	f106 0410 	add.w	r4, r6, #16
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dee:	1d33      	adds	r3, r6, #4
 8002df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df2:	6838      	ldr	r0, [r7, #0]
 8002df4:	f005 fd98 	bl	8008928 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e0a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002e0a:	b590      	push	{r4, r7, lr}
 8002e0c:	b089      	sub	sp, #36	; 0x24
 8002e0e:	af04      	add	r7, sp, #16
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	4608      	mov	r0, r1
 8002e14:	4611      	mov	r1, r2
 8002e16:	461a      	mov	r2, r3
 8002e18:	4603      	mov	r3, r0
 8002e1a:	70fb      	strb	r3, [r7, #3]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70bb      	strb	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_HCD_HC_Init+0x28>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e07f      	b.n	8002f32 <HAL_HCD_HC_Init+0x128>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	333d      	adds	r3, #61	; 0x3d
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	787a      	ldrb	r2, [r7, #1]
 8002e60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3340      	adds	r3, #64	; 0x40
 8002e72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e74:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	3339      	adds	r3, #57	; 0x39
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	333f      	adds	r3, #63	; 0x3f
 8002e9a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	78bb      	ldrb	r3, [r7, #2]
 8002ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ea8:	b2d8      	uxtb	r0, r3
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	333a      	adds	r3, #58	; 0x3a
 8002eb8:	4602      	mov	r2, r0
 8002eba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ebc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da0a      	bge.n	8002eda <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	333b      	adds	r3, #59	; 0x3b
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	e009      	b.n	8002eee <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	440b      	add	r3, r1
 8002ee8:	333b      	adds	r3, #59	; 0x3b
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	333c      	adds	r3, #60	; 0x3c
 8002efe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f02:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	787c      	ldrb	r4, [r7, #1]
 8002f0a:	78ba      	ldrb	r2, [r7, #2]
 8002f0c:	78f9      	ldrb	r1, [r7, #3]
 8002f0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f10:	9302      	str	r3, [sp, #8]
 8002f12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4623      	mov	r3, r4
 8002f20:	f005 fe7e 	bl	8008c20 <USB_HC_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}

08002f3a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_HCD_HC_Halt+0x1e>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e00f      	b.n	8002f78 <HAL_HCD_HC_Halt+0x3e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f006 f8ba 	bl	80090e2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	70fb      	strb	r3, [r7, #3]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70bb      	strb	r3, [r7, #2]
 8002f96:	4613      	mov	r3, r2
 8002f98:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	333b      	adds	r3, #59	; 0x3b
 8002faa:	78ba      	ldrb	r2, [r7, #2]
 8002fac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	333f      	adds	r3, #63	; 0x3f
 8002fbe:	787a      	ldrb	r2, [r7, #1]
 8002fc0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002fc2:	7c3b      	ldrb	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d114      	bne.n	8002ff2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3342      	adds	r3, #66	; 0x42
 8002fd8:	2203      	movs	r2, #3
 8002fda:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	333d      	adds	r3, #61	; 0x3d
 8002fec:	7f3a      	ldrb	r2, [r7, #28]
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e009      	b.n	8003006 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	3342      	adds	r3, #66	; 0x42
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003006:	787b      	ldrb	r3, [r7, #1]
 8003008:	2b03      	cmp	r3, #3
 800300a:	f200 80d6 	bhi.w	80031ba <HAL_HCD_HC_SubmitRequest+0x23a>
 800300e:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003014:	08003025 	.word	0x08003025
 8003018:	080031a5 	.word	0x080031a5
 800301c:	08003091 	.word	0x08003091
 8003020:	0800311b 	.word	0x0800311b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003024:	7c3b      	ldrb	r3, [r7, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 80c9 	bne.w	80031be <HAL_HCD_HC_SubmitRequest+0x23e>
 800302c:	78bb      	ldrb	r3, [r7, #2]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80c5 	bne.w	80031be <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003034:	8b3b      	ldrh	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	3351      	adds	r3, #81	; 0x51
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	440b      	add	r3, r1
 800305c:	3351      	adds	r3, #81	; 0x51
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	3342      	adds	r3, #66	; 0x42
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003078:	e0a1      	b.n	80031be <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3342      	adds	r3, #66	; 0x42
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
      break;
 800308e:	e096      	b.n	80031be <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003090:	78bb      	ldrb	r3, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d120      	bne.n	80030d8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3351      	adds	r3, #81	; 0x51
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3342      	adds	r3, #66	; 0x42
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80030c0:	e07e      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3342      	adds	r3, #66	; 0x42
 80030d2:	2202      	movs	r2, #2
 80030d4:	701a      	strb	r2, [r3, #0]
      break;
 80030d6:	e073      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	3350      	adds	r3, #80	; 0x50
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	440b      	add	r3, r1
 80030fc:	3342      	adds	r3, #66	; 0x42
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
      break;
 8003102:	e05d      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3342      	adds	r3, #66	; 0x42
 8003114:	2202      	movs	r2, #2
 8003116:	701a      	strb	r2, [r3, #0]
      break;
 8003118:	e052      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800311a:	78bb      	ldrb	r3, [r7, #2]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d120      	bne.n	8003162 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3351      	adds	r3, #81	; 0x51
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3342      	adds	r3, #66	; 0x42
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800314a:	e039      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	e02e      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	3350      	adds	r3, #80	; 0x50
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	3342      	adds	r3, #66	; 0x42
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
      break;
 800318c:	e018      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	3342      	adds	r3, #66	; 0x42
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
      break;
 80031a2:	e00d      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	3342      	adds	r3, #66	; 0x42
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
      break;
 80031b8:	e002      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80031be:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	3344      	adds	r3, #68	; 0x44
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	8b39      	ldrh	r1, [r7, #24]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4403      	add	r3, r0
 80031e4:	3348      	adds	r3, #72	; 0x48
 80031e6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	440b      	add	r3, r1
 800320a:	334c      	adds	r3, #76	; 0x4c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	3339      	adds	r3, #57	; 0x39
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	440b      	add	r3, r1
 8003232:	335d      	adds	r3, #93	; 0x5d
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	3338      	adds	r3, #56	; 0x38
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	18d1      	adds	r1, r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	f005 fdee 	bl	8008e34 <USB_HC_StartXfer>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 fb11 	bl	80088a2 <USB_GetMode>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80ef 	bne.w	8003466 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f005 faf5 	bl	800887c <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80e5 	beq.w	8003464 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f005 faec 	bl	800887c <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ae:	d104      	bne.n	80032ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f005 fadc 	bl	800887c <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ce:	d104      	bne.n	80032da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f005 facc 	bl	800887c <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ee:	d104      	bne.n	80032fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f005 fabc 	bl	800887c <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d103      	bne.n	8003316 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2202      	movs	r2, #2
 8003314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f005 faae 	bl	800887c <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800332a:	d115      	bne.n	8003358 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003334:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f008 f860 	bl	800b40c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f005 fb9e 	bl	8008a94 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f005 fa8d 	bl	800887c <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336c:	d102      	bne.n	8003374 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f001 f966 	bl	8004640 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f005 fa7f 	bl	800887c <USB_ReadInterrupts>
 800337e:	4603      	mov	r3, r0
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d106      	bne.n	8003396 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f008 f823 	bl	800b3d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2208      	movs	r2, #8
 8003394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f005 fa6e 	bl	800887c <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033aa:	d138      	bne.n	800341e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 fe85 	bl	80090c0 <USB_HC_ReadInterrupt>
 80033b6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e025      	b.n	800340a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e8:	d106      	bne.n	80033f8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f8cf 	bl	8003594 <HCD_HC_IN_IRQHandler>
 80033f6:	e005      	b.n	8003404 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fcfd 	bl	8003dfe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3301      	adds	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	429a      	cmp	r2, r3
 8003412:	d3d4      	bcc.n	80033be <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800341c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f005 fa2a 	bl	800887c <USB_ReadInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d101      	bne.n	8003436 <HAL_HCD_IRQHandler+0x1d2>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_HCD_IRQHandler+0x1d4>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d014      	beq.n	8003466 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f001 f84b 	bl	80044e8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0210 	orr.w	r2, r2, #16
 8003460:	619a      	str	r2, [r3, #24]
 8003462:	e000      	b.n	8003466 <HAL_HCD_IRQHandler+0x202>
      return;
 8003464:	bf00      	nop
    }
  }
}
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_HCD_Start+0x16>
 800347e:	2302      	movs	r3, #2
 8003480:	e013      	b.n	80034aa <HAL_HCD_Start+0x3e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 f901 	bl	8008696 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f005 fb5e 	bl	8008b5c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_HCD_Stop+0x16>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e00d      	b.n	80034e4 <HAL_HCD_Stop+0x32>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f005 ff3f 	bl	8009358 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f005 fb05 	bl	8008b08 <USB_ResetPort>
 80034fe:	4603      	mov	r3, r0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	335c      	adds	r3, #92	; 0x5c
 8003524:	781b      	ldrb	r3, [r3, #0]
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	334c      	adds	r3, #76	; 0x4c
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f005 fb47 	bl	8008bfc <USB_GetCurrentFrame>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f005 fb22 	bl	8008bce <USB_GetHostSpeed>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d119      	bne.n	80035f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	2304      	movs	r3, #4
 80035d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	0151      	lsls	r1, r2, #5
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	440a      	add	r2, r1
 80035ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	60d3      	str	r3, [r2, #12]
 80035f6:	e0ce      	b.n	8003796 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d12c      	bne.n	800366a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003622:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	335d      	adds	r3, #93	; 0x5d
 8003634:	2207      	movs	r2, #7
 8003636:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	440a      	add	r2, r1
 800364e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f005 fd3d 	bl	80090e2 <USB_HC_Halt>
 8003668:	e095      	b.n	8003796 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d109      	bne.n	8003694 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	2320      	movs	r3, #32
 8003690:	6093      	str	r3, [r2, #8]
 8003692:	e080      	b.n	8003796 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d134      	bne.n	8003714 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	440b      	add	r3, r1
 80036d8:	335d      	adds	r3, #93	; 0x5d
 80036da:	2205      	movs	r2, #5
 80036dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	461a      	mov	r2, r3
 80036ec:	2310      	movs	r3, #16
 80036ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	461a      	mov	r2, r3
 80036fe:	2308      	movs	r3, #8
 8003700:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	4611      	mov	r1, r2
 800370c:	4618      	mov	r0, r3
 800370e:	f005 fce8 	bl	80090e2 <USB_HC_Halt>
 8003712:	e040      	b.n	8003796 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d134      	bne.n	8003796 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	440a      	add	r2, r1
 8003742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003746:	f043 0302 	orr.w	r3, r3, #2
 800374a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f005 fcc3 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	2310      	movs	r3, #16
 800376c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	440b      	add	r3, r1
 800377c:	335d      	adds	r3, #93	; 0x5d
 800377e:	2208      	movs	r2, #8
 8003780:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378e:	461a      	mov	r2, r3
 8003790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003794:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d122      	bne.n	80037f4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f005 fc82 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80037f2:	e300      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b01      	cmp	r3, #1
 8003808:	f040 80fd 	bne.w	8003a06 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	440b      	add	r3, r1
 8003822:	3348      	adds	r3, #72	; 0x48
 8003824:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	0159      	lsls	r1, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	440b      	add	r3, r1
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003838:	1ad1      	subs	r1, r2, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4403      	add	r3, r0
 8003848:	334c      	adds	r3, #76	; 0x4c
 800384a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	335d      	adds	r3, #93	; 0x5d
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	440b      	add	r3, r1
 800386e:	3358      	adds	r3, #88	; 0x58
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	2301      	movs	r3, #1
 8003884:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	333f      	adds	r3, #63	; 0x3f
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	333f      	adds	r3, #63	; 0x3f
 80038ac:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d121      	bne.n	80038f6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038cc:	f043 0302 	orr.w	r3, r3, #2
 80038d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f005 fc00 	bl	80090e2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	461a      	mov	r2, r3
 80038f0:	2310      	movs	r3, #16
 80038f2:	6093      	str	r3, [r2, #8]
 80038f4:	e070      	b.n	80039d8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	333f      	adds	r3, #63	; 0x3f
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d12a      	bne.n	8003962 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	0151      	lsls	r1, r2, #5
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	440a      	add	r2, r1
 8003922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800392a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335c      	adds	r3, #92	; 0x5c
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	b2d8      	uxtb	r0, r3
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	440b      	add	r3, r1
 8003952:	335c      	adds	r3, #92	; 0x5c
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	4601      	mov	r1, r0
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f007 fd64 	bl	800b428 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003960:	e03a      	b.n	80039d8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	440b      	add	r3, r1
 8003970:	333f      	adds	r3, #63	; 0x3f
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d12f      	bne.n	80039d8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3350      	adds	r3, #80	; 0x50
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	f083 0301 	eor.w	r3, r3, #1
 80039a2:	b2d8      	uxtb	r0, r3
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	3350      	adds	r3, #80	; 0x50
 80039b4:	4602      	mov	r2, r0
 80039b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	b2d8      	uxtb	r0, r3
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	335c      	adds	r3, #92	; 0x5c
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4601      	mov	r1, r0
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f007 fd28 	bl	800b428 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	3350      	adds	r3, #80	; 0x50
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2d8      	uxtb	r0, r3
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	3350      	adds	r3, #80	; 0x50
 8003a00:	4602      	mov	r2, r0
 8003a02:	701a      	strb	r2, [r3, #0]
}
 8003a04:	e1f7      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	f040 811a 	bne.w	8003c52 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a38:	f023 0302 	bic.w	r3, r3, #2
 8003a3c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	335d      	adds	r3, #93	; 0x5d
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10a      	bne.n	8003a6a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	335c      	adds	r3, #92	; 0x5c
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
 8003a68:	e0d9      	b.n	8003c1e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	440b      	add	r3, r1
 8003a78:	335d      	adds	r3, #93	; 0x5d
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d10a      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	335c      	adds	r3, #92	; 0x5c
 8003a90:	2205      	movs	r2, #5
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e0c3      	b.n	8003c1e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	440b      	add	r3, r1
 8003aa4:	335d      	adds	r3, #93	; 0x5d
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d00a      	beq.n	8003ac2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	440b      	add	r3, r1
 8003aba:	335d      	adds	r3, #93	; 0x5d
 8003abc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d156      	bne.n	8003b70 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	3358      	adds	r3, #88	; 0x58
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	1c59      	adds	r1, r3, #1
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4403      	add	r3, r0
 8003ae4:	3358      	adds	r3, #88	; 0x58
 8003ae6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	440b      	add	r3, r1
 8003af6:	3358      	adds	r3, #88	; 0x58
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d914      	bls.n	8003b28 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4613      	mov	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3358      	adds	r3, #88	; 0x58
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4613      	mov	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	440b      	add	r3, r1
 8003b20:	335c      	adds	r3, #92	; 0x5c
 8003b22:	2204      	movs	r2, #4
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e009      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	440b      	add	r3, r1
 8003b36:	335c      	adds	r3, #92	; 0x5c
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e056      	b.n	8003c1e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	335d      	adds	r3, #93	; 0x5d
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d123      	bne.n	8003bce <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	335c      	adds	r3, #92	; 0x5c
 8003b96:	2202      	movs	r2, #2
 8003b98:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bb8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	e027      	b.n	8003c1e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	335d      	adds	r3, #93	; 0x5d
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d11c      	bne.n	8003c1e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3358      	adds	r3, #88	; 0x58
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4403      	add	r3, r0
 8003c06:	3358      	adds	r3, #88	; 0x58
 8003c08:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	440b      	add	r3, r1
 8003c18:	335c      	adds	r3, #92	; 0x5c
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	b2d8      	uxtb	r0, r3
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4601      	mov	r1, r0
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f007 fbec 	bl	800b428 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c50:	e0d1      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d13e      	bne.n	8003ce6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	440b      	add	r3, r1
 8003c96:	3358      	adds	r3, #88	; 0x58
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1c59      	adds	r1, r3, #1
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4403      	add	r3, r0
 8003caa:	3358      	adds	r3, #88	; 0x58
 8003cac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	335d      	adds	r3, #93	; 0x5d
 8003cbe:	2206      	movs	r2, #6
 8003cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f005 fa08 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	6093      	str	r3, [r2, #8]
}
 8003ce4:	e087      	b.n	8003df6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d17c      	bne.n	8003df6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	440b      	add	r3, r1
 8003d0a:	333f      	adds	r3, #63	; 0x3f
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d122      	bne.n	8003d58 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	3358      	adds	r3, #88	; 0x58
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f005 f9c6 	bl	80090e2 <USB_HC_Halt>
 8003d56:	e045      	b.n	8003de4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	440b      	add	r3, r1
 8003d66:	333f      	adds	r3, #63	; 0x3f
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	333f      	adds	r3, #63	; 0x3f
 8003d7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d12f      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	440b      	add	r3, r1
 8003d92:	3358      	adds	r3, #88	; 0x58
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d121      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	440b      	add	r3, r1
 8003dae:	335d      	adds	r3, #93	; 0x5d
 8003db0:	2203      	movs	r2, #3
 8003db2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	0151      	lsls	r1, r2, #5
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	440a      	add	r2, r1
 8003dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dce:	f043 0302 	orr.w	r3, r3, #2
 8003dd2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f005 f97f 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	461a      	mov	r2, r3
 8003df2:	2310      	movs	r3, #16
 8003df4:	6093      	str	r3, [r2, #8]
}
 8003df6:	bf00      	nop
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d119      	bne.n	8003e62 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e5a:	f043 0302 	orr.w	r3, r3, #2
 8003e5e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003e60:	e33e      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d141      	bne.n	8003efc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2320      	movs	r3, #32
 8003e88:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	333d      	adds	r3, #61	; 0x3d
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 831f 	bne.w	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	333d      	adds	r3, #61	; 0x3d
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	440b      	add	r3, r1
 8003ec4:	335c      	adds	r3, #92	; 0x5c
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f005 f8f4 	bl	80090e2 <USB_HC_Halt>
}
 8003efa:	e2f1      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d13f      	bne.n	8003f92 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	440b      	add	r3, r1
 8003f20:	335d      	adds	r3, #93	; 0x5d
 8003f22:	2204      	movs	r2, #4
 8003f24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	333d      	adds	r3, #61	; 0x3d
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	3358      	adds	r3, #88	; 0x58
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	0151      	lsls	r1, r2, #5
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	440a      	add	r2, r1
 8003f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f005 f8b2 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	6093      	str	r3, [r2, #8]
}
 8003f90:	e2a6      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d122      	bne.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	0151      	lsls	r1, r2, #5
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	440a      	add	r2, r1
 8003fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f005 f884 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fec:	6093      	str	r3, [r2, #8]
}
 8003fee:	e277      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d135      	bne.n	8004072 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	3358      	adds	r3, #88	; 0x58
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	440a      	add	r2, r1
 8004030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f005 f84c 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	2301      	movs	r3, #1
 800405a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	335d      	adds	r3, #93	; 0x5d
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
}
 8004070:	e236      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b08      	cmp	r3, #8
 8004086:	d12b      	bne.n	80040e0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	461a      	mov	r2, r3
 8004096:	2308      	movs	r3, #8
 8004098:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	0151      	lsls	r1, r2, #5
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	440a      	add	r2, r1
 80040b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f005 f80c 	bl	80090e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	440b      	add	r3, r1
 80040d8:	335d      	adds	r3, #93	; 0x5d
 80040da:	2205      	movs	r2, #5
 80040dc:	701a      	strb	r2, [r3, #0]
}
 80040de:	e1ff      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d155      	bne.n	80041a2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	440b      	add	r3, r1
 8004104:	3358      	adds	r3, #88	; 0x58
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	440b      	add	r3, r1
 8004118:	335d      	adds	r3, #93	; 0x5d
 800411a:	2203      	movs	r2, #3
 800411c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	440b      	add	r3, r1
 800412c:	333d      	adds	r3, #61	; 0x3d
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d114      	bne.n	800415e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	333c      	adds	r3, #60	; 0x3c
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	333d      	adds	r3, #61	; 0x3d
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4413      	add	r3, r2
 8004166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	440a      	add	r2, r1
 8004174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004178:	f043 0302 	orr.w	r3, r3, #2
 800417c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f004 ffaa 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419a:	461a      	mov	r2, r3
 800419c:	2310      	movs	r3, #16
 800419e:	6093      	str	r3, [r2, #8]
}
 80041a0:	e19e      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d12b      	bne.n	8004210 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 ff7d 	bl	80090e2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	440b      	add	r3, r1
 80041f6:	335d      	adds	r3, #93	; 0x5d
 80041f8:	2206      	movs	r2, #6
 80041fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	461a      	mov	r2, r3
 800420a:	2380      	movs	r3, #128	; 0x80
 800420c:	6093      	str	r3, [r2, #8]
}
 800420e:	e167      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d135      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	440a      	add	r2, r1
 800423e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f004 ff45 	bl	80090e2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004264:	461a      	mov	r2, r3
 8004266:	2310      	movs	r3, #16
 8004268:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	461a      	mov	r2, r3
 8004278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	440b      	add	r3, r1
 800428c:	335d      	adds	r3, #93	; 0x5d
 800428e:	2208      	movs	r2, #8
 8004290:	701a      	strb	r2, [r3, #0]
}
 8004292:	e125      	b.n	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	f040 811a 	bne.w	80044e0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c6:	f023 0302 	bic.w	r3, r3, #2
 80042ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	335d      	adds	r3, #93	; 0x5d
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d137      	bne.n	8004352 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	335c      	adds	r3, #92	; 0x5c
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	333f      	adds	r3, #63	; 0x3f
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d00b      	beq.n	8004324 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	440b      	add	r3, r1
 800431a:	333f      	adds	r3, #63	; 0x3f
 800431c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800431e:	2b03      	cmp	r3, #3
 8004320:	f040 80c5 	bne.w	80044ae <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	440b      	add	r3, r1
 8004332:	3351      	adds	r3, #81	; 0x51
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	f083 0301 	eor.w	r3, r3, #1
 800433a:	b2d8      	uxtb	r0, r3
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	440b      	add	r3, r1
 800434a:	3351      	adds	r3, #81	; 0x51
 800434c:	4602      	mov	r2, r0
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e0ad      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	335d      	adds	r3, #93	; 0x5d
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d10a      	bne.n	800437e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	335c      	adds	r3, #92	; 0x5c
 8004378:	2202      	movs	r2, #2
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e097      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	335d      	adds	r3, #93	; 0x5d
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d10a      	bne.n	80043aa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	335c      	adds	r3, #92	; 0x5c
 80043a4:	2202      	movs	r2, #2
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e081      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	440b      	add	r3, r1
 80043b8:	335d      	adds	r3, #93	; 0x5d
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b05      	cmp	r3, #5
 80043be:	d10a      	bne.n	80043d6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	440b      	add	r3, r1
 80043ce:	335c      	adds	r3, #92	; 0x5c
 80043d0:	2205      	movs	r2, #5
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e06b      	b.n	80044ae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	335d      	adds	r3, #93	; 0x5d
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d00a      	beq.n	8004402 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	335d      	adds	r3, #93	; 0x5d
 80043fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d155      	bne.n	80044ae <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	440b      	add	r3, r1
 8004410:	3358      	adds	r3, #88	; 0x58
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	1c59      	adds	r1, r3, #1
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4403      	add	r3, r0
 8004424:	3358      	adds	r3, #88	; 0x58
 8004426:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	3358      	adds	r3, #88	; 0x58
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d914      	bls.n	8004468 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	440b      	add	r3, r1
 800444c:	3358      	adds	r3, #88	; 0x58
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	440b      	add	r3, r1
 8004460:	335c      	adds	r3, #92	; 0x5c
 8004462:	2204      	movs	r2, #4
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e009      	b.n	800447c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	440b      	add	r3, r1
 8004476:	335c      	adds	r3, #92	; 0x5c
 8004478:	2202      	movs	r2, #2
 800447a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004492:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800449a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	461a      	mov	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	461a      	mov	r2, r3
 80044bc:	2302      	movs	r3, #2
 80044be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	b2d8      	uxtb	r0, r3
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	440b      	add	r3, r1
 80044d2:	335c      	adds	r3, #92	; 0x5c
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	4601      	mov	r1, r0
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f006 ffa4 	bl	800b428 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	0c5b      	lsrs	r3, r3, #17
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800451c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d003      	beq.n	800452c <HCD_RXQLVL_IRQHandler+0x44>
 8004524:	2b05      	cmp	r3, #5
 8004526:	f000 8082 	beq.w	800462e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800452a:	e083      	b.n	8004634 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d07f      	beq.n	8004632 <HCD_RXQLVL_IRQHandler+0x14a>
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	440b      	add	r3, r1
 8004540:	3344      	adds	r3, #68	; 0x44
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d074      	beq.n	8004632 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	440b      	add	r3, r1
 800455a:	3344      	adds	r3, #68	; 0x44
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	b292      	uxth	r2, r2
 8004562:	4619      	mov	r1, r3
 8004564:	f004 f961 	bl	800882a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	440b      	add	r3, r1
 8004576:	3344      	adds	r3, #68	; 0x44
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	18d1      	adds	r1, r2, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4403      	add	r3, r0
 800458c:	3344      	adds	r3, #68	; 0x44
 800458e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	440b      	add	r3, r1
 800459e:	334c      	adds	r3, #76	; 0x4c
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	18d1      	adds	r1, r2, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4403      	add	r3, r0
 80045b4:	334c      	adds	r3, #76	; 0x4c
 80045b6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HCD_RXQLVL_IRQHandler+0x154>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d031      	beq.n	8004632 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045fa:	461a      	mov	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	440b      	add	r3, r1
 800460e:	3350      	adds	r3, #80	; 0x50
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	f083 0301 	eor.w	r3, r3, #1
 8004616:	b2d8      	uxtb	r0, r3
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	3350      	adds	r3, #80	; 0x50
 8004628:	4602      	mov	r2, r0
 800462a:	701a      	strb	r2, [r3, #0]
      break;
 800462c:	e001      	b.n	8004632 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004632:	bf00      	nop
  }
}
 8004634:	bf00      	nop
 8004636:	3728      	adds	r7, #40	; 0x28
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	1ff80000 	.word	0x1ff80000

08004640 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800466c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b02      	cmp	r3, #2
 8004676:	d10b      	bne.n	8004690 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d102      	bne.n	8004688 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f006 feb4 	bl	800b3f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b08      	cmp	r3, #8
 8004698:	d132      	bne.n	8004700 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d126      	bne.n	80046fa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d113      	bne.n	80046dc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046be:	d106      	bne.n	80046ce <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f004 f9e4 	bl	8008a94 <USB_InitFSLSPClkSel>
 80046cc:	e011      	b.n	80046f2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 f9dd 	bl	8008a94 <USB_InitFSLSPClkSel>
 80046da:	e00a      	b.n	80046f2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ea:	461a      	mov	r2, r3
 80046ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046f0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f006 fea6 	bl	800b444 <HAL_HCD_PortEnabled_Callback>
 80046f8:	e002      	b.n	8004700 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f006 feb0 	bl	800b460 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b20      	cmp	r3, #32
 8004708:	d103      	bne.n	8004712 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f043 0320 	orr.w	r3, r3, #32
 8004710:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6013      	str	r3, [r2, #0]
}
 800471e:	bf00      	nop
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e154      	b.n	80049e4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a98      	ldr	r2, [pc, #608]	; (80049b4 <HAL_I2S_Init+0x28c>)
 8004752:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fc fed1 	bl	80014fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004770:	f023 030f 	bic.w	r3, r3, #15
 8004774:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2202      	movs	r2, #2
 800477c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d06f      	beq.n	8004866 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800478e:	2310      	movs	r3, #16
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e001      	b.n	8004798 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b20      	cmp	r3, #32
 800479e:	d802      	bhi.n	80047a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a83      	ldr	r2, [pc, #524]	; (80049b8 <HAL_I2S_Init+0x290>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_I2S_Init+0x92>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a81      	ldr	r2, [pc, #516]	; (80049bc <HAL_I2S_Init+0x294>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d104      	bne.n	80047c4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80047ba:	2001      	movs	r0, #1
 80047bc:	f001 f990 	bl	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq>
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	e003      	b.n	80047cc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80047c4:	2002      	movs	r0, #2
 80047c6:	f001 f98b 	bl	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq>
 80047ca:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d4:	d125      	bne.n	8004822 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	3305      	adds	r3, #5
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e01f      	b.n	8004840 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	fbb2 f2f3 	udiv	r2, r2, r3
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	461a      	mov	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	3305      	adds	r3, #5
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e00e      	b.n	8004840 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	fbb2 f2f3 	udiv	r2, r2, r3
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	461a      	mov	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	3305      	adds	r3, #5
 800483e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4a5f      	ldr	r2, [pc, #380]	; (80049c0 <HAL_I2S_Init+0x298>)
 8004844:	fba2 2303 	umull	r2, r3, r2, r3
 8004848:	08db      	lsrs	r3, r3, #3
 800484a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	e003      	b.n	800486e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004866:	2302      	movs	r3, #2
 8004868:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d902      	bls.n	800487a <HAL_I2S_Init+0x152>
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2bff      	cmp	r3, #255	; 0xff
 8004878:	d907      	bls.n	800488a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f043 0210 	orr.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0ac      	b.n	80049e4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	ea42 0103 	orr.w	r1, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	430a      	orrs	r2, r1
 800489c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048a8:	f023 030f 	bic.w	r3, r3, #15
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6851      	ldr	r1, [r2, #4]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6992      	ldr	r2, [r2, #24]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048cc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b30      	cmp	r3, #48	; 0x30
 80048d4:	d003      	beq.n	80048de <HAL_I2S_Init+0x1b6>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2bb0      	cmp	r3, #176	; 0xb0
 80048dc:	d107      	bne.n	80048ee <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69da      	ldr	r2, [r3, #28]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048ec:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d16e      	bne.n	80049d4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a32      	ldr	r2, [pc, #200]	; (80049c4 <HAL_I2S_Init+0x29c>)
 80048fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <HAL_I2S_Init+0x290>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_I2S_Init+0x1e2>
 8004906:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <HAL_I2S_Init+0x2a0>)
 8004908:	e001      	b.n	800490e <HAL_I2S_Init+0x1e6>
 800490a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	4928      	ldr	r1, [pc, #160]	; (80049b8 <HAL_I2S_Init+0x290>)
 8004916:	428a      	cmp	r2, r1
 8004918:	d101      	bne.n	800491e <HAL_I2S_Init+0x1f6>
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <HAL_I2S_Init+0x2a0>)
 800491c:	e001      	b.n	8004922 <HAL_I2S_Init+0x1fa>
 800491e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004922:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004926:	f023 030f 	bic.w	r3, r3, #15
 800492a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_I2S_Init+0x290>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_I2S_Init+0x212>
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_I2S_Init+0x2a0>)
 8004938:	e001      	b.n	800493e <HAL_I2S_Init+0x216>
 800493a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800493e:	2202      	movs	r2, #2
 8004940:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_I2S_Init+0x290>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_I2S_Init+0x228>
 800494c:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_I2S_Init+0x2a0>)
 800494e:	e001      	b.n	8004954 <HAL_I2S_Init+0x22c>
 8004950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004960:	d003      	beq.n	800496a <HAL_I2S_Init+0x242>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800496a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e001      	b.n	8004976 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	b299      	uxth	r1, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800498c:	4303      	orrs	r3, r0
 800498e:	b29b      	uxth	r3, r3
 8004990:	430b      	orrs	r3, r1
 8004992:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004994:	4313      	orrs	r3, r2
 8004996:	b29a      	uxth	r2, r3
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	4313      	orrs	r3, r2
 800499c:	b29b      	uxth	r3, r3
 800499e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049a2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a03      	ldr	r2, [pc, #12]	; (80049b8 <HAL_I2S_Init+0x290>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10e      	bne.n	80049cc <HAL_I2S_Init+0x2a4>
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_I2S_Init+0x2a0>)
 80049b0:	e00e      	b.n	80049d0 <HAL_I2S_Init+0x2a8>
 80049b2:	bf00      	nop
 80049b4:	08004ae3 	.word	0x08004ae3
 80049b8:	40003800 	.word	0x40003800
 80049bc:	40003c00 	.word	0x40003c00
 80049c0:	cccccccd 	.word	0xcccccccd
 80049c4:	08004bf9 	.word	0x08004bf9
 80049c8:	40003400 	.word	0x40003400
 80049cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049d0:	897a      	ldrh	r2, [r7, #10]
 80049d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	881a      	ldrh	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10e      	bne.n	8004a7c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ffb8 	bl	80049ec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	b292      	uxth	r2, r2
 8004a98:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10e      	bne.n	8004ada <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aca:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff93 	bl	8004a00 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d13a      	bne.n	8004b74 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d109      	bne.n	8004b1c <I2S_IRQHandler+0x3a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d102      	bne.n	8004b1c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ffb4 	bl	8004a84 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d126      	bne.n	8004b74 <I2S_IRQHandler+0x92>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d11f      	bne.n	8004b74 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	613b      	str	r3, [r7, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	f043 0202 	orr.w	r2, r3, #2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ff50 	bl	8004a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d136      	bne.n	8004bee <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d109      	bne.n	8004b9e <I2S_IRQHandler+0xbc>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b80      	cmp	r3, #128	; 0x80
 8004b96:	d102      	bne.n	8004b9e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff ff45 	bl	8004a28 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d122      	bne.n	8004bee <I2S_IRQHandler+0x10c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d11b      	bne.n	8004bee <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bc4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff ff13 	bl	8004a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bee:	bf00      	nop
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4aa2      	ldr	r2, [pc, #648]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c12:	4ba2      	ldr	r3, [pc, #648]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c14:	e001      	b.n	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a9b      	ldr	r2, [pc, #620]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c30:	4b9a      	ldr	r3, [pc, #616]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c32:	e001      	b.n	8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d004      	beq.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 8099 	bne.w	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d107      	bne.n	8004c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f925 	bl	8004eb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d107      	bne.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f9c8 	bl	8005014 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d13a      	bne.n	8004d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d035      	beq.n	8004d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a7e      	ldr	r2, [pc, #504]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ca2:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ca4:	e001      	b.n	8004caa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4979      	ldr	r1, [pc, #484]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cb2:	428b      	cmp	r3, r1
 8004cb4:	d101      	bne.n	8004cba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cb6:	4b79      	ldr	r3, [pc, #484]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cb8:	e001      	b.n	8004cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cbe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cc2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	f043 0202 	orr.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff fe88 	bl	8004a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	f040 80be 	bne.w	8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80b8 	beq.w	8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a59      	ldr	r2, [pc, #356]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d38:	e001      	b.n	8004d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4954      	ldr	r1, [pc, #336]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d46:	428b      	cmp	r3, r1
 8004d48:	d101      	bne.n	8004d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d4a:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d4c:	e001      	b.n	8004d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff fe4a 	bl	8004a14 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d80:	e084      	b.n	8004e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d107      	bne.n	8004d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8be 	bl	8004f18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d107      	bne.n	8004db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8fd 	bl	8004fb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d12f      	bne.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d02a      	beq.n	8004e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2e      	ldr	r2, [pc, #184]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004de6:	e001      	b.n	8004dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4929      	ldr	r1, [pc, #164]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004df4:	428b      	cmp	r3, r1
 8004df6:	d101      	bne.n	8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dfa:	e001      	b.n	8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e04:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f043 0202 	orr.w	r2, r3, #2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fdfa 	bl	8004a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b08      	cmp	r3, #8
 8004e28:	d131      	bne.n	8004e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02c      	beq.n	8004e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e3e:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e40:	e001      	b.n	8004e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4912      	ldr	r1, [pc, #72]	; (8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d101      	bne.n	8004e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e54:	e001      	b.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e5e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e6e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7c:	f043 0204 	orr.w	r2, r3, #4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff fdc5 	bl	8004a14 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e8a:	e000      	b.n	8004e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e8c:	bf00      	nop
}
 8004e8e:	bf00      	nop
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40003800 	.word	0x40003800
 8004e9c:	40003400 	.word	0x40003400

08004ea0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	1c99      	adds	r1, r3, #2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d113      	bne.n	8004f0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ffc9 	bl	8004ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c99      	adds	r1, r3, #2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6251      	str	r1, [r2, #36]	; 0x24
 8004f2a:	8819      	ldrh	r1, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d101      	bne.n	8004f3a <I2SEx_TxISR_I2SExt+0x22>
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <I2SEx_TxISR_I2SExt+0x94>)
 8004f38:	e001      	b.n	8004f3e <I2SEx_TxISR_I2SExt+0x26>
 8004f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f3e:	460a      	mov	r2, r1
 8004f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d121      	bne.n	8004f9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d101      	bne.n	8004f68 <I2SEx_TxISR_I2SExt+0x50>
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <I2SEx_TxISR_I2SExt+0x94>)
 8004f66:	e001      	b.n	8004f6c <I2SEx_TxISR_I2SExt+0x54>
 8004f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	490d      	ldr	r1, [pc, #52]	; (8004fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8004f74:	428b      	cmp	r3, r1
 8004f76:	d101      	bne.n	8004f7c <I2SEx_TxISR_I2SExt+0x64>
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <I2SEx_TxISR_I2SExt+0x94>)
 8004f7a:	e001      	b.n	8004f80 <I2SEx_TxISR_I2SExt+0x68>
 8004f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff ff81 	bl	8004ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40003800 	.word	0x40003800
 8004fac:	40003400 	.word	0x40003400

08004fb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68d8      	ldr	r0, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc2:	1c99      	adds	r1, r3, #2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fc8:	b282      	uxth	r2, r0
 8004fca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ff2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ff4a 	bl	8004ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a20      	ldr	r2, [pc, #128]	; (80050a4 <I2SEx_RxISR_I2SExt+0x90>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <I2SEx_RxISR_I2SExt+0x16>
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005028:	e001      	b.n	800502e <I2SEx_RxISR_I2SExt+0x1a>
 800502a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502e:	68d8      	ldr	r0, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	1c99      	adds	r1, r3, #2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	62d1      	str	r1, [r2, #44]	; 0x2c
 800503a:	b282      	uxth	r2, r0
 800503c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d121      	bne.n	800509a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <I2SEx_RxISR_I2SExt+0x90>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <I2SEx_RxISR_I2SExt+0x50>
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005062:	e001      	b.n	8005068 <I2SEx_RxISR_I2SExt+0x54>
 8005064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	490d      	ldr	r1, [pc, #52]	; (80050a4 <I2SEx_RxISR_I2SExt+0x90>)
 8005070:	428b      	cmp	r3, r1
 8005072:	d101      	bne.n	8005078 <I2SEx_RxISR_I2SExt+0x64>
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <I2SEx_RxISR_I2SExt+0x94>)
 8005076:	e001      	b.n	800507c <I2SEx_RxISR_I2SExt+0x68>
 8005078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005080:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ff03 	bl	8004ea0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40003800 	.word	0x40003800
 80050a8:	40003400 	.word	0x40003400

080050ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80050b4:	f7fc fe2c 	bl	8001d10 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e069      	b.n	8005198 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7fc fac9 	bl	8001670 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80050de:	f241 3188 	movw	r1, #5000	; 0x1388
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f85e 	bl	80051a4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	2120      	movs	r1, #32
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f856 	bl	80051c0 <QSPI_WaitFlagStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d137      	bne.n	800518e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6852      	ldr	r2, [r2, #4]
 8005130:	0611      	lsls	r1, r2, #24
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68d2      	ldr	r2, [r2, #12]
 8005136:	4311      	orrs	r1, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	69d2      	ldr	r2, [r2, #28]
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6a12      	ldr	r2, [r2, #32]
 8005142:	4311      	orrs	r1, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	430b      	orrs	r3, r1
 800514a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <HAL_QSPI_Init+0xf4>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6912      	ldr	r2, [r2, #16]
 800515a:	0411      	lsls	r1, r2, #16
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6952      	ldr	r2, [r2, #20]
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6992      	ldr	r2, [r2, #24]
 8005166:	4311      	orrs	r1, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	430b      	orrs	r3, r1
 800516e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005196:	7afb      	ldrb	r3, [r7, #11]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	ffe0f8fe 	.word	0xffe0f8fe

080051a4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051d0:	e01a      	b.n	8005208 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d016      	beq.n	8005208 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fc fd99 	bl	8001d10 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2204      	movs	r2, #4
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f043 0201 	orr.w	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e00e      	b.n	8005226 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	429a      	cmp	r2, r3
 8005222:	d1d6      	bne.n	80051d2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0cc      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005244:	4b68      	ldr	r3, [pc, #416]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d90c      	bls.n	800526c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005252:	4b65      	ldr	r3, [pc, #404]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800525a:	4b63      	ldr	r3, [pc, #396]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d001      	beq.n	800526c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0b8      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a58      	ldr	r2, [pc, #352]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800528e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	494d      	ldr	r1, [pc, #308]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d044      	beq.n	8005350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d119      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d003      	beq.n	80052ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ee:	4b3f      	ldr	r3, [pc, #252]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e06f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052fe:	4b3b      	ldr	r3, [pc, #236]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e067      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800530e:	4b37      	ldr	r3, [pc, #220]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 0203 	bic.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4934      	ldr	r1, [pc, #208]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005320:	f7fc fcf6 	bl	8001d10 <HAL_GetTick>
 8005324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005326:	e00a      	b.n	800533e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005328:	f7fc fcf2 	bl	8001d10 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e04f      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 020c 	and.w	r2, r3, #12
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	429a      	cmp	r2, r3
 800534e:	d1eb      	bne.n	8005328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005350:	4b25      	ldr	r3, [pc, #148]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d20c      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e032      	b.n	80053de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4916      	ldr	r1, [pc, #88]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	490e      	ldr	r1, [pc, #56]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053b6:	f000 f821 	bl	80053fc <HAL_RCC_GetSysClockFreq>
 80053ba:	4601      	mov	r1, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <HAL_RCC_ClockConfig+0x1c0>)
 80053c8:	5cd3      	ldrb	r3, [r2, r3]
 80053ca:	fa21 f303 	lsr.w	r3, r1, r3
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <HAL_RCC_ClockConfig+0x1c4>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_ClockConfig+0x1c8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fc fc56 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40023c00 	.word	0x40023c00
 80053ec:	40023800 	.word	0x40023800
 80053f0:	0800baa8 	.word	0x0800baa8
 80053f4:	20000004 	.word	0x20000004
 80053f8:	20000008 	.word	0x20000008

080053fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	2300      	movs	r3, #0
 800540c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005412:	4b50      	ldr	r3, [pc, #320]	; (8005554 <HAL_RCC_GetSysClockFreq+0x158>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b04      	cmp	r3, #4
 800541c:	d007      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x32>
 800541e:	2b08      	cmp	r3, #8
 8005420:	d008      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x38>
 8005422:	2b00      	cmp	r3, #0
 8005424:	f040 808d 	bne.w	8005542 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b4b      	ldr	r3, [pc, #300]	; (8005558 <HAL_RCC_GetSysClockFreq+0x15c>)
 800542a:	60bb      	str	r3, [r7, #8]
       break;
 800542c:	e08c      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800542e:	4b4b      	ldr	r3, [pc, #300]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005430:	60bb      	str	r3, [r7, #8]
      break;
 8005432:	e089      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005434:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_GetSysClockFreq+0x158>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800543c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543e:	4b45      	ldr	r3, [pc, #276]	; (8005554 <HAL_RCC_GetSysClockFreq+0x158>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d023      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800544a:	4b42      	ldr	r3, [pc, #264]	; (8005554 <HAL_RCC_GetSysClockFreq+0x158>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	099b      	lsrs	r3, r3, #6
 8005450:	f04f 0400 	mov.w	r4, #0
 8005454:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	ea03 0501 	and.w	r5, r3, r1
 8005460:	ea04 0602 	and.w	r6, r4, r2
 8005464:	4a3d      	ldr	r2, [pc, #244]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005466:	fb02 f106 	mul.w	r1, r2, r6
 800546a:	2200      	movs	r2, #0
 800546c:	fb02 f205 	mul.w	r2, r2, r5
 8005470:	440a      	add	r2, r1
 8005472:	493a      	ldr	r1, [pc, #232]	; (800555c <HAL_RCC_GetSysClockFreq+0x160>)
 8005474:	fba5 0101 	umull	r0, r1, r5, r1
 8005478:	1853      	adds	r3, r2, r1
 800547a:	4619      	mov	r1, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	461a      	mov	r2, r3
 8005484:	4623      	mov	r3, r4
 8005486:	f7fa fecf 	bl	8000228 <__aeabi_uldivmod>
 800548a:	4603      	mov	r3, r0
 800548c:	460c      	mov	r4, r1
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	e049      	b.n	8005526 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005492:	4b30      	ldr	r3, [pc, #192]	; (8005554 <HAL_RCC_GetSysClockFreq+0x158>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	f04f 0400 	mov.w	r4, #0
 800549c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	ea03 0501 	and.w	r5, r3, r1
 80054a8:	ea04 0602 	and.w	r6, r4, r2
 80054ac:	4629      	mov	r1, r5
 80054ae:	4632      	mov	r2, r6
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	0154      	lsls	r4, r2, #5
 80054ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054be:	014b      	lsls	r3, r1, #5
 80054c0:	4619      	mov	r1, r3
 80054c2:	4622      	mov	r2, r4
 80054c4:	1b49      	subs	r1, r1, r5
 80054c6:	eb62 0206 	sbc.w	r2, r2, r6
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	f04f 0400 	mov.w	r4, #0
 80054d2:	0194      	lsls	r4, r2, #6
 80054d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054d8:	018b      	lsls	r3, r1, #6
 80054da:	1a5b      	subs	r3, r3, r1
 80054dc:	eb64 0402 	sbc.w	r4, r4, r2
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	00e2      	lsls	r2, r4, #3
 80054ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054ee:	00d9      	lsls	r1, r3, #3
 80054f0:	460b      	mov	r3, r1
 80054f2:	4614      	mov	r4, r2
 80054f4:	195b      	adds	r3, r3, r5
 80054f6:	eb44 0406 	adc.w	r4, r4, r6
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	02a2      	lsls	r2, r4, #10
 8005504:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005508:	0299      	lsls	r1, r3, #10
 800550a:	460b      	mov	r3, r1
 800550c:	4614      	mov	r4, r2
 800550e:	4618      	mov	r0, r3
 8005510:	4621      	mov	r1, r4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f04f 0400 	mov.w	r4, #0
 8005518:	461a      	mov	r2, r3
 800551a:	4623      	mov	r3, r4
 800551c:	f7fa fe84 	bl	8000228 <__aeabi_uldivmod>
 8005520:	4603      	mov	r3, r0
 8005522:	460c      	mov	r4, r1
 8005524:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_GetSysClockFreq+0x158>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	f003 0303 	and.w	r3, r3, #3
 8005530:	3301      	adds	r3, #1
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	60bb      	str	r3, [r7, #8]
      break;
 8005540:	e002      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005544:	60bb      	str	r3, [r7, #8]
      break;
 8005546:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005548:	68bb      	ldr	r3, [r7, #8]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800
 8005558:	00f42400 	.word	0x00f42400
 800555c:	017d7840 	.word	0x017d7840

08005560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <HAL_RCC_GetHCLKFreq+0x14>)
 8005566:	681b      	ldr	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000004 	.word	0x20000004

08005578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800557c:	f7ff fff0 	bl	8005560 <HAL_RCC_GetHCLKFreq>
 8005580:	4601      	mov	r1, r0
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	0a9b      	lsrs	r3, r3, #10
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	4a03      	ldr	r2, [pc, #12]	; (800559c <HAL_RCC_GetPCLK1Freq+0x24>)
 800558e:	5cd3      	ldrb	r3, [r2, r3]
 8005590:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005594:	4618      	mov	r0, r3
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40023800 	.word	0x40023800
 800559c:	0800bab8 	.word	0x0800bab8

080055a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055a4:	f7ff ffdc 	bl	8005560 <HAL_RCC_GetHCLKFreq>
 80055a8:	4601      	mov	r1, r0
 80055aa:	4b05      	ldr	r3, [pc, #20]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	0b5b      	lsrs	r3, r3, #13
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	4a03      	ldr	r2, [pc, #12]	; (80055c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b6:	5cd3      	ldrb	r3, [r2, r3]
 80055b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055bc:	4618      	mov	r0, r3
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40023800 	.word	0x40023800
 80055c4:	0800bab8 	.word	0x0800bab8

080055c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80055ec:	4b7a      	ldr	r3, [pc, #488]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4977      	ldr	r1, [pc, #476]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d010      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800561a:	4b6f      	ldr	r3, [pc, #444]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800561c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005620:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	496b      	ldr	r1, [pc, #428]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005638:	2301      	movs	r3, #1
 800563a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d022      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005648:	4b63      	ldr	r3, [pc, #396]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800564a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800564e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005656:	4960      	ldr	r1, [pc, #384]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005666:	2301      	movs	r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800566e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005672:	d10c      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005674:	4b58      	ldr	r3, [pc, #352]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	3b01      	subs	r3, #1
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	4954      	ldr	r1, [pc, #336]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d022      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800569a:	4b4f      	ldr	r3, [pc, #316]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800569c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a8:	494b      	ldr	r1, [pc, #300]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80056b8:	2301      	movs	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80056c6:	4b44      	ldr	r3, [pc, #272]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	493f      	ldr	r1, [pc, #252]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 808a 	beq.w	8005802 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	4a38      	ldr	r2, [pc, #224]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fc:	6413      	str	r3, [r2, #64]	; 0x40
 80056fe:	4b36      	ldr	r3, [pc, #216]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800570a:	4b34      	ldr	r3, [pc, #208]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a33      	ldr	r2, [pc, #204]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005716:	f7fc fafb 	bl	8001d10 <HAL_GetTick>
 800571a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800571e:	f7fc faf7 	bl	8001d10 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e1d1      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005730:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f0      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800573c:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005744:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	429a      	cmp	r2, r3
 8005758:	d028      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800575a:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005762:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005764:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800576a:	4b1d      	ldr	r3, [pc, #116]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005770:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005776:	4b18      	ldr	r3, [pc, #96]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b01      	cmp	r3, #1
 8005780:	d114      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005782:	f7fc fac5 	bl	8001d10 <HAL_GetTick>
 8005786:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005788:	e00a      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fc fac1 	bl	8001d10 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e199      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ee      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b8:	d114      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ce:	4902      	ldr	r1, [pc, #8]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
 80057d4:	e00c      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80057d6:	bf00      	nop
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40007000 	.word	0x40007000
 80057e0:	42470e40 	.word	0x42470e40
 80057e4:	4b89      	ldr	r3, [pc, #548]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a88      	ldr	r2, [pc, #544]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057ee:	6093      	str	r3, [r2, #8]
 80057f0:	4b86      	ldr	r3, [pc, #536]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fc:	4983      	ldr	r1, [pc, #524]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005814:	4b7e      	ldr	r3, [pc, #504]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005816:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005824:	4b79      	ldr	r3, [pc, #484]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800582a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	4976      	ldr	r1, [pc, #472]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	d011      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005846:	4b71      	ldr	r3, [pc, #452]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	496d      	ldr	r1, [pc, #436]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005864:	d101      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005866:	2301      	movs	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005876:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	4961      	ldr	r1, [pc, #388]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d004      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b80      	cmp	r3, #128	; 0x80
 8005898:	f040 80c6 	bne.w	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800589c:	4b5d      	ldr	r3, [pc, #372]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058a2:	f7fc fa35 	bl	8001d10 <HAL_GetTick>
 80058a6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058aa:	f7fc fa31 	bl	8001d10 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e10b      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058bc:	4b53      	ldr	r3, [pc, #332]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80058c8:	4a53      	ldr	r2, [pc, #332]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d023      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d019      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800590c:	d00e      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005916:	2b00      	cmp	r3, #0
 8005918:	d019      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d115      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800592a:	d110      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	061b      	lsls	r3, r3, #24
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	071b      	lsls	r3, r3, #28
 8005946:	4931      	ldr	r1, [pc, #196]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800596a:	2b00      	cmp	r3, #0
 800596c:	d026      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d122      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005976:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597c:	0e1b      	lsrs	r3, r3, #24
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	431a      	orrs	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	061b      	lsls	r3, r3, #24
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	071b      	lsls	r3, r3, #28
 800599c:	491b      	ldr	r1, [pc, #108]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80059a4:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059aa:	f023 021f 	bic.w	r2, r3, #31
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	4915      	ldr	r1, [pc, #84]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	071b      	lsls	r3, r3, #28
 80059e2:	490a      	ldr	r1, [pc, #40]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059f0:	f7fc f98e 	bl	8001d10 <HAL_GetTick>
 80059f4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059f6:	e011      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059f8:	f7fc f98a 	bl	8001d10 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d90a      	bls.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e064      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	424711e0 	.word	0x424711e0
 8005a14:	42470068 	.word	0x42470068
 8005a18:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a1c:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0e7      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	4926      	ldr	r1, [pc, #152]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a56:	4b21      	ldr	r3, [pc, #132]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	491d      	ldr	r1, [pc, #116]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a78:	4b18      	ldr	r3, [pc, #96]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	4915      	ldr	r1, [pc, #84]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	490c      	ldr	r1, [pc, #48]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	4904      	ldr	r1, [pc, #16]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800

08005ae0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d003      	beq.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	f000 8098 	beq.w	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005b04:	e12d      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8005b06:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005b10:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b18:	d00c      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1e:	d802      	bhi.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8005b24:	e082      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005b26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b2a:	d047      	beq.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005b2c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005b30:	d06f      	beq.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8005b32:	e07b      	b.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b34:	4b8f      	ldr	r3, [pc, #572]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b36:	617b      	str	r3, [r7, #20]
          break;
 8005b38:	e07b      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b48:	d109      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b4a:	4b89      	ldr	r3, [pc, #548]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b54:	4a87      	ldr	r2, [pc, #540]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	e019      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b5e:	4b84      	ldr	r3, [pc, #528]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b6a:	d109      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b6c:	4b80      	ldr	r3, [pc, #512]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b76:	4a80      	ldr	r2, [pc, #512]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e008      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005b80:	4b7b      	ldr	r3, [pc, #492]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8a:	4a7c      	ldr	r2, [pc, #496]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b90:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005b92:	4b77      	ldr	r3, [pc, #476]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b98:	099b      	lsrs	r3, r3, #6
 8005b9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ba6:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bac:	0f1b      	lsrs	r3, r3, #28
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]
          break;
 8005bba:	e03a      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bbc:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc8:	d108      	bne.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bca:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd2:	4a69      	ldr	r2, [pc, #420]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	e007      	b.n	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bdc:	4b64      	ldr	r3, [pc, #400]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be4:	4a65      	ldr	r2, [pc, #404]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005bec:	4b60      	ldr	r3, [pc, #384]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	099b      	lsrs	r3, r3, #6
 8005bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	fb02 f303 	mul.w	r3, r2, r3
 8005bfc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005bfe:	4b5c      	ldr	r3, [pc, #368]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0e:	617b      	str	r3, [r7, #20]
          break;
 8005c10:	e00f      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c12:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1e:	d102      	bne.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8005c20:	4b55      	ldr	r3, [pc, #340]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c22:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005c24:	e005      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8005c26:	4b55      	ldr	r3, [pc, #340]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c28:	617b      	str	r3, [r7, #20]
          break;
 8005c2a:	e002      	b.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
          break;
 8005c30:	bf00      	nop
        }
      }
      break;
 8005c32:	e096      	b.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8005c34:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8005c3e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c46:	d00c      	beq.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c4c:	d802      	bhi.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005c52:	e082      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8005c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c58:	d047      	beq.n	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8005c5a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c5e:	d06f      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8005c60:	e07b      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c62:	4b44      	ldr	r3, [pc, #272]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c64:	617b      	str	r3, [r7, #20]
          break;
 8005c66:	e07b      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c76:	d109      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c78:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c82:	4a3c      	ldr	r2, [pc, #240]	; (8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	e019      	b.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c8c:	4b38      	ldr	r3, [pc, #224]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c98:	d109      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005c9a:	4b35      	ldr	r3, [pc, #212]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca4:	4a34      	ldr	r2, [pc, #208]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	e008      	b.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005cae:	4b30      	ldr	r3, [pc, #192]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb8:	4a30      	ldr	r2, [pc, #192]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc6:	099b      	lsrs	r3, r3, #6
 8005cc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005cd4:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cda:	0f1b      	lsrs	r3, r3, #28
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	617b      	str	r3, [r7, #20]
          break;
 8005ce8:	e03a      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005cea:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf6:	d108      	bne.n	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	e007      	b.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d12:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	099b      	lsrs	r3, r3, #6
 8005d20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	0f1b      	lsrs	r3, r3, #28
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]
          break;
 8005d3e:	e00f      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4c:	d102      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005d50:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8005d52:	e005      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005d56:	617b      	str	r3, [r7, #20]
          break;
 8005d58:	e002      	b.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
          break;
 8005d5e:	bf00      	nop
        }
      }
      break;
 8005d60:	bf00      	nop
    }
  }
  return frequency;
 8005d62:	697b      	ldr	r3, [r7, #20]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40023800 	.word	0x40023800
 8005d74:	00bb8000 	.word	0x00bb8000
 8005d78:	017d7840 	.word	0x017d7840
 8005d7c:	00f42400 	.word	0x00f42400

08005d80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d075      	beq.n	8005e84 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d98:	4ba2      	ldr	r3, [pc, #648]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 030c 	and.w	r3, r3, #12
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d00c      	beq.n	8005dbe <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da4:	4b9f      	ldr	r3, [pc, #636]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d112      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005db0:	4b9c      	ldr	r3, [pc, #624]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbe:	4b99      	ldr	r3, [pc, #612]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d05b      	beq.n	8005e82 <HAL_RCC_OscConfig+0x102>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d157      	bne.n	8005e82 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e20b      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dde:	d106      	bne.n	8005dee <HAL_RCC_OscConfig+0x6e>
 8005de0:	4b90      	ldr	r3, [pc, #576]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a8f      	ldr	r2, [pc, #572]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e01d      	b.n	8005e2a <HAL_RCC_OscConfig+0xaa>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005df6:	d10c      	bne.n	8005e12 <HAL_RCC_OscConfig+0x92>
 8005df8:	4b8a      	ldr	r3, [pc, #552]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a89      	ldr	r2, [pc, #548]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	4b87      	ldr	r3, [pc, #540]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a86      	ldr	r2, [pc, #536]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	e00b      	b.n	8005e2a <HAL_RCC_OscConfig+0xaa>
 8005e12:	4b84      	ldr	r3, [pc, #528]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a83      	ldr	r2, [pc, #524]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	4b81      	ldr	r3, [pc, #516]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a80      	ldr	r2, [pc, #512]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d013      	beq.n	8005e5a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fb ff6d 	bl	8001d10 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3a:	f7fb ff69 	bl	8001d10 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b64      	cmp	r3, #100	; 0x64
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e1d0      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4c:	4b75      	ldr	r3, [pc, #468]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0xba>
 8005e58:	e014      	b.n	8005e84 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5a:	f7fb ff59 	bl	8001d10 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e62:	f7fb ff55 	bl	8001d10 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b64      	cmp	r3, #100	; 0x64
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e1bc      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e74:	4b6b      	ldr	r3, [pc, #428]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0xe2>
 8005e80:	e000      	b.n	8005e84 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d063      	beq.n	8005f58 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e90:	4b64      	ldr	r3, [pc, #400]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 030c 	and.w	r3, r3, #12
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9c:	4b61      	ldr	r3, [pc, #388]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d11c      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea8:	4b5e      	ldr	r3, [pc, #376]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d116      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb4:	4b5b      	ldr	r3, [pc, #364]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <HAL_RCC_OscConfig+0x14c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e190      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ecc:	4b55      	ldr	r3, [pc, #340]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4952      	ldr	r1, [pc, #328]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee0:	e03a      	b.n	8005f58 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eea:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <HAL_RCC_OscConfig+0x2a8>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fb ff0e 	bl	8001d10 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef8:	f7fb ff0a 	bl	8001d10 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e171      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0a:	4b46      	ldr	r3, [pc, #280]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f0      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f16:	4b43      	ldr	r3, [pc, #268]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	493f      	ldr	r1, [pc, #252]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]
 8005f2a:	e015      	b.n	8005f58 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2c:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <HAL_RCC_OscConfig+0x2a8>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f32:	f7fb feed 	bl	8001d10 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f3a:	f7fb fee9 	bl	8001d10 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e150      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4c:	4b35      	ldr	r3, [pc, #212]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f0      	bne.n	8005f3a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d030      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d016      	beq.n	8005f9a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f6c:	4b2f      	ldr	r3, [pc, #188]	; (800602c <HAL_RCC_OscConfig+0x2ac>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f72:	f7fb fecd 	bl	8001d10 <HAL_GetTick>
 8005f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f78:	e008      	b.n	8005f8c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f7a:	f7fb fec9 	bl	8001d10 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d901      	bls.n	8005f8c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e130      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8c:	4b25      	ldr	r3, [pc, #148]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0f0      	beq.n	8005f7a <HAL_RCC_OscConfig+0x1fa>
 8005f98:	e015      	b.n	8005fc6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_RCC_OscConfig+0x2ac>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa0:	f7fb feb6 	bl	8001d10 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa8:	f7fb feb2 	bl	8001d10 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e119      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 809f 	beq.w	8006112 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_RCC_OscConfig+0x2a4>)
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006000:	2301      	movs	r3, #1
 8006002:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <HAL_RCC_OscConfig+0x2b0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d120      	bne.n	8006052 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <HAL_RCC_OscConfig+0x2b0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <HAL_RCC_OscConfig+0x2b0>)
 8006016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601c:	f7fb fe78 	bl	8001d10 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006022:	e010      	b.n	8006046 <HAL_RCC_OscConfig+0x2c6>
 8006024:	40023800 	.word	0x40023800
 8006028:	42470000 	.word	0x42470000
 800602c:	42470e80 	.word	0x42470e80
 8006030:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006034:	f7fb fe6c 	bl	8001d10 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e0d3      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006046:	4b6c      	ldr	r3, [pc, #432]	; (80061f8 <HAL_RCC_OscConfig+0x478>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d106      	bne.n	8006068 <HAL_RCC_OscConfig+0x2e8>
 800605a:	4b68      	ldr	r3, [pc, #416]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	4a67      	ldr	r2, [pc, #412]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	6713      	str	r3, [r2, #112]	; 0x70
 8006066:	e01c      	b.n	80060a2 <HAL_RCC_OscConfig+0x322>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d10c      	bne.n	800608a <HAL_RCC_OscConfig+0x30a>
 8006070:	4b62      	ldr	r3, [pc, #392]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	4a61      	ldr	r2, [pc, #388]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	6713      	str	r3, [r2, #112]	; 0x70
 800607c:	4b5f      	ldr	r3, [pc, #380]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006080:	4a5e      	ldr	r2, [pc, #376]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6713      	str	r3, [r2, #112]	; 0x70
 8006088:	e00b      	b.n	80060a2 <HAL_RCC_OscConfig+0x322>
 800608a:	4b5c      	ldr	r3, [pc, #368]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 800608c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608e:	4a5b      	ldr	r2, [pc, #364]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6713      	str	r3, [r2, #112]	; 0x70
 8006096:	4b59      	ldr	r3, [pc, #356]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	4a58      	ldr	r2, [pc, #352]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 800609c:	f023 0304 	bic.w	r3, r3, #4
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d015      	beq.n	80060d6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060aa:	f7fb fe31 	bl	8001d10 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b0:	e00a      	b.n	80060c8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7fb fe2d 	bl	8001d10 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e092      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c8:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0ee      	beq.n	80060b2 <HAL_RCC_OscConfig+0x332>
 80060d4:	e014      	b.n	8006100 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d6:	f7fb fe1b 	bl	8001d10 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060dc:	e00a      	b.n	80060f4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fb fe17 	bl	8001d10 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e07c      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f4:	4b41      	ldr	r3, [pc, #260]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1ee      	bne.n	80060de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d105      	bne.n	8006112 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006106:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	4a3c      	ldr	r2, [pc, #240]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 800610c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006110:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d068      	beq.n	80061ec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800611a:	4b38      	ldr	r3, [pc, #224]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	2b08      	cmp	r3, #8
 8006124:	d060      	beq.n	80061e8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d145      	bne.n	80061ba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612e:	4b34      	ldr	r3, [pc, #208]	; (8006200 <HAL_RCC_OscConfig+0x480>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fb fdec 	bl	8001d10 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800613c:	f7fb fde8 	bl	8001d10 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e04f      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614e:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69da      	ldr	r2, [r3, #28]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	019b      	lsls	r3, r3, #6
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	3b01      	subs	r3, #1
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	071b      	lsls	r3, r3, #28
 8006186:	491d      	ldr	r1, [pc, #116]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 8006188:	4313      	orrs	r3, r2
 800618a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800618c:	4b1c      	ldr	r3, [pc, #112]	; (8006200 <HAL_RCC_OscConfig+0x480>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fb fdbd 	bl	8001d10 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619a:	f7fb fdb9 	bl	8001d10 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e020      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ac:	4b13      	ldr	r3, [pc, #76]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x41a>
 80061b8:	e018      	b.n	80061ec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_RCC_OscConfig+0x480>)
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fb fda6 	bl	8001d10 <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061c8:	f7fb fda2 	bl	8001d10 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e009      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061da:	4b08      	ldr	r3, [pc, #32]	; (80061fc <HAL_RCC_OscConfig+0x47c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <HAL_RCC_OscConfig+0x448>
 80061e6:	e001      	b.n	80061ec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40007000 	.word	0x40007000
 80061fc:	40023800 	.word	0x40023800
 8006200:	42470060 	.word	0x42470060

08006204 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e022      	b.n	800625c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fb faeb 	bl	8001804 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2203      	movs	r2, #3
 8006232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f814 	bl	8006264 <HAL_SD_InitCard>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e00a      	b.n	800625c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006264:	b5b0      	push	{r4, r5, r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af04      	add	r7, sp, #16
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006280:	2376      	movs	r3, #118	; 0x76
 8006282:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681d      	ldr	r5, [r3, #0]
 8006288:	466c      	mov	r4, sp
 800628a:	f107 0314 	add.w	r3, r7, #20
 800628e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800629c:	4628      	mov	r0, r5
 800629e:	f001 fd11 	bl	8007cc4 <SDIO_Init>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80062a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e031      	b.n	8006318 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80062b4:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <HAL_SD_InitCard+0xbc>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fd38 	bl	8007d34 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80062c4:	4b16      	ldr	r3, [pc, #88]	; (8006320 <HAL_SD_InitCard+0xbc>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fb18 	bl	8006900 <SD_PowerON>
 80062d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e013      	b.n	8006318 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fa37 	bl	8006764 <SD_InitCard>
 80062f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3728      	adds	r7, #40	; 0x28
 800631c:	46bd      	mov	sp, r7
 800631e:	bdb0      	pop	{r4, r5, r7, pc}
 8006320:	422580a0 	.word	0x422580a0

08006324 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006332:	0f9b      	lsrs	r3, r3, #30
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633e:	0e9b      	lsrs	r3, r3, #26
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	b2da      	uxtb	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006350:	0e1b      	lsrs	r3, r3, #24
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	b2da      	uxtb	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	b2da      	uxtb	r2, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	b2da      	uxtb	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800637a:	b2da      	uxtb	r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006384:	0d1b      	lsrs	r3, r3, #20
 8006386:	b29a      	uxth	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	b2da      	uxtb	r2, r3
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a2:	0bdb      	lsrs	r3, r3, #15
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b4:	0b9b      	lsrs	r3, r3, #14
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c6:	0b5b      	lsrs	r3, r3, #13
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063d8:	0b1b      	lsrs	r3, r3, #12
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d163      	bne.n	80064bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f8:	009a      	lsls	r2, r3, #2
 80063fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063fe:	4013      	ands	r3, r2
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006404:	0f92      	lsrs	r2, r2, #30
 8006406:	431a      	orrs	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006410:	0edb      	lsrs	r3, r3, #27
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	b2da      	uxtb	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	b2da      	uxtb	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006434:	0d5b      	lsrs	r3, r3, #21
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	b2da      	uxtb	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006446:	0c9b      	lsrs	r3, r3, #18
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	b2da      	uxtb	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006458:	0bdb      	lsrs	r3, r3, #15
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	b2da      	uxtb	r2, r3
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	7e1b      	ldrb	r3, [r3, #24]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	3302      	adds	r3, #2
 800647c:	2201      	movs	r2, #1
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006486:	fb02 f203 	mul.w	r2, r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	7a1b      	ldrb	r3, [r3, #8]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f003 030f 	and.w	r3, r3, #15
 8006498:	2201      	movs	r2, #1
 800649a:	409a      	lsls	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80064a8:	0a52      	lsrs	r2, r2, #9
 80064aa:	fb02 f203 	mul.w	r2, r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b8:	661a      	str	r2, [r3, #96]	; 0x60
 80064ba:	e031      	b.n	8006520 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d11d      	bne.n	8006500 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064c8:	041b      	lsls	r3, r3, #16
 80064ca:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	431a      	orrs	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	3301      	adds	r3, #1
 80064e0:	029a      	lsls	r2, r3, #10
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	661a      	str	r2, [r3, #96]	; 0x60
 80064fe:	e00f      	b.n	8006520 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a58      	ldr	r2, [pc, #352]	; (8006668 <HAL_SD_GetCardCSD+0x344>)
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e09d      	b.n	800665c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006524:	0b9b      	lsrs	r3, r3, #14
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	b2da      	uxtb	r2, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006536:	09db      	lsrs	r3, r3, #7
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800653e:	b2da      	uxtb	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800654e:	b2da      	uxtb	r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	0fdb      	lsrs	r3, r3, #31
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	0f5b      	lsrs	r3, r3, #29
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	b2da      	uxtb	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006576:	0e9b      	lsrs	r3, r3, #26
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	0d9b      	lsrs	r3, r3, #22
 800658a:	b2db      	uxtb	r3, r3
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	b2da      	uxtb	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	0d5b      	lsrs	r3, r3, #21
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	0c1b      	lsrs	r3, r3, #16
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ca:	0bdb      	lsrs	r3, r3, #15
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	0b9b      	lsrs	r3, r3, #14
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f2:	0b5b      	lsrs	r3, r3, #13
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006606:	0b1b      	lsrs	r3, r3, #12
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	b2da      	uxtb	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	0a9b      	lsrs	r3, r3, #10
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	b2da      	uxtb	r2, r3
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	b2da      	uxtb	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800664a:	b2da      	uxtb	r2, r3
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	004005ff 	.word	0x004005ff

0800666c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800666c:	b5b0      	push	{r4, r5, r7, lr}
 800666e:	b08e      	sub	sp, #56	; 0x38
 8006670:	af04      	add	r7, sp, #16
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2203      	movs	r2, #3
 800667a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	2b03      	cmp	r3, #3
 8006684:	d02e      	beq.n	80066e4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	d106      	bne.n	800669c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
 800669a:	e029      	b.n	80066f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a2:	d10a      	bne.n	80066ba <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f9b9 	bl	8006a1c <SD_WideBus_Enable>
 80066aa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
 80066b8:	e01a      	b.n	80066f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10a      	bne.n	80066d6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f9f6 	bl	8006ab2 <SD_WideBus_Disable>
 80066c6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38
 80066d4:	e00c      	b.n	80066f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
 80066e2:	e005      	b.n	80066f0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a18      	ldr	r2, [pc, #96]	; (8006760 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e024      	b.n	8006756 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681d      	ldr	r5, [r3, #0]
 8006732:	466c      	mov	r4, sp
 8006734:	f107 0318 	add.w	r3, r7, #24
 8006738:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800673c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006740:	f107 030c 	add.w	r3, r7, #12
 8006744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006746:	4628      	mov	r0, r5
 8006748:	f001 fabc 	bl	8007cc4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3728      	adds	r7, #40	; 0x28
 800675a:	46bd      	mov	sp, r7
 800675c:	bdb0      	pop	{r4, r5, r7, pc}
 800675e:	bf00      	nop
 8006760:	004005ff 	.word	0x004005ff

08006764 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006764:	b5b0      	push	{r4, r5, r7, lr}
 8006766:	b094      	sub	sp, #80	; 0x50
 8006768:	af04      	add	r7, sp, #16
 800676a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800676c:	2301      	movs	r3, #1
 800676e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f001 faec 	bl	8007d52 <SDIO_GetPowerState>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006780:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006784:	e0b7      	b.n	80068f6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678a:	2b03      	cmp	r3, #3
 800678c:	d02f      	beq.n	80067ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f001 fc6b 	bl	800806e <SDMMC_CmdSendCID>
 8006798:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80067a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a2:	e0a8      	b.n	80068f6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fb16 	bl	8007ddc <SDIO_GetResponse>
 80067b0:	4602      	mov	r2, r0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2104      	movs	r1, #4
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fb0d 	bl	8007ddc <SDIO_GetResponse>
 80067c2:	4602      	mov	r2, r0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2108      	movs	r1, #8
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fb04 	bl	8007ddc <SDIO_GetResponse>
 80067d4:	4602      	mov	r2, r0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	210c      	movs	r1, #12
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 fafb 	bl	8007ddc <SDIO_GetResponse>
 80067e6:	4602      	mov	r2, r0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d00d      	beq.n	8006812 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f107 020e 	add.w	r2, r7, #14
 80067fe:	4611      	mov	r1, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f001 fc71 	bl	80080e8 <SDMMC_CmdSetRelAdd>
 8006806:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <SD_InitCard+0xae>
    {
      return errorstate;
 800680e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006810:	e071      	b.n	80068f6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	2b03      	cmp	r3, #3
 8006818:	d036      	beq.n	8006888 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800681a:	89fb      	ldrh	r3, [r7, #14]
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682a:	041b      	lsls	r3, r3, #16
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f001 fc3b 	bl	80080aa <SDMMC_CmdSendCSD>
 8006834:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <SD_InitCard+0xdc>
    {
      return errorstate;
 800683c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683e:	e05a      	b.n	80068f6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2100      	movs	r1, #0
 8006846:	4618      	mov	r0, r3
 8006848:	f001 fac8 	bl	8007ddc <SDIO_GetResponse>
 800684c:	4602      	mov	r2, r0
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2104      	movs	r1, #4
 8006858:	4618      	mov	r0, r3
 800685a:	f001 fabf 	bl	8007ddc <SDIO_GetResponse>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2108      	movs	r1, #8
 800686a:	4618      	mov	r0, r3
 800686c:	f001 fab6 	bl	8007ddc <SDIO_GetResponse>
 8006870:	4602      	mov	r2, r0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	210c      	movs	r1, #12
 800687c:	4618      	mov	r0, r3
 800687e:	f001 faad 	bl	8007ddc <SDIO_GetResponse>
 8006882:	4602      	mov	r2, r0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2104      	movs	r1, #4
 800688e:	4618      	mov	r0, r3
 8006890:	f001 faa4 	bl	8007ddc <SDIO_GetResponse>
 8006894:	4603      	mov	r3, r0
 8006896:	0d1a      	lsrs	r2, r3, #20
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800689c:	f107 0310 	add.w	r3, r7, #16
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fd3e 	bl	8006324 <HAL_SD_GetCardCSD>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068b2:	e020      	b.n	80068f6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6819      	ldr	r1, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068bc:	041b      	lsls	r3, r3, #16
 80068be:	f04f 0400 	mov.w	r4, #0
 80068c2:	461a      	mov	r2, r3
 80068c4:	4623      	mov	r3, r4
 80068c6:	4608      	mov	r0, r1
 80068c8:	f001 fae9 	bl	8007e9e <SDMMC_CmdSelDesel>
 80068cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <SD_InitCard+0x174>
  {
    return errorstate;
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	e00e      	b.n	80068f6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681d      	ldr	r5, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	466c      	mov	r4, sp
 80068e0:	f103 0210 	add.w	r2, r3, #16
 80068e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80068e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068ea:	3304      	adds	r3, #4
 80068ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068ee:	4628      	mov	r0, r5
 80068f0:	f001 f9e8 	bl	8007cc4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3740      	adds	r7, #64	; 0x40
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006900 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fae3 	bl	8007ee4 <SDMMC_CmdGoIdleState>
 800691e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	e072      	b.n	8006a10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f001 faf6 	bl	8007f20 <SDMMC_CmdOperCond>
 8006934:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00d      	beq.n	8006958 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f001 facc 	bl	8007ee4 <SDMMC_CmdGoIdleState>
 800694c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	e05b      	b.n	8006a10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	2b01      	cmp	r3, #1
 8006964:	d137      	bne.n	80069d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f001 faf6 	bl	8007f5e <SDMMC_CmdAppCommand>
 8006972:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02d      	beq.n	80069d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800697a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800697e:	e047      	b.n	8006a10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f001 fae9 	bl	8007f5e <SDMMC_CmdAppCommand>
 800698c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <SD_PowerON+0x98>
    {
      return errorstate;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	e03b      	b.n	8006a10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	491e      	ldr	r1, [pc, #120]	; (8006a18 <SD_PowerON+0x118>)
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 faff 	bl	8007fa2 <SDMMC_CmdAppOperCommand>
 80069a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069b0:	e02e      	b.n	8006a10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2100      	movs	r1, #0
 80069b8:	4618      	mov	r0, r3
 80069ba:	f001 fa0f 	bl	8007ddc <SDIO_GetResponse>
 80069be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	0fdb      	lsrs	r3, r3, #31
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <SD_PowerON+0xcc>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <SD_PowerON+0xce>
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]

    count++;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	3301      	adds	r3, #1
 80069d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069dc:	4293      	cmp	r3, r2
 80069de:	d802      	bhi.n	80069e6 <SD_PowerON+0xe6>
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0cc      	beq.n	8006980 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d902      	bls.n	80069f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069f4:	e00c      	b.n	8006a10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44
 8006a06:	e002      	b.n	8006a0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	c1100000 	.word	0xc1100000

08006a1c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 f9d2 	bl	8007ddc <SDIO_GetResponse>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a42:	d102      	bne.n	8006a4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a48:	e02f      	b.n	8006aaa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a4a:	f107 030c 	add.w	r3, r7, #12
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f879 	bl	8006b48 <SD_FindSCR>
 8006a56:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	e023      	b.n	8006aaa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01c      	beq.n	8006aa6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	041b      	lsls	r3, r3, #16
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f001 fa70 	bl	8007f5e <SDMMC_CmdAppCommand>
 8006a7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	e00f      	b.n	8006aaa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f001 faa9 	bl	8007fe8 <SDMMC_CmdBusWidth>
 8006a96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	e003      	b.n	8006aaa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e001      	b.n	8006aaa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006aa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b086      	sub	sp, #24
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f987 	bl	8007ddc <SDIO_GetResponse>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ad8:	d102      	bne.n	8006ae0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ade:	e02f      	b.n	8006b40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ae0:	f107 030c 	add.w	r3, r7, #12
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f82e 	bl	8006b48 <SD_FindSCR>
 8006aec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	e023      	b.n	8006b40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01c      	beq.n	8006b3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f001 fa25 	bl	8007f5e <SDMMC_CmdAppCommand>
 8006b14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	e00f      	b.n	8006b40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2100      	movs	r1, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 fa5e 	bl	8007fe8 <SDMMC_CmdBusWidth>
 8006b2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	e003      	b.n	8006b40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e001      	b.n	8006b40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b48:	b590      	push	{r4, r7, lr}
 8006b4a:	b08f      	sub	sp, #60	; 0x3c
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b52:	f7fb f8dd 	bl	8001d10 <HAL_GetTick>
 8006b56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2108      	movs	r1, #8
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f973 	bl	8007e5a <SDMMC_CmdBlockLength>
 8006b74:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	e0a9      	b.n	8006cd4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b88:	041b      	lsls	r3, r3, #16
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f001 f9e6 	bl	8007f5e <SDMMC_CmdAppCommand>
 8006b92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	e09a      	b.n	8006cd4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006ba4:	2308      	movs	r3, #8
 8006ba6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006ba8:	2330      	movs	r3, #48	; 0x30
 8006baa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006bac:	2302      	movs	r3, #2
 8006bae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f107 0210 	add.w	r2, r7, #16
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 f91d 	bl	8007e02 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 fa2d 	bl	800802c <SDMMC_CmdSendSCR>
 8006bd2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d022      	beq.n	8006c20 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	e07a      	b.n	8006cd4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	f107 0208 	add.w	r2, r7, #8
 8006bf8:	18d4      	adds	r4, r2, r3
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	f001 f88d 	bl	8007d1a <SDIO_ReadFIFO>
 8006c00:	4603      	mov	r3, r0
 8006c02:	6023      	str	r3, [r4, #0]
      index++;
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	3301      	adds	r3, #1
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c0a:	f7fb f881 	bl	8001d10 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d102      	bne.n	8006c20 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c1e:	e059      	b.n	8006cd4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c26:	f240 432a 	movw	r3, #1066	; 0x42a
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0d6      	beq.n	8006bde <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2208      	movs	r2, #8
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c46:	2308      	movs	r3, #8
 8006c48:	e044      	b.n	8006cd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c60:	2302      	movs	r3, #2
 8006c62:	e037      	b.n	8006cd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2220      	movs	r2, #32
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	e02a      	b.n	8006cd4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	061a      	lsls	r2, r3, #24
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006c9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	0e1b      	lsrs	r3, r3, #24
 8006ca4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	601a      	str	r2, [r3, #0]
    scr++;
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	3304      	adds	r3, #4
 8006cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	061a      	lsls	r2, r3, #24
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	0e1b      	lsrs	r3, r3, #24
 8006ccc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	373c      	adds	r7, #60	; 0x3c
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd90      	pop	{r4, r7, pc}

08006cdc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e034      	b.n	8006d5c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7fa feda 	bl	8001ac0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3308      	adds	r3, #8
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f000 fed0 	bl	8007abc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	461a      	mov	r2, r3
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	f000 ff38 	bl	8007b9c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6858      	ldr	r0, [r3, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	f000 ff83 	bl	8007c44 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	6892      	ldr	r2, [r2, #8]
 8006d46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	6892      	ldr	r2, [r2, #8]
 8006d52:	f041 0101 	orr.w	r1, r1, #1
 8006d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e03f      	b.n	8006df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fa fda2 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2224      	movs	r2, #36	; 0x24
 8006d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 faef 	bl	800738c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d130      	bne.n	8006e7a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_UART_Transmit_IT+0x26>
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e029      	b.n	8006e7c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_UART_Transmit_IT+0x38>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e022      	b.n	8006e7c <HAL_UART_Transmit_IT+0x7e>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2221      	movs	r2, #33	; 0x21
 8006e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e74:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d140      	bne.n	8006f24 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_UART_Receive_IT+0x26>
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e039      	b.n	8006f26 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_UART_Receive_IT+0x38>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e032      	b.n	8006f26 <HAL_UART_Receive_IT+0x9e>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	88fa      	ldrh	r2, [r7, #6]
 8006ed2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2222      	movs	r2, #34	; 0x22
 8006ee4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006efe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0220 	orr.w	r2, r2, #32
 8006f1e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10d      	bne.n	8006f86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d008      	beq.n	8006f86 <HAL_UART_IRQHandler+0x52>
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f982 	bl	8007288 <UART_Receive_IT>
      return;
 8006f84:	e0d1      	b.n	800712a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80b0 	beq.w	80070ee <HAL_UART_IRQHandler+0x1ba>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d105      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x70>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 80a5 	beq.w	80070ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x90>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbc:	f043 0201 	orr.w	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xb0>
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	f043 0202 	orr.w	r2, r3, #2
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <HAL_UART_IRQHandler+0xd0>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00f      	beq.n	800702e <HAL_UART_IRQHandler+0xfa>
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <HAL_UART_IRQHandler+0xee>
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	f043 0208 	orr.w	r2, r3, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d078      	beq.n	8007128 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <HAL_UART_IRQHandler+0x11c>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f91c 	bl	8007288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705a:	2b40      	cmp	r3, #64	; 0x40
 800705c:	bf0c      	ite	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	2300      	movne	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <HAL_UART_IRQHandler+0x144>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d031      	beq.n	80070dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f865 	bl	8007148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b40      	cmp	r3, #64	; 0x40
 800708a:	d123      	bne.n	80070d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800709a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d013      	beq.n	80070cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	4a21      	ldr	r2, [pc, #132]	; (8007130 <HAL_UART_IRQHandler+0x1fc>)
 80070aa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fb fba1 	bl	80027f8 <HAL_DMA_Abort_IT>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d016      	beq.n	80070ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070c6:	4610      	mov	r0, r2
 80070c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	e00e      	b.n	80070ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f831 	bl	8007134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d2:	e00a      	b.n	80070ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f82d 	bl	8007134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070da:	e006      	b.n	80070ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f829 	bl	8007134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80070e8:	e01e      	b.n	8007128 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ea:	bf00      	nop
    return;
 80070ec:	e01c      	b.n	8007128 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <HAL_UART_IRQHandler+0x1d6>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f852 	bl	80071ac <UART_Transmit_IT>
    return;
 8007108:	e00f      	b.n	800712a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <HAL_UART_IRQHandler+0x1f6>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f89a 	bl	8007258 <UART_EndTransmit_IT>
    return;
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007128:	bf00      	nop
  }
}
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	08007185 	.word	0x08007185

08007134 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800715e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695a      	ldr	r2, [r3, #20]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0201 	bic.w	r2, r2, #1
 800716e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ffc8 	bl	8007134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b21      	cmp	r3, #33	; 0x21
 80071be:	d144      	bne.n	800724a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c8:	d11a      	bne.n	8007200 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	1c9a      	adds	r2, r3, #2
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]
 80071f2:	e00e      	b.n	8007212 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	621a      	str	r2, [r3, #32]
 80071fe:	e008      	b.n	8007212 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6211      	str	r1, [r2, #32]
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29b      	uxth	r3, r3
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4619      	mov	r1, r3
 8007220:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10f      	bne.n	8007246 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007234:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007244:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	e000      	b.n	800724c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
  }
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800726e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7f9 f973 	bl	8000564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b22      	cmp	r3, #34	; 0x22
 800729a:	d171      	bne.n	8007380 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a4:	d123      	bne.n	80072ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10e      	bne.n	80072d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	1c9a      	adds	r2, r3, #2
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28
 80072d0:	e029      	b.n	8007326 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
 80072ec:	e01b      	b.n	8007326 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6858      	ldr	r0, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	1c59      	adds	r1, r3, #1
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6291      	str	r1, [r2, #40]	; 0x28
 8007306:	b2c2      	uxtb	r2, r0
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	e00c      	b.n	8007326 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	1c58      	adds	r0, r3, #1
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	6288      	str	r0, [r1, #40]	; 0x28
 800731e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29b      	uxth	r3, r3
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	4619      	mov	r1, r3
 8007334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007336:	2b00      	cmp	r3, #0
 8007338:	d120      	bne.n	800737c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0220 	bic.w	r2, r2, #32
 8007348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7f9 f8d8 	bl	8000528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e002      	b.n	8007382 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	e000      	b.n	8007382 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007380:	2302      	movs	r3, #2
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80073ce:	f023 030c 	bic.w	r3, r3, #12
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6812      	ldr	r2, [r2, #0]
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	430b      	orrs	r3, r1
 80073da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fa:	f040 8199 	bne.w	8007730 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4ac6      	ldr	r2, [pc, #792]	; (800771c <UART_SetConfig+0x390>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00f      	beq.n	8007428 <UART_SetConfig+0x9c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4ac4      	ldr	r2, [pc, #784]	; (8007720 <UART_SetConfig+0x394>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00a      	beq.n	8007428 <UART_SetConfig+0x9c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4ac3      	ldr	r2, [pc, #780]	; (8007724 <UART_SetConfig+0x398>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d005      	beq.n	8007428 <UART_SetConfig+0x9c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4ac1      	ldr	r2, [pc, #772]	; (8007728 <UART_SetConfig+0x39c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	f040 80bd 	bne.w	80075a2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007428:	f7fe f8ba 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 800742c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	461d      	mov	r5, r3
 8007432:	f04f 0600 	mov.w	r6, #0
 8007436:	46a8      	mov	r8, r5
 8007438:	46b1      	mov	r9, r6
 800743a:	eb18 0308 	adds.w	r3, r8, r8
 800743e:	eb49 0409 	adc.w	r4, r9, r9
 8007442:	4698      	mov	r8, r3
 8007444:	46a1      	mov	r9, r4
 8007446:	eb18 0805 	adds.w	r8, r8, r5
 800744a:	eb49 0906 	adc.w	r9, r9, r6
 800744e:	f04f 0100 	mov.w	r1, #0
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800745a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800745e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007462:	4688      	mov	r8, r1
 8007464:	4691      	mov	r9, r2
 8007466:	eb18 0005 	adds.w	r0, r8, r5
 800746a:	eb49 0106 	adc.w	r1, r9, r6
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	461d      	mov	r5, r3
 8007474:	f04f 0600 	mov.w	r6, #0
 8007478:	196b      	adds	r3, r5, r5
 800747a:	eb46 0406 	adc.w	r4, r6, r6
 800747e:	461a      	mov	r2, r3
 8007480:	4623      	mov	r3, r4
 8007482:	f7f8 fed1 	bl	8000228 <__aeabi_uldivmod>
 8007486:	4603      	mov	r3, r0
 8007488:	460c      	mov	r4, r1
 800748a:	461a      	mov	r2, r3
 800748c:	4ba7      	ldr	r3, [pc, #668]	; (800772c <UART_SetConfig+0x3a0>)
 800748e:	fba3 2302 	umull	r2, r3, r3, r2
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	461d      	mov	r5, r3
 800749c:	f04f 0600 	mov.w	r6, #0
 80074a0:	46a9      	mov	r9, r5
 80074a2:	46b2      	mov	sl, r6
 80074a4:	eb19 0309 	adds.w	r3, r9, r9
 80074a8:	eb4a 040a 	adc.w	r4, sl, sl
 80074ac:	4699      	mov	r9, r3
 80074ae:	46a2      	mov	sl, r4
 80074b0:	eb19 0905 	adds.w	r9, r9, r5
 80074b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80074b8:	f04f 0100 	mov.w	r1, #0
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074cc:	4689      	mov	r9, r1
 80074ce:	4692      	mov	sl, r2
 80074d0:	eb19 0005 	adds.w	r0, r9, r5
 80074d4:	eb4a 0106 	adc.w	r1, sl, r6
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	461d      	mov	r5, r3
 80074de:	f04f 0600 	mov.w	r6, #0
 80074e2:	196b      	adds	r3, r5, r5
 80074e4:	eb46 0406 	adc.w	r4, r6, r6
 80074e8:	461a      	mov	r2, r3
 80074ea:	4623      	mov	r3, r4
 80074ec:	f7f8 fe9c 	bl	8000228 <__aeabi_uldivmod>
 80074f0:	4603      	mov	r3, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	461a      	mov	r2, r3
 80074f6:	4b8d      	ldr	r3, [pc, #564]	; (800772c <UART_SetConfig+0x3a0>)
 80074f8:	fba3 1302 	umull	r1, r3, r3, r2
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	2164      	movs	r1, #100	; 0x64
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	3332      	adds	r3, #50	; 0x32
 800750a:	4a88      	ldr	r2, [pc, #544]	; (800772c <UART_SetConfig+0x3a0>)
 800750c:	fba2 2303 	umull	r2, r3, r2, r3
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007518:	4498      	add	r8, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	461d      	mov	r5, r3
 800751e:	f04f 0600 	mov.w	r6, #0
 8007522:	46a9      	mov	r9, r5
 8007524:	46b2      	mov	sl, r6
 8007526:	eb19 0309 	adds.w	r3, r9, r9
 800752a:	eb4a 040a 	adc.w	r4, sl, sl
 800752e:	4699      	mov	r9, r3
 8007530:	46a2      	mov	sl, r4
 8007532:	eb19 0905 	adds.w	r9, r9, r5
 8007536:	eb4a 0a06 	adc.w	sl, sl, r6
 800753a:	f04f 0100 	mov.w	r1, #0
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007546:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800754a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800754e:	4689      	mov	r9, r1
 8007550:	4692      	mov	sl, r2
 8007552:	eb19 0005 	adds.w	r0, r9, r5
 8007556:	eb4a 0106 	adc.w	r1, sl, r6
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	461d      	mov	r5, r3
 8007560:	f04f 0600 	mov.w	r6, #0
 8007564:	196b      	adds	r3, r5, r5
 8007566:	eb46 0406 	adc.w	r4, r6, r6
 800756a:	461a      	mov	r2, r3
 800756c:	4623      	mov	r3, r4
 800756e:	f7f8 fe5b 	bl	8000228 <__aeabi_uldivmod>
 8007572:	4603      	mov	r3, r0
 8007574:	460c      	mov	r4, r1
 8007576:	461a      	mov	r2, r3
 8007578:	4b6c      	ldr	r3, [pc, #432]	; (800772c <UART_SetConfig+0x3a0>)
 800757a:	fba3 1302 	umull	r1, r3, r3, r2
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	2164      	movs	r1, #100	; 0x64
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	3332      	adds	r3, #50	; 0x32
 800758c:	4a67      	ldr	r2, [pc, #412]	; (800772c <UART_SetConfig+0x3a0>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	f003 0207 	and.w	r2, r3, #7
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4442      	add	r2, r8
 800759e:	609a      	str	r2, [r3, #8]
 80075a0:	e27d      	b.n	8007a9e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075a2:	f7fd ffe9 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 80075a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	461d      	mov	r5, r3
 80075ac:	f04f 0600 	mov.w	r6, #0
 80075b0:	46a8      	mov	r8, r5
 80075b2:	46b1      	mov	r9, r6
 80075b4:	eb18 0308 	adds.w	r3, r8, r8
 80075b8:	eb49 0409 	adc.w	r4, r9, r9
 80075bc:	4698      	mov	r8, r3
 80075be:	46a1      	mov	r9, r4
 80075c0:	eb18 0805 	adds.w	r8, r8, r5
 80075c4:	eb49 0906 	adc.w	r9, r9, r6
 80075c8:	f04f 0100 	mov.w	r1, #0
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80075d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80075d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80075dc:	4688      	mov	r8, r1
 80075de:	4691      	mov	r9, r2
 80075e0:	eb18 0005 	adds.w	r0, r8, r5
 80075e4:	eb49 0106 	adc.w	r1, r9, r6
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	461d      	mov	r5, r3
 80075ee:	f04f 0600 	mov.w	r6, #0
 80075f2:	196b      	adds	r3, r5, r5
 80075f4:	eb46 0406 	adc.w	r4, r6, r6
 80075f8:	461a      	mov	r2, r3
 80075fa:	4623      	mov	r3, r4
 80075fc:	f7f8 fe14 	bl	8000228 <__aeabi_uldivmod>
 8007600:	4603      	mov	r3, r0
 8007602:	460c      	mov	r4, r1
 8007604:	461a      	mov	r2, r3
 8007606:	4b49      	ldr	r3, [pc, #292]	; (800772c <UART_SetConfig+0x3a0>)
 8007608:	fba3 2302 	umull	r2, r3, r3, r2
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	461d      	mov	r5, r3
 8007616:	f04f 0600 	mov.w	r6, #0
 800761a:	46a9      	mov	r9, r5
 800761c:	46b2      	mov	sl, r6
 800761e:	eb19 0309 	adds.w	r3, r9, r9
 8007622:	eb4a 040a 	adc.w	r4, sl, sl
 8007626:	4699      	mov	r9, r3
 8007628:	46a2      	mov	sl, r4
 800762a:	eb19 0905 	adds.w	r9, r9, r5
 800762e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007632:	f04f 0100 	mov.w	r1, #0
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800763e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007642:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007646:	4689      	mov	r9, r1
 8007648:	4692      	mov	sl, r2
 800764a:	eb19 0005 	adds.w	r0, r9, r5
 800764e:	eb4a 0106 	adc.w	r1, sl, r6
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	461d      	mov	r5, r3
 8007658:	f04f 0600 	mov.w	r6, #0
 800765c:	196b      	adds	r3, r5, r5
 800765e:	eb46 0406 	adc.w	r4, r6, r6
 8007662:	461a      	mov	r2, r3
 8007664:	4623      	mov	r3, r4
 8007666:	f7f8 fddf 	bl	8000228 <__aeabi_uldivmod>
 800766a:	4603      	mov	r3, r0
 800766c:	460c      	mov	r4, r1
 800766e:	461a      	mov	r2, r3
 8007670:	4b2e      	ldr	r3, [pc, #184]	; (800772c <UART_SetConfig+0x3a0>)
 8007672:	fba3 1302 	umull	r1, r3, r3, r2
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	2164      	movs	r1, #100	; 0x64
 800767a:	fb01 f303 	mul.w	r3, r1, r3
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	3332      	adds	r3, #50	; 0x32
 8007684:	4a29      	ldr	r2, [pc, #164]	; (800772c <UART_SetConfig+0x3a0>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007692:	4498      	add	r8, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	461d      	mov	r5, r3
 8007698:	f04f 0600 	mov.w	r6, #0
 800769c:	46a9      	mov	r9, r5
 800769e:	46b2      	mov	sl, r6
 80076a0:	eb19 0309 	adds.w	r3, r9, r9
 80076a4:	eb4a 040a 	adc.w	r4, sl, sl
 80076a8:	4699      	mov	r9, r3
 80076aa:	46a2      	mov	sl, r4
 80076ac:	eb19 0905 	adds.w	r9, r9, r5
 80076b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80076b4:	f04f 0100 	mov.w	r1, #0
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076c8:	4689      	mov	r9, r1
 80076ca:	4692      	mov	sl, r2
 80076cc:	eb19 0005 	adds.w	r0, r9, r5
 80076d0:	eb4a 0106 	adc.w	r1, sl, r6
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	461d      	mov	r5, r3
 80076da:	f04f 0600 	mov.w	r6, #0
 80076de:	196b      	adds	r3, r5, r5
 80076e0:	eb46 0406 	adc.w	r4, r6, r6
 80076e4:	461a      	mov	r2, r3
 80076e6:	4623      	mov	r3, r4
 80076e8:	f7f8 fd9e 	bl	8000228 <__aeabi_uldivmod>
 80076ec:	4603      	mov	r3, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	461a      	mov	r2, r3
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <UART_SetConfig+0x3a0>)
 80076f4:	fba3 1302 	umull	r1, r3, r3, r2
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	2164      	movs	r1, #100	; 0x64
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	3332      	adds	r3, #50	; 0x32
 8007706:	4a09      	ldr	r2, [pc, #36]	; (800772c <UART_SetConfig+0x3a0>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 0207 	and.w	r2, r3, #7
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4442      	add	r2, r8
 8007718:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800771a:	e1c0      	b.n	8007a9e <UART_SetConfig+0x712>
 800771c:	40011000 	.word	0x40011000
 8007720:	40011400 	.word	0x40011400
 8007724:	40011800 	.word	0x40011800
 8007728:	40011c00 	.word	0x40011c00
 800772c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4adc      	ldr	r2, [pc, #880]	; (8007aa8 <UART_SetConfig+0x71c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00f      	beq.n	800775a <UART_SetConfig+0x3ce>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4adb      	ldr	r2, [pc, #876]	; (8007aac <UART_SetConfig+0x720>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00a      	beq.n	800775a <UART_SetConfig+0x3ce>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4ad9      	ldr	r2, [pc, #868]	; (8007ab0 <UART_SetConfig+0x724>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d005      	beq.n	800775a <UART_SetConfig+0x3ce>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4ad8      	ldr	r2, [pc, #864]	; (8007ab4 <UART_SetConfig+0x728>)
 8007754:	4293      	cmp	r3, r2
 8007756:	f040 80d1 	bne.w	80078fc <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800775a:	f7fd ff21 	bl	80055a0 <HAL_RCC_GetPCLK2Freq>
 800775e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	469a      	mov	sl, r3
 8007764:	f04f 0b00 	mov.w	fp, #0
 8007768:	46d0      	mov	r8, sl
 800776a:	46d9      	mov	r9, fp
 800776c:	eb18 0308 	adds.w	r3, r8, r8
 8007770:	eb49 0409 	adc.w	r4, r9, r9
 8007774:	4698      	mov	r8, r3
 8007776:	46a1      	mov	r9, r4
 8007778:	eb18 080a 	adds.w	r8, r8, sl
 800777c:	eb49 090b 	adc.w	r9, r9, fp
 8007780:	f04f 0100 	mov.w	r1, #0
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800778c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007790:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007794:	4688      	mov	r8, r1
 8007796:	4691      	mov	r9, r2
 8007798:	eb1a 0508 	adds.w	r5, sl, r8
 800779c:	eb4b 0609 	adc.w	r6, fp, r9
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	4619      	mov	r1, r3
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	0094      	lsls	r4, r2, #2
 80077b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077b8:	008b      	lsls	r3, r1, #2
 80077ba:	461a      	mov	r2, r3
 80077bc:	4623      	mov	r3, r4
 80077be:	4628      	mov	r0, r5
 80077c0:	4631      	mov	r1, r6
 80077c2:	f7f8 fd31 	bl	8000228 <__aeabi_uldivmod>
 80077c6:	4603      	mov	r3, r0
 80077c8:	460c      	mov	r4, r1
 80077ca:	461a      	mov	r2, r3
 80077cc:	4bba      	ldr	r3, [pc, #744]	; (8007ab8 <UART_SetConfig+0x72c>)
 80077ce:	fba3 2302 	umull	r2, r3, r3, r2
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	469b      	mov	fp, r3
 80077dc:	f04f 0c00 	mov.w	ip, #0
 80077e0:	46d9      	mov	r9, fp
 80077e2:	46e2      	mov	sl, ip
 80077e4:	eb19 0309 	adds.w	r3, r9, r9
 80077e8:	eb4a 040a 	adc.w	r4, sl, sl
 80077ec:	4699      	mov	r9, r3
 80077ee:	46a2      	mov	sl, r4
 80077f0:	eb19 090b 	adds.w	r9, r9, fp
 80077f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077f8:	f04f 0100 	mov.w	r1, #0
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007804:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007808:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800780c:	4689      	mov	r9, r1
 800780e:	4692      	mov	sl, r2
 8007810:	eb1b 0509 	adds.w	r5, fp, r9
 8007814:	eb4c 060a 	adc.w	r6, ip, sl
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4619      	mov	r1, r3
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	f04f 0400 	mov.w	r4, #0
 800782a:	0094      	lsls	r4, r2, #2
 800782c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007830:	008b      	lsls	r3, r1, #2
 8007832:	461a      	mov	r2, r3
 8007834:	4623      	mov	r3, r4
 8007836:	4628      	mov	r0, r5
 8007838:	4631      	mov	r1, r6
 800783a:	f7f8 fcf5 	bl	8000228 <__aeabi_uldivmod>
 800783e:	4603      	mov	r3, r0
 8007840:	460c      	mov	r4, r1
 8007842:	461a      	mov	r2, r3
 8007844:	4b9c      	ldr	r3, [pc, #624]	; (8007ab8 <UART_SetConfig+0x72c>)
 8007846:	fba3 1302 	umull	r1, r3, r3, r2
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	2164      	movs	r1, #100	; 0x64
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	3332      	adds	r3, #50	; 0x32
 8007858:	4a97      	ldr	r2, [pc, #604]	; (8007ab8 <UART_SetConfig+0x72c>)
 800785a:	fba2 2303 	umull	r2, r3, r2, r3
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007864:	4498      	add	r8, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	469b      	mov	fp, r3
 800786a:	f04f 0c00 	mov.w	ip, #0
 800786e:	46d9      	mov	r9, fp
 8007870:	46e2      	mov	sl, ip
 8007872:	eb19 0309 	adds.w	r3, r9, r9
 8007876:	eb4a 040a 	adc.w	r4, sl, sl
 800787a:	4699      	mov	r9, r3
 800787c:	46a2      	mov	sl, r4
 800787e:	eb19 090b 	adds.w	r9, r9, fp
 8007882:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007886:	f04f 0100 	mov.w	r1, #0
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007892:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007896:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800789a:	4689      	mov	r9, r1
 800789c:	4692      	mov	sl, r2
 800789e:	eb1b 0509 	adds.w	r5, fp, r9
 80078a2:	eb4c 060a 	adc.w	r6, ip, sl
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4619      	mov	r1, r3
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	f04f 0400 	mov.w	r4, #0
 80078b8:	0094      	lsls	r4, r2, #2
 80078ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078be:	008b      	lsls	r3, r1, #2
 80078c0:	461a      	mov	r2, r3
 80078c2:	4623      	mov	r3, r4
 80078c4:	4628      	mov	r0, r5
 80078c6:	4631      	mov	r1, r6
 80078c8:	f7f8 fcae 	bl	8000228 <__aeabi_uldivmod>
 80078cc:	4603      	mov	r3, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	461a      	mov	r2, r3
 80078d2:	4b79      	ldr	r3, [pc, #484]	; (8007ab8 <UART_SetConfig+0x72c>)
 80078d4:	fba3 1302 	umull	r1, r3, r3, r2
 80078d8:	095b      	lsrs	r3, r3, #5
 80078da:	2164      	movs	r1, #100	; 0x64
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	3332      	adds	r3, #50	; 0x32
 80078e6:	4a74      	ldr	r2, [pc, #464]	; (8007ab8 <UART_SetConfig+0x72c>)
 80078e8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	f003 020f 	and.w	r2, r3, #15
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4442      	add	r2, r8
 80078f8:	609a      	str	r2, [r3, #8]
 80078fa:	e0d0      	b.n	8007a9e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 80078fc:	f7fd fe3c 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8007900:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	469a      	mov	sl, r3
 8007906:	f04f 0b00 	mov.w	fp, #0
 800790a:	46d0      	mov	r8, sl
 800790c:	46d9      	mov	r9, fp
 800790e:	eb18 0308 	adds.w	r3, r8, r8
 8007912:	eb49 0409 	adc.w	r4, r9, r9
 8007916:	4698      	mov	r8, r3
 8007918:	46a1      	mov	r9, r4
 800791a:	eb18 080a 	adds.w	r8, r8, sl
 800791e:	eb49 090b 	adc.w	r9, r9, fp
 8007922:	f04f 0100 	mov.w	r1, #0
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800792e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007932:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007936:	4688      	mov	r8, r1
 8007938:	4691      	mov	r9, r2
 800793a:	eb1a 0508 	adds.w	r5, sl, r8
 800793e:	eb4b 0609 	adc.w	r6, fp, r9
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	4619      	mov	r1, r3
 8007948:	f04f 0200 	mov.w	r2, #0
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	f04f 0400 	mov.w	r4, #0
 8007954:	0094      	lsls	r4, r2, #2
 8007956:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800795a:	008b      	lsls	r3, r1, #2
 800795c:	461a      	mov	r2, r3
 800795e:	4623      	mov	r3, r4
 8007960:	4628      	mov	r0, r5
 8007962:	4631      	mov	r1, r6
 8007964:	f7f8 fc60 	bl	8000228 <__aeabi_uldivmod>
 8007968:	4603      	mov	r3, r0
 800796a:	460c      	mov	r4, r1
 800796c:	461a      	mov	r2, r3
 800796e:	4b52      	ldr	r3, [pc, #328]	; (8007ab8 <UART_SetConfig+0x72c>)
 8007970:	fba3 2302 	umull	r2, r3, r3, r2
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	469b      	mov	fp, r3
 800797e:	f04f 0c00 	mov.w	ip, #0
 8007982:	46d9      	mov	r9, fp
 8007984:	46e2      	mov	sl, ip
 8007986:	eb19 0309 	adds.w	r3, r9, r9
 800798a:	eb4a 040a 	adc.w	r4, sl, sl
 800798e:	4699      	mov	r9, r3
 8007990:	46a2      	mov	sl, r4
 8007992:	eb19 090b 	adds.w	r9, r9, fp
 8007996:	eb4a 0a0c 	adc.w	sl, sl, ip
 800799a:	f04f 0100 	mov.w	r1, #0
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079ae:	4689      	mov	r9, r1
 80079b0:	4692      	mov	sl, r2
 80079b2:	eb1b 0509 	adds.w	r5, fp, r9
 80079b6:	eb4c 060a 	adc.w	r6, ip, sl
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	4619      	mov	r1, r3
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	f04f 0400 	mov.w	r4, #0
 80079cc:	0094      	lsls	r4, r2, #2
 80079ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079d2:	008b      	lsls	r3, r1, #2
 80079d4:	461a      	mov	r2, r3
 80079d6:	4623      	mov	r3, r4
 80079d8:	4628      	mov	r0, r5
 80079da:	4631      	mov	r1, r6
 80079dc:	f7f8 fc24 	bl	8000228 <__aeabi_uldivmod>
 80079e0:	4603      	mov	r3, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	461a      	mov	r2, r3
 80079e6:	4b34      	ldr	r3, [pc, #208]	; (8007ab8 <UART_SetConfig+0x72c>)
 80079e8:	fba3 1302 	umull	r1, r3, r3, r2
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	2164      	movs	r1, #100	; 0x64
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	3332      	adds	r3, #50	; 0x32
 80079fa:	4a2f      	ldr	r2, [pc, #188]	; (8007ab8 <UART_SetConfig+0x72c>)
 80079fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a06:	4498      	add	r8, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	469b      	mov	fp, r3
 8007a0c:	f04f 0c00 	mov.w	ip, #0
 8007a10:	46d9      	mov	r9, fp
 8007a12:	46e2      	mov	sl, ip
 8007a14:	eb19 0309 	adds.w	r3, r9, r9
 8007a18:	eb4a 040a 	adc.w	r4, sl, sl
 8007a1c:	4699      	mov	r9, r3
 8007a1e:	46a2      	mov	sl, r4
 8007a20:	eb19 090b 	adds.w	r9, r9, fp
 8007a24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a28:	f04f 0100 	mov.w	r1, #0
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a3c:	4689      	mov	r9, r1
 8007a3e:	4692      	mov	sl, r2
 8007a40:	eb1b 0509 	adds.w	r5, fp, r9
 8007a44:	eb4c 060a 	adc.w	r6, ip, sl
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	f04f 0400 	mov.w	r4, #0
 8007a5a:	0094      	lsls	r4, r2, #2
 8007a5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a60:	008b      	lsls	r3, r1, #2
 8007a62:	461a      	mov	r2, r3
 8007a64:	4623      	mov	r3, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	4631      	mov	r1, r6
 8007a6a:	f7f8 fbdd 	bl	8000228 <__aeabi_uldivmod>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b10      	ldr	r3, [pc, #64]	; (8007ab8 <UART_SetConfig+0x72c>)
 8007a76:	fba3 1302 	umull	r1, r3, r3, r2
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	2164      	movs	r1, #100	; 0x64
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	3332      	adds	r3, #50	; 0x32
 8007a88:	4a0b      	ldr	r2, [pc, #44]	; (8007ab8 <UART_SetConfig+0x72c>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4442      	add	r2, r8
 8007a9a:	609a      	str	r2, [r3, #8]
}
 8007a9c:	e7ff      	b.n	8007a9e <UART_SetConfig+0x712>
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	40011000 	.word	0x40011000
 8007aac:	40011400 	.word	0x40011400
 8007ab0:	40011800 	.word	0x40011800
 8007ab4:	40011c00 	.word	0x40011c00
 8007ab8:	51eb851f 	.word	0x51eb851f

08007abc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad4:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <FSMC_NORSRAM_Init+0xdc>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ae6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007aec:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007af2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007af8:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8007afe:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007b04:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007b0a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007b10:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007b16:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8007b1c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8007b22:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8007b28:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8007b2e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d103      	bne.n	8007b46 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b44:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68f9      	ldr	r1, [r7, #12]
 8007b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5a:	d10a      	bne.n	8007b72 <FSMC_NORSRAM_Init+0xb6>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d006      	beq.n	8007b72 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d006      	beq.n	8007b88 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	ffc00480 	.word	0xffc00480

08007b9c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007bbe:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007bca:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007bd2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007bda:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007be4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	3b02      	subs	r3, #2
 8007bec:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007bee:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6979      	ldr	r1, [r7, #20]
 8007c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c14:	d10e      	bne.n	8007c34 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c1e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	051b      	lsls	r3, r3, #20
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c5c:	d122      	bne.n	8007ca4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c66:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007c7a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007c82:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8007c8a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007c90:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ca2:	e005      	b.n	8007cb0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	cff00000 	.word	0xcff00000

08007cc4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	f107 001c 	add.w	r0, r7, #28
 8007cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007cda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007cde:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007ce2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007ce6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007cea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007cee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007cfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	b004      	add	sp, #16
 8007d18:	4770      	bx	lr

08007d1a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007d42:	2002      	movs	r0, #2
 8007d44:	f7f9 fff0 	bl	8001d28 <HAL_Delay>
  
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d8c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007d92:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007d98:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007da8:	f023 030f 	bic.w	r3, r3, #15
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	b2db      	uxtb	r3, r3
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3314      	adds	r3, #20
 8007dea:	461a      	mov	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4413      	add	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
}  
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e28:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007e2e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007e34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0

}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b088      	sub	sp, #32
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007e68:	2310      	movs	r3, #16
 8007e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e7a:	f107 0308 	add.w	r3, r7, #8
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff ff74 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8a:	2110      	movs	r1, #16
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f975 	bl	800817c <SDMMC_GetCmdResp1>
 8007e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e94:	69fb      	ldr	r3, [r7, #28]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b08a      	sub	sp, #40	; 0x28
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007eae:	2307      	movs	r3, #7
 8007eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ebe:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ec0:	f107 0310 	add.w	r3, r7, #16
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff ff51 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed0:	2107      	movs	r1, #7
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f952 	bl	800817c <SDMMC_GetCmdResp1>
 8007ed8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3728      	adds	r7, #40	; 0x28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f02:	f107 0308 	add.w	r3, r7, #8
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff ff30 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f90c 	bl	800812c <SDMMC_GetCmdError>
 8007f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f16:	69fb      	ldr	r3, [r7, #28]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3720      	adds	r7, #32
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f28:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f2e:	2308      	movs	r3, #8
 8007f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f32:	2340      	movs	r3, #64	; 0x40
 8007f34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f40:	f107 0308 	add.w	r3, r7, #8
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff ff11 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 faf5 	bl	800853c <SDMMC_GetCmdResp7>
 8007f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f54:	69fb      	ldr	r3, [r7, #28]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b088      	sub	sp, #32
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007f6c:	2337      	movs	r3, #55	; 0x37
 8007f6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f70:	2340      	movs	r3, #64	; 0x40
 8007f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f74:	2300      	movs	r3, #0
 8007f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f7e:	f107 0308 	add.w	r3, r7, #8
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff fef2 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8e:	2137      	movs	r1, #55	; 0x37
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8f3 	bl	800817c <SDMMC_GetCmdResp1>
 8007f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f98:	69fb      	ldr	r3, [r7, #28]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b088      	sub	sp, #32
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007fb8:	2329      	movs	r3, #41	; 0x29
 8007fba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fca:	f107 0308 	add.w	r3, r7, #8
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fecc 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa02 	bl	80083e0 <SDMMC_GetCmdResp3>
 8007fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fde:	69fb      	ldr	r3, [r7, #28]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007ff6:	2306      	movs	r3, #6
 8007ff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ffa:	2340      	movs	r3, #64	; 0x40
 8007ffc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008006:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008008:	f107 0308 	add.w	r3, r7, #8
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fead 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008014:	f241 3288 	movw	r2, #5000	; 0x1388
 8008018:	2106      	movs	r1, #6
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f8ae 	bl	800817c <SDMMC_GetCmdResp1>
 8008020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008022:	69fb      	ldr	r3, [r7, #28]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008038:	2333      	movs	r3, #51	; 0x33
 800803a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008048:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fe8c 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008056:	f241 3288 	movw	r2, #5000	; 0x1388
 800805a:	2133      	movs	r1, #51	; 0x33
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f88d 	bl	800817c <SDMMC_GetCmdResp1>
 8008062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008064:	69fb      	ldr	r3, [r7, #28]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3720      	adds	r7, #32
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800807a:	2302      	movs	r3, #2
 800807c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800807e:	23c0      	movs	r3, #192	; 0xc0
 8008080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008082:	2300      	movs	r3, #0
 8008084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800808a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800808c:	f107 0308 	add.w	r3, r7, #8
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff fe6b 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f95b 	bl	8008354 <SDMMC_GetCmdResp2>
 800809e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080a0:	69fb      	ldr	r3, [r7, #28]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3720      	adds	r7, #32
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b088      	sub	sp, #32
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80080b8:	2309      	movs	r3, #9
 80080ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80080bc:	23c0      	movs	r3, #192	; 0xc0
 80080be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080ca:	f107 0308 	add.w	r3, r7, #8
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fe4c 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f93c 	bl	8008354 <SDMMC_GetCmdResp2>
 80080dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080de:	69fb      	ldr	r3, [r7, #28]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80080f6:	2303      	movs	r3, #3
 80080f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008106:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff fe2d 	bl	8007d6e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	2103      	movs	r1, #3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f99b 	bl	8008454 <SDMMC_GetCmdResp6>
 800811e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008120:	69fb      	ldr	r3, [r7, #28]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800812c:	b490      	push	{r4, r7}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008134:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <SDMMC_GetCmdError+0x48>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a0f      	ldr	r2, [pc, #60]	; (8008178 <SDMMC_GetCmdError+0x4c>)
 800813a:	fba2 2303 	umull	r2, r3, r2, r3
 800813e:	0a5b      	lsrs	r3, r3, #9
 8008140:	f241 3288 	movw	r2, #5000	; 0x1388
 8008144:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008148:	4623      	mov	r3, r4
 800814a:	1e5c      	subs	r4, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008154:	e009      	b.n	800816a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f2      	beq.n	8008148 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	22c5      	movs	r2, #197	; 0xc5
 8008166:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bc90      	pop	{r4, r7}
 8008172:	4770      	bx	lr
 8008174:	20000004 	.word	0x20000004
 8008178:	10624dd3 	.word	0x10624dd3

0800817c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800817c:	b590      	push	{r4, r7, lr}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	460b      	mov	r3, r1
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800818a:	4b6f      	ldr	r3, [pc, #444]	; (8008348 <SDMMC_GetCmdResp1+0x1cc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a6f      	ldr	r2, [pc, #444]	; (800834c <SDMMC_GetCmdResp1+0x1d0>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	0a5b      	lsrs	r3, r3, #9
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800819c:	4623      	mov	r3, r4
 800819e:	1e5c      	subs	r4, r3, #1
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081a8:	e0c9      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ae:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <SDMMC_GetCmdResp1+0x20>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1eb      	bne.n	800819c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2204      	movs	r2, #4
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081d6:	2304      	movs	r3, #4
 80081d8:	e0b1      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	f003 0301 	and.w	r3, r3, #1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d004      	beq.n	80081f0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e0a6      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	22c5      	movs	r2, #197	; 0xc5
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7ff fde3 	bl	8007dc2 <SDIO_GetCommandResponse>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	4293      	cmp	r3, r2
 8008204:	d001      	beq.n	800820a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008206:	2301      	movs	r3, #1
 8008208:	e099      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800820a:	2100      	movs	r1, #0
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fde5 	bl	8007ddc <SDIO_GetResponse>
 8008212:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4b4e      	ldr	r3, [pc, #312]	; (8008350 <SDMMC_GetCmdResp1+0x1d4>)
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800821e:	2300      	movs	r3, #0
 8008220:	e08d      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	da02      	bge.n	800822e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800822c:	e087      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	e080      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008246:	2380      	movs	r3, #128	; 0x80
 8008248:	e079      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008258:	e071      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008268:	e069      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008278:	e061      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008288:	e059      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008298:	e051      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082a8:	e049      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80082b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80082b8:	e041      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80082c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c8:	e039      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80082d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082d8:	e031      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80082e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80082e8:	e029      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80082f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80082f8:	e021      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008308:	e019      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008318:	e011      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008328:	e009      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008338:	e001      	b.n	800833e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800833a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	bd90      	pop	{r4, r7, pc}
 8008346:	bf00      	nop
 8008348:	20000004 	.word	0x20000004
 800834c:	10624dd3 	.word	0x10624dd3
 8008350:	fdffe008 	.word	0xfdffe008

08008354 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008354:	b490      	push	{r4, r7}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800835c:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <SDMMC_GetCmdResp2+0x84>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1e      	ldr	r2, [pc, #120]	; (80083dc <SDMMC_GetCmdResp2+0x88>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0a5b      	lsrs	r3, r3, #9
 8008368:	f241 3288 	movw	r2, #5000	; 0x1388
 800836c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008370:	4623      	mov	r3, r4
 8008372:	1e5c      	subs	r4, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d102      	bne.n	800837e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800837c:	e026      	b.n	80083cc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008382:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f0      	beq.n	8008370 <SDMMC_GetCmdResp2+0x1c>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1eb      	bne.n	8008370 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2204      	movs	r2, #4
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083aa:	2304      	movs	r3, #4
 80083ac:	e00e      	b.n	80083cc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e003      	b.n	80083cc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	22c5      	movs	r2, #197	; 0xc5
 80083c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bc90      	pop	{r4, r7}
 80083d4:	4770      	bx	lr
 80083d6:	bf00      	nop
 80083d8:	20000004 	.word	0x20000004
 80083dc:	10624dd3 	.word	0x10624dd3

080083e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80083e0:	b490      	push	{r4, r7}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083e8:	4b18      	ldr	r3, [pc, #96]	; (800844c <SDMMC_GetCmdResp3+0x6c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a18      	ldr	r2, [pc, #96]	; (8008450 <SDMMC_GetCmdResp3+0x70>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	0a5b      	lsrs	r3, r3, #9
 80083f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80083fc:	4623      	mov	r3, r4
 80083fe:	1e5c      	subs	r4, r3, #1
 8008400:	2b00      	cmp	r3, #0
 8008402:	d102      	bne.n	800840a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008408:	e01b      	b.n	8008442 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0f0      	beq.n	80083fc <SDMMC_GetCmdResp3+0x1c>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1eb      	bne.n	80083fc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2204      	movs	r2, #4
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008436:	2304      	movs	r3, #4
 8008438:	e003      	b.n	8008442 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	22c5      	movs	r2, #197	; 0xc5
 800843e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bc90      	pop	{r4, r7}
 800844a:	4770      	bx	lr
 800844c:	20000004 	.word	0x20000004
 8008450:	10624dd3 	.word	0x10624dd3

08008454 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008454:	b590      	push	{r4, r7, lr}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	460b      	mov	r3, r1
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008462:	4b34      	ldr	r3, [pc, #208]	; (8008534 <SDMMC_GetCmdResp6+0xe0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a34      	ldr	r2, [pc, #208]	; (8008538 <SDMMC_GetCmdResp6+0xe4>)
 8008468:	fba2 2303 	umull	r2, r3, r2, r3
 800846c:	0a5b      	lsrs	r3, r3, #9
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008476:	4623      	mov	r3, r4
 8008478:	1e5c      	subs	r4, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800847e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008482:	e052      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0f0      	beq.n	8008476 <SDMMC_GetCmdResp6+0x22>
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1eb      	bne.n	8008476 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d004      	beq.n	80084b4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2204      	movs	r2, #4
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084b0:	2304      	movs	r3, #4
 80084b2:	e03a      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e02f      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fc79 	bl	8007dc2 <SDIO_GetCommandResponse>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d001      	beq.n	80084de <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084da:	2301      	movs	r3, #1
 80084dc:	e025      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	22c5      	movs	r2, #197	; 0xc5
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80084e4:	2100      	movs	r1, #0
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fc78 	bl	8007ddc <SDIO_GetResponse>
 80084ec:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d106      	bne.n	8008506 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	0c1b      	lsrs	r3, r3, #16
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008502:	2300      	movs	r3, #0
 8008504:	e011      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008514:	e009      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008524:	e001      	b.n	800852a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800852a:	4618      	mov	r0, r3
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	bd90      	pop	{r4, r7, pc}
 8008532:	bf00      	nop
 8008534:	20000004 	.word	0x20000004
 8008538:	10624dd3 	.word	0x10624dd3

0800853c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800853c:	b490      	push	{r4, r7}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008544:	4b21      	ldr	r3, [pc, #132]	; (80085cc <SDMMC_GetCmdResp7+0x90>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a21      	ldr	r2, [pc, #132]	; (80085d0 <SDMMC_GetCmdResp7+0x94>)
 800854a:	fba2 2303 	umull	r2, r3, r2, r3
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008558:	4623      	mov	r3, r4
 800855a:	1e5c      	subs	r4, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008564:	e02c      	b.n	80085c0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <SDMMC_GetCmdResp7+0x1c>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1eb      	bne.n	8008558 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d004      	beq.n	8008596 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2204      	movs	r2, #4
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008592:	2304      	movs	r3, #4
 8008594:	e014      	b.n	80085c0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e009      	b.n	80085c0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2240      	movs	r2, #64	; 0x40
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80085be:	2300      	movs	r3, #0
  
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc90      	pop	{r4, r7}
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	20000004 	.word	0x20000004
 80085d0:	10624dd3 	.word	0x10624dd3

080085d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085d4:	b084      	sub	sp, #16
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	f107 001c 	add.w	r0, r7, #28
 80085e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d122      	bne.n	8008632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d105      	bne.n	8008626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f94a 	bl	80088c0 <USB_CoreReset>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
 8008630:	e01a      	b.n	8008668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f93e 	bl	80088c0 <USB_CoreReset>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
 800865a:	e005      	b.n	8008668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	2b01      	cmp	r3, #1
 800866c:	d10b      	bne.n	8008686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f043 0206 	orr.w	r2, r3, #6
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f043 0220 	orr.w	r2, r3, #32
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008692:	b004      	add	sp, #16
 8008694:	4770      	bx	lr

08008696 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f043 0201 	orr.w	r2, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f023 0201 	bic.w	r2, r3, #1
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d106      	bne.n	8008706 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	60da      	str	r2, [r3, #12]
 8008704:	e00b      	b.n	800871e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d106      	bne.n	800871a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60da      	str	r2, [r3, #12]
 8008718:	e001      	b.n	800871e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e003      	b.n	8008726 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800871e:	2032      	movs	r0, #50	; 0x32
 8008720:	f7f9 fb02 	bl	8001d28 <HAL_Delay>

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	019b      	lsls	r3, r3, #6
 8008742:	f043 0220 	orr.w	r2, r3, #32
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4a09      	ldr	r2, [pc, #36]	; (8008778 <USB_FlushTxFifo+0x48>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d901      	bls.n	800875c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e006      	b.n	800876a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b20      	cmp	r3, #32
 8008766:	d0f0      	beq.n	800874a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	00030d40 	.word	0x00030d40

0800877c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2210      	movs	r2, #16
 800878c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4a09      	ldr	r2, [pc, #36]	; (80087bc <USB_FlushRxFifo+0x40>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d901      	bls.n	80087a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e006      	b.n	80087ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f003 0310 	and.w	r3, r3, #16
 80087a8:	2b10      	cmp	r3, #16
 80087aa:	d0f0      	beq.n	800878e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	00030d40 	.word	0x00030d40

080087c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b089      	sub	sp, #36	; 0x24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4611      	mov	r1, r2
 80087cc:	461a      	mov	r2, r3
 80087ce:	460b      	mov	r3, r1
 80087d0:	71fb      	strb	r3, [r7, #7]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80087de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d11a      	bne.n	800881c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80087e6:	88bb      	ldrh	r3, [r7, #4]
 80087e8:	3303      	adds	r3, #3
 80087ea:	089b      	lsrs	r3, r3, #2
 80087ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087ee:	2300      	movs	r3, #0
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	e00f      	b.n	8008814 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	031a      	lsls	r2, r3, #12
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008800:	461a      	mov	r2, r3
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3304      	adds	r3, #4
 800880c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	3301      	adds	r3, #1
 8008812:	61bb      	str	r3, [r7, #24]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	429a      	cmp	r2, r3
 800881a:	d3eb      	bcc.n	80087f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3724      	adds	r7, #36	; 0x24
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800882a:	b480      	push	{r7}
 800882c:	b089      	sub	sp, #36	; 0x24
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	4613      	mov	r3, r2
 8008836:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008840:	88fb      	ldrh	r3, [r7, #6]
 8008842:	3303      	adds	r3, #3
 8008844:	089b      	lsrs	r3, r3, #2
 8008846:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008848:	2300      	movs	r3, #0
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	e00b      	b.n	8008866 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	601a      	str	r2, [r3, #0]
    pDest++;
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	3304      	adds	r3, #4
 800885e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	3301      	adds	r3, #1
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	429a      	cmp	r2, r3
 800886c:	d3ef      	bcc.n	800884e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800886e:	69fb      	ldr	r3, [r7, #28]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3724      	adds	r7, #36	; 0x24
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4013      	ands	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008894:	68fb      	ldr	r3, [r7, #12]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	f003 0301 	and.w	r3, r3, #1
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
	...

080088c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	3301      	adds	r3, #1
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	4a13      	ldr	r2, [pc, #76]	; (8008924 <USB_CoreReset+0x64>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d901      	bls.n	80088de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e01b      	b.n	8008916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	daf2      	bge.n	80088cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	f043 0201 	orr.w	r2, r3, #1
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <USB_CoreReset+0x64>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d901      	bls.n	8008908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e006      	b.n	8008916 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b01      	cmp	r3, #1
 8008912:	d0f0      	beq.n	80088f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	00030d40 	.word	0x00030d40

08008928 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008928:	b084      	sub	sp, #16
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	f107 001c 	add.w	r0, r7, #28
 8008936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008944:	461a      	mov	r2, r3
 8008946:	2300      	movs	r3, #0
 8008948:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d018      	beq.n	80089a0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	2b01      	cmp	r3, #1
 8008972:	d10a      	bne.n	800898a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008982:	f043 0304 	orr.w	r3, r3, #4
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e014      	b.n	80089b4 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008998:	f023 0304 	bic.w	r3, r3, #4
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e009      	b.n	80089b4 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ae:	f023 0304 	bic.w	r3, r3, #4
 80089b2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80089b4:	2110      	movs	r1, #16
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff feba 	bl	8008730 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff fedd 	bl	800877c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e015      	b.n	80089f4 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d4:	461a      	mov	r2, r3
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295
 80089da:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	461a      	mov	r2, r3
 80089ea:	2300      	movs	r3, #0
 80089ec:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3301      	adds	r3, #1
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d3e5      	bcc.n	80089c8 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80089fc:	2101      	movs	r1, #1
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f8ac 	bl	8008b5c <USB_DriveVbus>

  HAL_Delay(200U);
 8008a04:	20c8      	movs	r0, #200	; 0xc8
 8008a06:	f7f9 f98f 	bl	8001d28 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f04f 32ff 	mov.w	r2, #4294967295
 8008a16:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a14      	ldr	r2, [pc, #80]	; (8008a80 <USB_HostInit+0x158>)
 8008a30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a13      	ldr	r2, [pc, #76]	; (8008a84 <USB_HostInit+0x15c>)
 8008a36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008a3a:	e009      	b.n	8008a50 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2280      	movs	r2, #128	; 0x80
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <USB_HostInit+0x160>)
 8008a46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <USB_HostInit+0x164>)
 8008a4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d105      	bne.n	8008a62 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	f043 0210 	orr.w	r2, r3, #16
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <USB_HostInit+0x168>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a7a:	b004      	add	sp, #16
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	01000200 	.word	0x01000200
 8008a84:	00e00300 	.word	0x00e00300
 8008a88:	00600080 	.word	0x00600080
 8008a8c:	004000e0 	.word	0x004000e0
 8008a90:	a3200008 	.word	0xa3200008

08008a94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ab2:	f023 0303 	bic.w	r3, r3, #3
 8008ab6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	68f9      	ldr	r1, [r7, #12]
 8008ac8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008acc:	4313      	orrs	r3, r2
 8008ace:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d107      	bne.n	8008ae6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008adc:	461a      	mov	r2, r3
 8008ade:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008ae2:	6053      	str	r3, [r2, #4]
 8008ae4:	e009      	b.n	8008afa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d106      	bne.n	8008afa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af2:	461a      	mov	r2, r3
 8008af4:	f241 7370 	movw	r3, #6000	; 0x1770
 8008af8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b36:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b38:	2064      	movs	r0, #100	; 0x64
 8008b3a:	f7f9 f8f5 	bl	8001d28 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008b4c:	200a      	movs	r0, #10
 8008b4e:	f7f9 f8eb 	bl	8001d28 <HAL_Delay>

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d109      	bne.n	8008ba0 <USB_DriveVbus+0x44>
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d106      	bne.n	8008ba0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b9e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008baa:	d109      	bne.n	8008bc0 <USB_DriveVbus+0x64>
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bbe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	0c5b      	lsrs	r3, r3, #17
 8008bec:	f003 0303 	and.w	r3, r3, #3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	b29b      	uxth	r3, r3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	4608      	mov	r0, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	4603      	mov	r3, r0
 8008c30:	70fb      	strb	r3, [r7, #3]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70bb      	strb	r3, [r7, #2]
 8008c36:	4613      	mov	r3, r2
 8008c38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f04f 33ff 	mov.w	r3, #4294967295
 8008c54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008c56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d87e      	bhi.n	8008d5c <USB_HC_Init+0x13c>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <USB_HC_Init+0x44>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008d1f 	.word	0x08008d1f
 8008c6c:	08008c75 	.word	0x08008c75
 8008c70:	08008ce1 	.word	0x08008ce1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c80:	461a      	mov	r2, r3
 8008c82:	f240 439d 	movw	r3, #1181	; 0x49d
 8008c86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008c88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	da10      	bge.n	8008cb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	78fa      	ldrb	r2, [r7, #3]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cae:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008cb0:	e057      	b.n	8008d62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d051      	beq.n	8008d62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	0151      	lsls	r1, r2, #5
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	440a      	add	r2, r1
 8008cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008cdc:	60d3      	str	r3, [r2, #12]
      break;
 8008cde:	e040      	b.n	8008d62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cec:	461a      	mov	r2, r3
 8008cee:	f240 639d 	movw	r3, #1693	; 0x69d
 8008cf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008cf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da34      	bge.n	8008d66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008d1c:	e023      	b.n	8008d66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	f240 2325 	movw	r3, #549	; 0x225
 8008d30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	da17      	bge.n	8008d6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008d58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008d5a:	e006      	b.n	8008d6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d60:	e004      	b.n	8008d6c <USB_HC_Init+0x14c>
      break;
 8008d62:	bf00      	nop
 8008d64:	e002      	b.n	8008d6c <USB_HC_Init+0x14c>
      break;
 8008d66:	bf00      	nop
 8008d68:	e000      	b.n	8008d6c <USB_HC_Init+0x14c>
      break;
 8008d6a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d86:	4313      	orrs	r3, r2
 8008d88:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008d96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da03      	bge.n	8008da6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	e001      	b.n	8008daa <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d103      	bne.n	8008dba <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e001      	b.n	8008dbe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008dbe:	787b      	ldrb	r3, [r7, #1]
 8008dc0:	059b      	lsls	r3, r3, #22
 8008dc2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008dc6:	78bb      	ldrb	r3, [r7, #2]
 8008dc8:	02db      	lsls	r3, r3, #11
 8008dca:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008dce:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dd4:	049b      	lsls	r3, r3, #18
 8008dd6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008dda:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008ddc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008de2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	0159      	lsls	r1, r3, #5
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	440b      	add	r3, r1
 8008df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008dfa:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008dfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d10f      	bne.n	8008e24 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	78fa      	ldrb	r2, [r7, #3]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e22:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop

08008e34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	; 0x30
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e50:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d028      	beq.n	8008eb0 <USB_HC_StartXfer+0x7c>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	791b      	ldrb	r3, [r3, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d124      	bne.n	8008eb0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10b      	bne.n	8008e84 <USB_HC_StartXfer+0x50>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	795b      	ldrb	r3, [r3, #5]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d107      	bne.n	8008e84 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 fa30 	bl	80092e0 <USB_DoPing>
      return HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e114      	b.n	80090ae <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d112      	bne.n	8008eb0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	69fa      	ldr	r2, [r7, #28]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	6a3a      	ldr	r2, [r7, #32]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ea4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008ea8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d018      	beq.n	8008eea <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	8912      	ldrh	r2, [r2, #8]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	8912      	ldrh	r2, [r2, #8]
 8008ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ecc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008ece:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ed0:	8b7b      	ldrh	r3, [r7, #26]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d90b      	bls.n	8008eee <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008ed6:	8b7b      	ldrh	r3, [r7, #26]
 8008ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008eda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	8912      	ldrh	r2, [r2, #8]
 8008ee0:	fb02 f203 	mul.w	r2, r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	611a      	str	r2, [r3, #16]
 8008ee8:	e001      	b.n	8008eee <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008eea:	2301      	movs	r3, #1
 8008eec:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	78db      	ldrb	r3, [r3, #3]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	8912      	ldrh	r2, [r2, #8]
 8008efc:	fb02 f203 	mul.w	r2, r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f0e:	04d9      	lsls	r1, r3, #19
 8008f10:	4b69      	ldr	r3, [pc, #420]	; (80090b8 <USB_HC_StartXfer+0x284>)
 8008f12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	7a9b      	ldrb	r3, [r3, #10]
 8008f1a:	075b      	lsls	r3, r3, #29
 8008f1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f20:	69f9      	ldr	r1, [r7, #28]
 8008f22:	0148      	lsls	r0, r1, #5
 8008f24:	6a39      	ldr	r1, [r7, #32]
 8008f26:	4401      	add	r1, r0
 8008f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	68d9      	ldr	r1, [r3, #12]
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f46:	460a      	mov	r2, r1
 8008f48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bf0c      	ite	eq
 8008f5a:	2301      	moveq	r3, #1
 8008f5c:	2300      	movne	r3, #0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	6a3a      	ldr	r2, [r7, #32]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	7e7b      	ldrb	r3, [r7, #25]
 8008f92:	075b      	lsls	r3, r3, #29
 8008f94:	69f9      	ldr	r1, [r7, #28]
 8008f96:	0148      	lsls	r0, r1, #5
 8008f98:	6a39      	ldr	r1, [r7, #32]
 8008f9a:	4401      	add	r1, r0
 8008f9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a42      	ldr	r2, [pc, #264]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fb4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008fb6:	4b41      	ldr	r3, [pc, #260]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fbe:	4a3f      	ldr	r2, [pc, #252]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fc0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	78db      	ldrb	r3, [r3, #3]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008fca:	4b3c      	ldr	r3, [pc, #240]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fd2:	4a3a      	ldr	r2, [pc, #232]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e005      	b.n	8008fe4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008fd8:	4b38      	ldr	r3, [pc, #224]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fe0:	4a36      	ldr	r2, [pc, #216]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fe2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008fe4:	4b35      	ldr	r3, [pc, #212]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fec:	4a33      	ldr	r2, [pc, #204]	; (80090bc <USB_HC_StartXfer+0x288>)
 8008fee:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	4b2f      	ldr	r3, [pc, #188]	; (80090bc <USB_HC_StartXfer+0x288>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e04f      	b.n	80090ae <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	78db      	ldrb	r3, [r3, #3]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d14a      	bne.n	80090ac <USB_HC_StartXfer+0x278>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d046      	beq.n	80090ac <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	79db      	ldrb	r3, [r3, #7]
 8009022:	2b03      	cmp	r3, #3
 8009024:	d830      	bhi.n	8009088 <USB_HC_StartXfer+0x254>
 8009026:	a201      	add	r2, pc, #4	; (adr r2, 800902c <USB_HC_StartXfer+0x1f8>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009061 	.word	0x08009061
 8009034:	0800903d 	.word	0x0800903d
 8009038:	08009061 	.word	0x08009061
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	3303      	adds	r3, #3
 8009042:	089b      	lsrs	r3, r3, #2
 8009044:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009046:	8afa      	ldrh	r2, [r7, #22]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	b29b      	uxth	r3, r3
 800904e:	429a      	cmp	r2, r3
 8009050:	d91c      	bls.n	800908c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	f043 0220 	orr.w	r2, r3, #32
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	619a      	str	r2, [r3, #24]
        }
        break;
 800905e:	e015      	b.n	800908c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	3303      	adds	r3, #3
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800906a:	8afa      	ldrh	r2, [r7, #22]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	b29b      	uxth	r3, r3
 8009076:	429a      	cmp	r2, r3
 8009078:	d90a      	bls.n	8009090 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	619a      	str	r2, [r3, #24]
        }
        break;
 8009086:	e003      	b.n	8009090 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009088:	bf00      	nop
 800908a:	e002      	b.n	8009092 <USB_HC_StartXfer+0x25e>
        break;
 800908c:	bf00      	nop
 800908e:	e000      	b.n	8009092 <USB_HC_StartXfer+0x25e>
        break;
 8009090:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	68d9      	ldr	r1, [r3, #12]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	785a      	ldrb	r2, [r3, #1]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	b298      	uxth	r0, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	4603      	mov	r3, r0
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f7ff fb8a 	bl	80087c0 <USB_WritePacket>
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3728      	adds	r7, #40	; 0x28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	1ff80000 	.word	0x1ff80000
 80090bc:	200000fc 	.word	0x200000fc

080090c0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	b29b      	uxth	r3, r3
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b087      	sub	sp, #28
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	4413      	add	r3, r2
 8009102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	0c9b      	lsrs	r3, r3, #18
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <USB_HC_Halt+0x3a>
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d16c      	bne.n	80091f6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	4413      	add	r3, r2
 8009124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	440a      	add	r2, r1
 8009132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009136:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800913a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d143      	bne.n	80091d0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	0151      	lsls	r1, r2, #5
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	440a      	add	r2, r1
 800915e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009166:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	440a      	add	r2, r1
 800917e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009186:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	4413      	add	r3, r2
 8009190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	440a      	add	r2, r1
 800919e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091a6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3301      	adds	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091b4:	d81d      	bhi.n	80091f2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091cc:	d0ec      	beq.n	80091a8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80091ce:	e080      	b.n	80092d2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091ee:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80091f0:	e06f      	b.n	80092d2 <USB_HC_Halt+0x1f0>
          break;
 80091f2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80091f4:	e06d      	b.n	80092d2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	440a      	add	r2, r1
 800920c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009214:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d143      	bne.n	80092ae <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4413      	add	r3, r2
 800922e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	440a      	add	r2, r1
 800923c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009244:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	4413      	add	r3, r2
 800924e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	440a      	add	r2, r1
 800925c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009264:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	440a      	add	r2, r1
 800927c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009284:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3301      	adds	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009292:	d81d      	bhi.n	80092d0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	4413      	add	r3, r2
 800929c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092aa:	d0ec      	beq.n	8009286 <USB_HC_Halt+0x1a4>
 80092ac:	e011      	b.n	80092d2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	015a      	lsls	r2, r3, #5
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	4413      	add	r3, r2
 80092b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	e000      	b.n	80092d2 <USB_HC_Halt+0x1f0>
          break;
 80092d0:	bf00      	nop
    }
  }

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80092f0:	78fb      	ldrb	r3, [r7, #3]
 80092f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80092f4:	2301      	movs	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	04da      	lsls	r2, r3, #19
 80092fc:	4b15      	ldr	r3, [pc, #84]	; (8009354 <USB_DoPing+0x74>)
 80092fe:	4013      	ands	r3, r2
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	0151      	lsls	r1, r2, #5
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	440a      	add	r2, r1
 8009308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800930c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009310:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	4413      	add	r3, r2
 800931a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009328:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009330:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	4413      	add	r3, r2
 800933a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933e:	461a      	mov	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	371c      	adds	r7, #28
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	1ff80000 	.word	0x1ff80000

08009358 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff f9a5 	bl	80086b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800936e:	2110      	movs	r1, #16
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7ff f9dd 	bl	8008730 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fa00 	bl	800877c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800937c:	2300      	movs	r3, #0
 800937e:	613b      	str	r3, [r7, #16]
 8009380:	e01f      	b.n	80093c2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	4413      	add	r3, r2
 800938a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b6:	461a      	mov	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	3301      	adds	r3, #1
 80093c0:	613b      	str	r3, [r7, #16]
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	2b0f      	cmp	r3, #15
 80093c6:	d9dc      	bls.n	8009382 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80093c8:	2300      	movs	r3, #0
 80093ca:	613b      	str	r3, [r7, #16]
 80093cc:	e034      	b.n	8009438 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009402:	461a      	mov	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	3301      	adds	r3, #1
 800940c:	617b      	str	r3, [r7, #20]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009414:	d80c      	bhi.n	8009430 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	4413      	add	r3, r2
 800941e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800942c:	d0ec      	beq.n	8009408 <USB_StopHost+0xb0>
 800942e:	e000      	b.n	8009432 <USB_StopHost+0xda>
        break;
 8009430:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3301      	adds	r3, #1
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b0f      	cmp	r3, #15
 800943c:	d9c7      	bls.n	80093ce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009444:	461a      	mov	r2, r3
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f04f 32ff 	mov.w	r2, #4294967295
 8009452:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff f91e 	bl	8008696 <USB_EnableGlobalInt>

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009464:	b590      	push	{r4, r7, lr}
 8009466:	b089      	sub	sp, #36	; 0x24
 8009468:	af04      	add	r7, sp, #16
 800946a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800946c:	2301      	movs	r3, #1
 800946e:	2202      	movs	r2, #2
 8009470:	2102      	movs	r1, #2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc68 	bl	8009d48 <USBH_FindInterface>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2bff      	cmp	r3, #255	; 0xff
 8009480:	d002      	beq.n	8009488 <USBH_CDC_InterfaceInit+0x24>
 8009482:	7bfb      	ldrb	r3, [r7, #15]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d901      	bls.n	800948c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009488:	2302      	movs	r3, #2
 800948a:	e13d      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800948c:	7bfb      	ldrb	r3, [r7, #15]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc3d 	bl	8009d10 <USBH_SelectInterface>
 8009496:	4603      	mov	r3, r0
 8009498:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80094a0:	2302      	movs	r3, #2
 80094a2:	e131      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80094aa:	2050      	movs	r0, #80	; 0x50
 80094ac:	f002 fa04 	bl	800b8b8 <malloc>
 80094b0:	4603      	mov	r3, r0
 80094b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80094c4:	2302      	movs	r3, #2
 80094c6:	e11f      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80094c8:	2250      	movs	r2, #80	; 0x50
 80094ca:	2100      	movs	r1, #0
 80094cc:	68b8      	ldr	r0, [r7, #8]
 80094ce:	f002 fa03 	bl	800b8d8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	211a      	movs	r1, #26
 80094d8:	fb01 f303 	mul.w	r3, r1, r3
 80094dc:	4413      	add	r3, r2
 80094de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b25b      	sxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da15      	bge.n	8009516 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	211a      	movs	r1, #26
 80094f0:	fb01 f303 	mul.w	r3, r1, r3
 80094f4:	4413      	add	r3, r2
 80094f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	211a      	movs	r1, #26
 8009506:	fb01 f303 	mul.w	r3, r1, r3
 800950a:	4413      	add	r3, r2
 800950c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009510:	881a      	ldrh	r2, [r3, #0]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 fe36 	bl	800b18e <USBH_AllocPipe>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	7819      	ldrb	r1, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	7858      	ldrb	r0, [r3, #1]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	8952      	ldrh	r2, [r2, #10]
 8009542:	9202      	str	r2, [sp, #8]
 8009544:	2203      	movs	r2, #3
 8009546:	9201      	str	r2, [sp, #4]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4623      	mov	r3, r4
 800954c:	4602      	mov	r2, r0
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 fdee 	bl	800b130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2200      	movs	r2, #0
 800955a:	4619      	mov	r1, r3
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f002 f8fb 	bl	800b758 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009562:	2300      	movs	r3, #0
 8009564:	2200      	movs	r2, #0
 8009566:	210a      	movs	r1, #10
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fbed 	bl	8009d48 <USBH_FindInterface>
 800956e:	4603      	mov	r3, r0
 8009570:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	2bff      	cmp	r3, #255	; 0xff
 8009576:	d002      	beq.n	800957e <USBH_CDC_InterfaceInit+0x11a>
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d901      	bls.n	8009582 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800957e:	2302      	movs	r3, #2
 8009580:	e0c2      	b.n	8009708 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	211a      	movs	r1, #26
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	4413      	add	r3, r2
 800958e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	b25b      	sxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	da16      	bge.n	80095c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	211a      	movs	r1, #26
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	211a      	movs	r1, #26
 80095b6:	fb01 f303 	mul.w	r3, r1, r3
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80095c0:	881a      	ldrh	r2, [r3, #0]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	835a      	strh	r2, [r3, #26]
 80095c6:	e015      	b.n	80095f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	211a      	movs	r1, #26
 80095ce:	fb01 f303 	mul.w	r3, r1, r3
 80095d2:	4413      	add	r3, r2
 80095d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	211a      	movs	r1, #26
 80095e4:	fb01 f303 	mul.w	r3, r1, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80095ee:	881a      	ldrh	r2, [r3, #0]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	211a      	movs	r1, #26
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
 80095fe:	4413      	add	r3, r2
 8009600:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	b25b      	sxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	da16      	bge.n	800963a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	211a      	movs	r1, #26
 8009612:	fb01 f303 	mul.w	r3, r1, r3
 8009616:	4413      	add	r3, r2
 8009618:	f203 3356 	addw	r3, r3, #854	; 0x356
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	211a      	movs	r1, #26
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	4413      	add	r3, r2
 800962e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009632:	881a      	ldrh	r2, [r3, #0]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	835a      	strh	r2, [r3, #26]
 8009638:	e015      	b.n	8009666 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	211a      	movs	r1, #26
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	4413      	add	r3, r2
 8009646:	f203 3356 	addw	r3, r3, #854	; 0x356
 800964a:	781a      	ldrb	r2, [r3, #0]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	211a      	movs	r1, #26
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	4413      	add	r3, r2
 800965c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009660:	881a      	ldrh	r2, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	7b9b      	ldrb	r3, [r3, #14]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 fd8e 	bl	800b18e <USBH_AllocPipe>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	7bdb      	ldrb	r3, [r3, #15]
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 fd84 	bl	800b18e <USBH_AllocPipe>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	7b59      	ldrb	r1, [r3, #13]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	7b98      	ldrb	r0, [r3, #14]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	8b12      	ldrh	r2, [r2, #24]
 80096a6:	9202      	str	r2, [sp, #8]
 80096a8:	2202      	movs	r2, #2
 80096aa:	9201      	str	r2, [sp, #4]
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	4623      	mov	r3, r4
 80096b0:	4602      	mov	r2, r0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f001 fd3c 	bl	800b130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	7b19      	ldrb	r1, [r3, #12]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	7bd8      	ldrb	r0, [r3, #15]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	8b52      	ldrh	r2, [r2, #26]
 80096d0:	9202      	str	r2, [sp, #8]
 80096d2:	2202      	movs	r2, #2
 80096d4:	9201      	str	r2, [sp, #4]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	4623      	mov	r3, r4
 80096da:	4602      	mov	r2, r0
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 fd27 	bl	800b130 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	7b5b      	ldrb	r3, [r3, #13]
 80096ee:	2200      	movs	r2, #0
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f002 f830 	bl	800b758 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	7b1b      	ldrb	r3, [r3, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f002 f829 	bl	800b758 <USBH_LL_SetToggle>

  return USBH_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	bd90      	pop	{r4, r7, pc}

08009710 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f001 fd1c 	bl	800b16e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fd47 	bl	800b1d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	7b1b      	ldrb	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00e      	beq.n	800976e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	7b1b      	ldrb	r3, [r3, #12]
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f001 fd09 	bl	800b16e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	7b1b      	ldrb	r3, [r3, #12]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 fd34 	bl	800b1d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	7b5b      	ldrb	r3, [r3, #13]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	7b5b      	ldrb	r3, [r3, #13]
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 fcf6 	bl	800b16e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7b5b      	ldrb	r3, [r3, #13]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fd21 	bl	800b1d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f002 f88d 	bl	800b8c8 <free>
    phost->pActiveClass->pData = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097b4:	2200      	movs	r2, #0
 80097b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3340      	adds	r3, #64	; 0x40
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f8b1 	bl	8009942 <GetLineCoding>
 80097e0:	4603      	mov	r3, r0
 80097e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f0:	2102      	movs	r1, #2
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80097f6:	7afb      	ldrb	r3, [r7, #11]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009808:	2301      	movs	r3, #1
 800980a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009820:	2b04      	cmp	r3, #4
 8009822:	d877      	bhi.n	8009914 <USBH_CDC_Process+0x114>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <USBH_CDC_Process+0x2c>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	08009841 	.word	0x08009841
 8009830:	08009847 	.word	0x08009847
 8009834:	08009877 	.word	0x08009877
 8009838:	080098eb 	.word	0x080098eb
 800983c:	080098f9 	.word	0x080098f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
      break;
 8009844:	e06d      	b.n	8009922 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f897 	bl	8009980 <SetLineCoding>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d104      	bne.n	8009866 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009864:	e058      	b.n	8009918 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d055      	beq.n	8009918 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2204      	movs	r2, #4
 8009870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009874:	e050      	b.n	8009918 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3340      	adds	r3, #64	; 0x40
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f860 	bl	8009942 <GetLineCoding>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d126      	bne.n	80098da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d13b      	bne.n	800991c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d133      	bne.n	800991c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d12b      	bne.n	800991c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d124      	bne.n	800991c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f95a 	bl	8009b8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80098d8:	e020      	b.n	800991c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d01d      	beq.n	800991c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2204      	movs	r2, #4
 80098e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80098e8:	e018      	b.n	800991c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f867 	bl	80099be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f8dc 	bl	8009aae <CDC_ProcessReception>
      break;
 80098f6:	e014      	b.n	8009922 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80098f8:	2100      	movs	r1, #0
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 ffe5 	bl	800a8ca <USBH_ClrFeature>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10a      	bne.n	8009920 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009912:	e005      	b.n	8009920 <USBH_CDC_Process+0x120>

    default:
      break;
 8009914:	bf00      	nop
 8009916:	e004      	b.n	8009922 <USBH_CDC_Process+0x122>
      break;
 8009918:	bf00      	nop
 800991a:	e002      	b.n	8009922 <USBH_CDC_Process+0x122>
      break;
 800991c:	bf00      	nop
 800991e:	e000      	b.n	8009922 <USBH_CDC_Process+0x122>
      break;
 8009920:	bf00      	nop

  }

  return status;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	22a1      	movs	r2, #161	; 0xa1
 8009950:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2221      	movs	r2, #33	; 0x21
 8009956:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2207      	movs	r2, #7
 8009968:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2207      	movs	r2, #7
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 f98a 	bl	800ac8a <USBH_CtlReq>
 8009976:	4603      	mov	r3, r0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2221      	movs	r2, #33	; 0x21
 800998e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2220      	movs	r2, #32
 8009994:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2207      	movs	r2, #7
 80099a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	2207      	movs	r2, #7
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 f96b 	bl	800ac8a <USBH_CtlReq>
 80099b4:	4603      	mov	r3, r0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af02      	add	r7, sp, #8
 80099c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099d0:	2300      	movs	r3, #0
 80099d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d002      	beq.n	80099e4 <CDC_ProcessTransmission+0x26>
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d025      	beq.n	8009a2e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80099e2:	e060      	b.n	8009aa6 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	8b12      	ldrh	r2, [r2, #24]
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d90c      	bls.n	8009a0a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	69d9      	ldr	r1, [r3, #28]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8b1a      	ldrh	r2, [r3, #24]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	7b58      	ldrb	r0, [r3, #13]
 80099fc:	2301      	movs	r3, #1
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	4603      	mov	r3, r0
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f001 fb51 	bl	800b0aa <USBH_BulkSendData>
 8009a08:	e00c      	b.n	8009a24 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	7b58      	ldrb	r0, [r3, #13]
 8009a18:	2301      	movs	r3, #1
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fb43 	bl	800b0aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a2c:	e03b      	b.n	8009aa6 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	7b5b      	ldrb	r3, [r3, #13]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 fe65 	bl	800b704 <USBH_LL_GetURBState>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d128      	bne.n	8009a96 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	8b12      	ldrh	r2, [r2, #24]
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d90e      	bls.n	8009a6e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	8b12      	ldrh	r2, [r2, #24]
 8009a58:	1a9a      	subs	r2, r3, r2
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	8b12      	ldrh	r2, [r2, #24]
 8009a66:	441a      	add	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	61da      	str	r2, [r3, #28]
 8009a6c:	e002      	b.n	8009a74 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d004      	beq.n	8009a86 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a84:	e00e      	b.n	8009aa4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f868 	bl	8009b64 <USBH_CDC_TransmitCallback>
      break;
 8009a94:	e006      	b.n	8009aa4 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a96:	7afb      	ldrb	r3, [r7, #11]
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d103      	bne.n	8009aa4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009aa4:	bf00      	nop
  }
}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b086      	sub	sp, #24
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d002      	beq.n	8009ad4 <CDC_ProcessReception+0x26>
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d00e      	beq.n	8009af0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009ad2:	e043      	b.n	8009b5c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	6a19      	ldr	r1, [r3, #32]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	8b5a      	ldrh	r2, [r3, #26]
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	7b1b      	ldrb	r3, [r3, #12]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 fb07 	bl	800b0f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2204      	movs	r2, #4
 8009aea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009aee:	e035      	b.n	8009b5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	7b1b      	ldrb	r3, [r3, #12]
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fe04 	bl	800b704 <USBH_LL_GetURBState>
 8009afc:	4603      	mov	r3, r0
 8009afe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009b00:	7cfb      	ldrb	r3, [r7, #19]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d129      	bne.n	8009b5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	7b1b      	ldrb	r3, [r3, #12]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 fd67 	bl	800b5e0 <USBH_LL_GetLastXferSize>
 8009b12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d016      	beq.n	8009b4c <CDC_ProcessReception+0x9e>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	8b5b      	ldrh	r3, [r3, #26]
 8009b22:	461a      	mov	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d910      	bls.n	8009b4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	1ad2      	subs	r2, r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2203      	movs	r2, #3
 8009b46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009b4a:	e006      	b.n	8009b5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f80f 	bl	8009b78 <USBH_CDC_ReceiveCallback>
      break;
 8009b5a:	bf00      	nop
  }
}
 8009b5c:	bf00      	nop
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e029      	b.n	8009c0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	79fa      	ldrb	r2, [r7, #7]
 8009bbc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f81f 	bl	8009c14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f001 fc39 	bl	800b47c <USBH_LL_Init>

  return USBH_OK;
 8009c0a:	2300      	movs	r3, #0
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e009      	b.n	8009c3a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	33e0      	adds	r3, #224	; 0xe0
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	2200      	movs	r2, #0
 8009c32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b0e      	cmp	r3, #14
 8009c3e:	d9f2      	bls.n	8009c26 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c40:	2300      	movs	r3, #0
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e009      	b.n	8009c5a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c50:	2200      	movs	r2, #0
 8009c52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3301      	adds	r3, #1
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c60:	d3f1      	bcc.n	8009c46 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2240      	movs	r2, #64	; 0x40
 8009c86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d016      	beq.n	8009cfe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10e      	bne.n	8009cf8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009ce0:	1c59      	adds	r1, r3, #1
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	33de      	adds	r3, #222	; 0xde
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
 8009cf6:	e004      	b.n	8009d02 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	73fb      	strb	r3, [r7, #15]
 8009cfc:	e001      	b.n	8009d02 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d204      	bcs.n	8009d36 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009d34:	e001      	b.n	8009d3a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009d36:	2302      	movs	r3, #2
 8009d38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b087      	sub	sp, #28
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	4608      	mov	r0, r1
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	70fb      	strb	r3, [r7, #3]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	70bb      	strb	r3, [r7, #2]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d70:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d72:	e025      	b.n	8009dc0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	221a      	movs	r2, #26
 8009d78:	fb02 f303 	mul.w	r3, r2, r3
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4413      	add	r3, r2
 8009d82:	3302      	adds	r3, #2
 8009d84:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	795b      	ldrb	r3, [r3, #5]
 8009d8a:	78fa      	ldrb	r2, [r7, #3]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d002      	beq.n	8009d96 <USBH_FindInterface+0x4e>
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	2bff      	cmp	r3, #255	; 0xff
 8009d94:	d111      	bne.n	8009dba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d9a:	78ba      	ldrb	r2, [r7, #2]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d002      	beq.n	8009da6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009da0:	78bb      	ldrb	r3, [r7, #2]
 8009da2:	2bff      	cmp	r3, #255	; 0xff
 8009da4:	d109      	bne.n	8009dba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009daa:	787a      	ldrb	r2, [r7, #1]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d002      	beq.n	8009db6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009db0:	787b      	ldrb	r3, [r7, #1]
 8009db2:	2bff      	cmp	r3, #255	; 0xff
 8009db4:	d101      	bne.n	8009dba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	e006      	b.n	8009dc8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d9d6      	bls.n	8009d74 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009dc6:	23ff      	movs	r3, #255	; 0xff
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 fb89 	bl	800b4f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009de2:	2101      	movs	r1, #1
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fca0 	bl	800b72a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af04      	add	r7, sp, #16
 8009dfa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d102      	bne.n	8009e16 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2203      	movs	r2, #3
 8009e14:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b0b      	cmp	r3, #11
 8009e1e:	f200 81b3 	bhi.w	800a188 <USBH_Process+0x394>
 8009e22:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <USBH_Process+0x34>)
 8009e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e28:	08009e59 	.word	0x08009e59
 8009e2c:	08009e8b 	.word	0x08009e8b
 8009e30:	08009ef3 	.word	0x08009ef3
 8009e34:	0800a123 	.word	0x0800a123
 8009e38:	0800a189 	.word	0x0800a189
 8009e3c:	08009f97 	.word	0x08009f97
 8009e40:	0800a0c9 	.word	0x0800a0c9
 8009e44:	08009fcd 	.word	0x08009fcd
 8009e48:	08009fed 	.word	0x08009fed
 8009e4c:	0800a00d 	.word	0x0800a00d
 8009e50:	0800a03b 	.word	0x0800a03b
 8009e54:	0800a10b 	.word	0x0800a10b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8193 	beq.w	800a18c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e6c:	20c8      	movs	r0, #200	; 0xc8
 8009e6e:	f001 fca6 	bl	800b7be <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 fb99 	bl	800b5aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e88:	e180      	b.n	800a18c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d107      	bne.n	8009ea4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009ea2:	e182      	b.n	800a1aa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eae:	d914      	bls.n	8009eda <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	d903      	bls.n	8009ed2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	220d      	movs	r2, #13
 8009ece:	701a      	strb	r2, [r3, #0]
      break;
 8009ed0:	e16b      	b.n	800a1aa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
      break;
 8009ed8:	e167      	b.n	800a1aa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ee0:	f103 020a 	add.w	r2, r3, #10
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009eea:	200a      	movs	r0, #10
 8009eec:	f001 fc67 	bl	800b7be <USBH_Delay>
      break;
 8009ef0:	e15b      	b.n	800a1aa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f02:	2104      	movs	r1, #4
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009f08:	2064      	movs	r0, #100	; 0x64
 8009f0a:	f001 fc58 	bl	800b7be <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 fb26 	bl	800b560 <USBH_LL_GetSpeed>
 8009f14:	4603      	mov	r3, r0
 8009f16:	461a      	mov	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2205      	movs	r2, #5
 8009f22:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009f24:	2100      	movs	r1, #0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 f931 	bl	800b18e <USBH_AllocPipe>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009f34:	2180      	movs	r1, #128	; 0x80
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f929 	bl	800b18e <USBH_AllocPipe>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	7919      	ldrb	r1, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	9202      	str	r2, [sp, #8]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	9201      	str	r2, [sp, #4]
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	4603      	mov	r3, r0
 8009f64:	2280      	movs	r2, #128	; 0x80
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 f8e2 	bl	800b130 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7959      	ldrb	r1, [r3, #5]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f80:	b292      	uxth	r2, r2
 8009f82:	9202      	str	r2, [sp, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	9201      	str	r2, [sp, #4]
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 f8ce 	bl	800b130 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f94:	e109      	b.n	800a1aa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f90c 	bl	800a1b4 <USBH_HandleEnum>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f040 80f3 	bne.w	800a190 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d103      	bne.n	8009fc4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2208      	movs	r2, #8
 8009fc0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009fc2:	e0e5      	b.n	800a190 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2207      	movs	r2, #7
 8009fc8:	701a      	strb	r2, [r3, #0]
      break;
 8009fca:	e0e1      	b.n	800a190 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 80de 	beq.w	800a194 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fde:	2101      	movs	r1, #1
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009fea:	e0d3      	b.n	800a194 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fc20 	bl	800a83c <USBH_SetCfg>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f040 80ca 	bne.w	800a198 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2209      	movs	r2, #9
 800a008:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a00a:	e0c5      	b.n	800a198 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00b      	beq.n	800a032 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a01a:	2101      	movs	r1, #1
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fc30 	bl	800a882 <USBH_SetFeature>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	f040 80b9 	bne.w	800a19c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	220a      	movs	r2, #10
 800a02e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a030:	e0b4      	b.n	800a19c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	220a      	movs	r2, #10
 800a036:	701a      	strb	r2, [r3, #0]
      break;
 800a038:	e0b0      	b.n	800a19c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 80ad 	beq.w	800a1a0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
 800a052:	e016      	b.n	800a082 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a054:	7bfa      	ldrb	r2, [r7, #15]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	32de      	adds	r2, #222	; 0xde
 800a05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05e:	791a      	ldrb	r2, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a066:	429a      	cmp	r2, r3
 800a068:	d108      	bne.n	800a07c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a06a:	7bfa      	ldrb	r2, [r7, #15]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	32de      	adds	r2, #222	; 0xde
 800a070:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a07a:	e005      	b.n	800a088 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	3301      	adds	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d0e5      	beq.n	800a054 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d016      	beq.n	800a0c0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d109      	bne.n	800a0b8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2206      	movs	r2, #6
 800a0a8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0b0:	2103      	movs	r1, #3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0b6:	e073      	b.n	800a1a0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	220d      	movs	r2, #13
 800a0bc:	701a      	strb	r2, [r3, #0]
      break;
 800a0be:	e06f      	b.n	800a1a0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	220d      	movs	r2, #13
 800a0c4:	701a      	strb	r2, [r3, #0]
      break;
 800a0c6:	e06b      	b.n	800a1a0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d017      	beq.n	800a102 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	220b      	movs	r2, #11
 800a0ee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0f0:	e058      	b.n	800a1a4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d154      	bne.n	800a1a4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	220d      	movs	r2, #13
 800a0fe:	701a      	strb	r2, [r3, #0]
      break;
 800a100:	e050      	b.n	800a1a4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e04c      	b.n	800a1a4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d049      	beq.n	800a1a8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	4798      	blx	r3
      }
      break;
 800a120:	e042      	b.n	800a1a8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fd72 	bl	8009c14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a136:	2b00      	cmp	r3, #0
 800a138:	d009      	beq.n	800a14e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a15e:	2105      	movs	r1, #5
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d107      	bne.n	800a180 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff fe2b 	bl	8009dd4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a17e:	e014      	b.n	800a1aa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 f9b7 	bl	800b4f4 <USBH_LL_Start>
      break;
 800a186:	e010      	b.n	800a1aa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a188:	bf00      	nop
 800a18a:	e00e      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a18c:	bf00      	nop
 800a18e:	e00c      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a190:	bf00      	nop
 800a192:	e00a      	b.n	800a1aa <USBH_Process+0x3b6>
    break;
 800a194:	bf00      	nop
 800a196:	e008      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a198:	bf00      	nop
 800a19a:	e006      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a19c:	bf00      	nop
 800a19e:	e004      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a1a0:	bf00      	nop
 800a1a2:	e002      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a1a4:	bf00      	nop
 800a1a6:	e000      	b.n	800a1aa <USBH_Process+0x3b6>
      break;
 800a1a8:	bf00      	nop
  }
  return USBH_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af04      	add	r7, sp, #16
 800a1ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b07      	cmp	r3, #7
 800a1ca:	f200 81c1 	bhi.w	800a550 <USBH_HandleEnum+0x39c>
 800a1ce:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <USBH_HandleEnum+0x20>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a1f5 	.word	0x0800a1f5
 800a1d8:	0800a2b3 	.word	0x0800a2b3
 800a1dc:	0800a31d 	.word	0x0800a31d
 800a1e0:	0800a3ab 	.word	0x0800a3ab
 800a1e4:	0800a415 	.word	0x0800a415
 800a1e8:	0800a485 	.word	0x0800a485
 800a1ec:	0800a4cb 	.word	0x0800a4cb
 800a1f0:	0800a511 	.word	0x0800a511
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a1f4:	2108      	movs	r1, #8
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa50 	bl	800a69c <USBH_Get_DevDesc>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a200:	7bbb      	ldrb	r3, [r7, #14]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d130      	bne.n	800a268 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7919      	ldrb	r1, [r3, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a22a:	b292      	uxth	r2, r2
 800a22c:	9202      	str	r2, [sp, #8]
 800a22e:	2200      	movs	r2, #0
 800a230:	9201      	str	r2, [sp, #4]
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	4603      	mov	r3, r0
 800a236:	2280      	movs	r2, #128	; 0x80
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 ff79 	bl	800b130 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7959      	ldrb	r1, [r3, #5]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a252:	b292      	uxth	r2, r2
 800a254:	9202      	str	r2, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	9201      	str	r2, [sp, #4]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4603      	mov	r3, r0
 800a25e:	2200      	movs	r2, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 ff65 	bl	800b130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a266:	e175      	b.n	800a554 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a268:	7bbb      	ldrb	r3, [r7, #14]
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	f040 8172 	bne.w	800a554 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a276:	3301      	adds	r3, #1
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a286:	2b03      	cmp	r3, #3
 800a288:	d903      	bls.n	800a292 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	220d      	movs	r2, #13
 800a28e:	701a      	strb	r2, [r3, #0]
      break;
 800a290:	e160      	b.n	800a554 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	795b      	ldrb	r3, [r3, #5]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 ff99 	bl	800b1d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	791b      	ldrb	r3, [r3, #4]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 ff93 	bl	800b1d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	701a      	strb	r2, [r3, #0]
      break;
 800a2b0:	e150      	b.n	800a554 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a2b2:	2112      	movs	r1, #18
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f9f1 	bl	800a69c <USBH_Get_DevDesc>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d103      	bne.n	800a2cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2ca:	e145      	b.n	800a558 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	f040 8142 	bne.w	800a558 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d903      	bls.n	800a2f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	220d      	movs	r2, #13
 800a2f2:	701a      	strb	r2, [r3, #0]
      break;
 800a2f4:	e130      	b.n	800a558 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	795b      	ldrb	r3, [r3, #5]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 ff67 	bl	800b1d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	791b      	ldrb	r3, [r3, #4]
 800a306:	4619      	mov	r1, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 ff61 	bl	800b1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
      break;
 800a31a:	e11d      	b.n	800a558 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a31c:	2101      	movs	r1, #1
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa68 	bl	800a7f4 <USBH_SetAddress>
 800a324:	4603      	mov	r3, r0
 800a326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d132      	bne.n	800a394 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a32e:	2002      	movs	r0, #2
 800a330:	f001 fa45 	bl	800b7be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2203      	movs	r2, #3
 800a340:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	7919      	ldrb	r1, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a356:	b292      	uxth	r2, r2
 800a358:	9202      	str	r2, [sp, #8]
 800a35a:	2200      	movs	r2, #0
 800a35c:	9201      	str	r2, [sp, #4]
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	4603      	mov	r3, r0
 800a362:	2280      	movs	r2, #128	; 0x80
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fee3 	bl	800b130 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7959      	ldrb	r1, [r3, #5]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a37e:	b292      	uxth	r2, r2
 800a380:	9202      	str	r2, [sp, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	9201      	str	r2, [sp, #4]
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4603      	mov	r3, r0
 800a38a:	2200      	movs	r2, #0
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fecf 	bl	800b130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a392:	e0e3      	b.n	800a55c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	2b03      	cmp	r3, #3
 800a398:	f040 80e0 	bne.w	800a55c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	220d      	movs	r2, #13
 800a3a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	705a      	strb	r2, [r3, #1]
      break;
 800a3a8:	e0d8      	b.n	800a55c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a3aa:	2109      	movs	r1, #9
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f99d 	bl	800a6ec <USBH_Get_CfgDesc>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2204      	movs	r2, #4
 800a3c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3c2:	e0cd      	b.n	800a560 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	f040 80ca 	bne.w	800a560 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d903      	bls.n	800a3ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	220d      	movs	r2, #13
 800a3ea:	701a      	strb	r2, [r3, #0]
      break;
 800a3ec:	e0b8      	b.n	800a560 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	795b      	ldrb	r3, [r3, #5]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 feeb 	bl	800b1d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	791b      	ldrb	r3, [r3, #4]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fee5 	bl	800b1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	701a      	strb	r2, [r3, #0]
      break;
 800a412:	e0a5      	b.n	800a560 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f965 	bl	800a6ec <USBH_Get_CfgDesc>
 800a422:	4603      	mov	r3, r0
 800a424:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d103      	bne.n	800a434 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2205      	movs	r2, #5
 800a430:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a432:	e097      	b.n	800a564 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b03      	cmp	r3, #3
 800a438:	f040 8094 	bne.w	800a564 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a442:	3301      	adds	r3, #1
 800a444:	b2da      	uxtb	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a452:	2b03      	cmp	r3, #3
 800a454:	d903      	bls.n	800a45e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	220d      	movs	r2, #13
 800a45a:	701a      	strb	r2, [r3, #0]
      break;
 800a45c:	e082      	b.n	800a564 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	795b      	ldrb	r3, [r3, #5]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 feb3 	bl	800b1d0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	791b      	ldrb	r3, [r3, #4]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fead 	bl	800b1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
      break;
 800a482:	e06f      	b.n	800a564 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d019      	beq.n	800a4c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a49a:	23ff      	movs	r3, #255	; 0xff
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f949 	bl	800a734 <USBH_Get_StringDesc>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d103      	bne.n	800a4b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2206      	movs	r2, #6
 800a4b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a4b2:	e059      	b.n	800a568 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d156      	bne.n	800a568 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2206      	movs	r2, #6
 800a4be:	705a      	strb	r2, [r3, #1]
      break;
 800a4c0:	e052      	b.n	800a568 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2206      	movs	r2, #6
 800a4c6:	705a      	strb	r2, [r3, #1]
      break;
 800a4c8:	e04e      	b.n	800a568 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d019      	beq.n	800a508 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4e0:	23ff      	movs	r3, #255	; 0xff
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f926 	bl	800a734 <USBH_Get_StringDesc>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d103      	bne.n	800a4fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2207      	movs	r2, #7
 800a4f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a4f8:	e038      	b.n	800a56c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d135      	bne.n	800a56c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2207      	movs	r2, #7
 800a504:	705a      	strb	r2, [r3, #1]
      break;
 800a506:	e031      	b.n	800a56c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2207      	movs	r2, #7
 800a50c:	705a      	strb	r2, [r3, #1]
      break;
 800a50e:	e02d      	b.n	800a56c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a516:	2b00      	cmp	r3, #0
 800a518:	d017      	beq.n	800a54a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a526:	23ff      	movs	r3, #255	; 0xff
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f903 	bl	800a734 <USBH_Get_StringDesc>
 800a52e:	4603      	mov	r3, r0
 800a530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a53c:	e018      	b.n	800a570 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b03      	cmp	r3, #3
 800a542:	d115      	bne.n	800a570 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
      break;
 800a548:	e012      	b.n	800a570 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
      break;
 800a54e:	e00f      	b.n	800a570 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a550:	bf00      	nop
 800a552:	e00e      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a554:	bf00      	nop
 800a556:	e00c      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a558:	bf00      	nop
 800a55a:	e00a      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a55c:	bf00      	nop
 800a55e:	e008      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a560:	bf00      	nop
 800a562:	e006      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a564:	bf00      	nop
 800a566:	e004      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a568:	bf00      	nop
 800a56a:	e002      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a56c:	bf00      	nop
 800a56e:	e000      	b.n	800a572 <USBH_HandleEnum+0x3be>
      break;
 800a570:	bf00      	nop
  }
  return Status;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f804 	bl	800a5be <USBH_HandleSof>
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b0b      	cmp	r3, #11
 800a5ce:	d10a      	bne.n	800a5e6 <USBH_HandleSof+0x28>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d005      	beq.n	800a5e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b083      	sub	sp, #12
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a5fe:	bf00      	nop
}
 800a600:	370c      	adds	r7, #12
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a61a:	bf00      	nop
}
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 ff58 	bl	800b52a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	791b      	ldrb	r3, [r3, #4]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fda5 	bl	800b1d0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	795b      	ldrb	r3, [r3, #5]
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fd9f 	bl	800b1d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f864 	bl	800a78a <USBH_GetDescriptor>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a6d8:	78fa      	ldrb	r2, [r7, #3]
 800a6da:	b292      	uxth	r2, r2
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f000 f918 	bl	800a912 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	331c      	adds	r3, #28
 800a6fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a6fe:	887b      	ldrh	r3, [r7, #2]
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a708:	2100      	movs	r1, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f83d 	bl	800a78a <USBH_GetDescriptor>
 800a710:	4603      	mov	r3, r0
 800a712:	72fb      	strb	r3, [r7, #11]
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d107      	bne.n	800a72a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a720:	887a      	ldrh	r2, [r7, #2]
 800a722:	68f9      	ldr	r1, [r7, #12]
 800a724:	4618      	mov	r0, r3
 800a726:	f000 f964 	bl	800a9f2 <USBH_ParseCfgDesc>
  }

  return status;
 800a72a:	7afb      	ldrb	r3, [r7, #11]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af02      	add	r7, sp, #8
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	461a      	mov	r2, r3
 800a740:	460b      	mov	r3, r1
 800a742:	72fb      	strb	r3, [r7, #11]
 800a744:	4613      	mov	r3, r2
 800a746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a748:	7afb      	ldrb	r3, [r7, #11]
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a750:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a758:	893b      	ldrh	r3, [r7, #8]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	460b      	mov	r3, r1
 800a75e:	2100      	movs	r1, #0
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f812 	bl	800a78a <USBH_GetDescriptor>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d107      	bne.n	800a780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a776:	893a      	ldrh	r2, [r7, #8]
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fa37 	bl	800abee <USBH_ParseStringDesc>
  }

  return status;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	72fb      	strb	r3, [r7, #11]
 800a798:	4613      	mov	r3, r2
 800a79a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	789b      	ldrb	r3, [r3, #2]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d11c      	bne.n	800a7de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a7a4:	7afb      	ldrb	r3, [r7, #11]
 800a7a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2206      	movs	r2, #6
 800a7b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	893a      	ldrh	r2, [r7, #8]
 800a7ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a7bc:	893b      	ldrh	r3, [r7, #8]
 800a7be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c6:	d104      	bne.n	800a7d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f240 4209 	movw	r2, #1033	; 0x409
 800a7ce:	829a      	strh	r2, [r3, #20]
 800a7d0:	e002      	b.n	800a7d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8b3a      	ldrh	r2, [r7, #24]
 800a7dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a7de:	8b3b      	ldrh	r3, [r7, #24]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	68f8      	ldr	r0, [r7, #12]
 800a7e6:	f000 fa50 	bl	800ac8a <USBH_CtlReq>
 800a7ea:	4603      	mov	r3, r0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	789b      	ldrb	r3, [r3, #2]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d10f      	bne.n	800a828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2205      	movs	r2, #5
 800a812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	b29a      	uxth	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a828:	2200      	movs	r2, #0
 800a82a:	2100      	movs	r1, #0
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fa2c 	bl	800ac8a <USBH_CtlReq>
 800a832:	4603      	mov	r3, r0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	789b      	ldrb	r3, [r3, #2]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10e      	bne.n	800a86e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2209      	movs	r2, #9
 800a85a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	887a      	ldrh	r2, [r7, #2]
 800a860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a86e:	2200      	movs	r2, #0
 800a870:	2100      	movs	r1, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa09 	bl	800ac8a <USBH_CtlReq>
 800a878:	4603      	mov	r3, r0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	789b      	ldrb	r3, [r3, #2]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d10f      	bne.n	800a8b6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2203      	movs	r2, #3
 800a8a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9e5 	bl	800ac8a <USBH_CtlReq>
 800a8c0:	4603      	mov	r3, r0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	789b      	ldrb	r3, [r3, #2]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d10f      	bne.n	800a8fe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a8fe:	2200      	movs	r2, #0
 800a900:	2100      	movs	r1, #0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f9c1 	bl	800ac8a <USBH_CtlReq>
 800a908:	4603      	mov	r3, r0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a912:	b480      	push	{r7}
 800a914:	b085      	sub	sp, #20
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	4613      	mov	r3, r2
 800a91e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	785a      	ldrb	r2, [r3, #1]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	3302      	adds	r3, #2
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	b29a      	uxth	r2, r3
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	3303      	adds	r3, #3
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	b29b      	uxth	r3, r3
 800a944:	4313      	orrs	r3, r2
 800a946:	b29a      	uxth	r2, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	791a      	ldrb	r2, [r3, #4]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	795a      	ldrb	r2, [r3, #5]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	799a      	ldrb	r2, [r3, #6]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	79da      	ldrb	r2, [r3, #7]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	2b08      	cmp	r3, #8
 800a970:	d939      	bls.n	800a9e6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	3308      	adds	r3, #8
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	b29a      	uxth	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	3309      	adds	r3, #9
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	b29b      	uxth	r3, r3
 800a982:	021b      	lsls	r3, r3, #8
 800a984:	b29b      	uxth	r3, r3
 800a986:	4313      	orrs	r3, r2
 800a988:	b29a      	uxth	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	330a      	adds	r3, #10
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b29a      	uxth	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	330b      	adds	r3, #11
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	021b      	lsls	r3, r3, #8
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	330d      	adds	r3, #13
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	021b      	lsls	r3, r3, #8
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	7b9a      	ldrb	r2, [r3, #14]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	7bda      	ldrb	r2, [r3, #15]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	7c1a      	ldrb	r2, [r3, #16]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	7c5a      	ldrb	r2, [r3, #17]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	745a      	strb	r2, [r3, #17]
  }
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b08a      	sub	sp, #40	; 0x28
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	781a      	ldrb	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	785a      	ldrb	r2, [r3, #1]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	3302      	adds	r3, #2
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	3303      	adds	r3, #3
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	021b      	lsls	r3, r3, #8
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	791a      	ldrb	r2, [r3, #4]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	795a      	ldrb	r2, [r3, #5]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	799a      	ldrb	r2, [r3, #6]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	79da      	ldrb	r2, [r3, #7]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	7a1a      	ldrb	r2, [r3, #8]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aa68:	88fb      	ldrh	r3, [r7, #6]
 800aa6a:	2b09      	cmp	r3, #9
 800aa6c:	d95f      	bls.n	800ab2e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aa6e:	2309      	movs	r3, #9
 800aa70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa76:	e051      	b.n	800ab1c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa78:	f107 0316 	add.w	r3, r7, #22
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa80:	f000 f8e8 	bl	800ac54 <USBH_GetNextDesc>
 800aa84:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	785b      	ldrb	r3, [r3, #1]
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	d146      	bne.n	800ab1c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aa8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa92:	221a      	movs	r2, #26
 800aa94:	fb02 f303 	mul.w	r3, r2, r3
 800aa98:	3308      	adds	r3, #8
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	3302      	adds	r3, #2
 800aaa0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aaa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaa4:	69f8      	ldr	r0, [r7, #28]
 800aaa6:	f000 f846 	bl	800ab36 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aab4:	e022      	b.n	800aafc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aab6:	f107 0316 	add.w	r3, r7, #22
 800aaba:	4619      	mov	r1, r3
 800aabc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aabe:	f000 f8c9 	bl	800ac54 <USBH_GetNextDesc>
 800aac2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac6:	785b      	ldrb	r3, [r3, #1]
 800aac8:	2b05      	cmp	r3, #5
 800aaca:	d117      	bne.n	800aafc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aacc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aad0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aad4:	3201      	adds	r2, #1
 800aad6:	00d2      	lsls	r2, r2, #3
 800aad8:	211a      	movs	r1, #26
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	4413      	add	r3, r2
 800aae0:	3308      	adds	r3, #8
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	3304      	adds	r3, #4
 800aae8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800aaea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aaec:	69b8      	ldr	r0, [r7, #24]
 800aaee:	f000 f851 	bl	800ab94 <USBH_ParseEPDesc>
            ep_ix++;
 800aaf2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	791b      	ldrb	r3, [r3, #4]
 800ab00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d204      	bcs.n	800ab12 <USBH_ParseCfgDesc+0x120>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	885a      	ldrh	r2, [r3, #2]
 800ab0c:	8afb      	ldrh	r3, [r7, #22]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d8d1      	bhi.n	800aab6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ab12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab16:	3301      	adds	r3, #1
 800ab18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d804      	bhi.n	800ab2e <USBH_ParseCfgDesc+0x13c>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	885a      	ldrh	r2, [r3, #2]
 800ab28:	8afb      	ldrh	r3, [r7, #22]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d8a4      	bhi.n	800aa78 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ab2e:	bf00      	nop
 800ab30:	3728      	adds	r7, #40	; 0x28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b083      	sub	sp, #12
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781a      	ldrb	r2, [r3, #0]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	785a      	ldrb	r2, [r3, #1]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	789a      	ldrb	r2, [r3, #2]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	78da      	ldrb	r2, [r3, #3]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	791a      	ldrb	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	795a      	ldrb	r2, [r3, #5]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	799a      	ldrb	r2, [r3, #6]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	79da      	ldrb	r2, [r3, #7]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	7a1a      	ldrb	r2, [r3, #8]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	721a      	strb	r2, [r3, #8]
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	785a      	ldrb	r2, [r3, #1]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	789a      	ldrb	r2, [r3, #2]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	78da      	ldrb	r2, [r3, #3]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	3304      	adds	r3, #4
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	3305      	adds	r3, #5
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	021b      	lsls	r3, r3, #8
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	4313      	orrs	r3, r2
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	799a      	ldrb	r2, [r3, #6]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	719a      	strb	r2, [r3, #6]
}
 800abe2:	bf00      	nop
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800abee:	b480      	push	{r7}
 800abf0:	b087      	sub	sp, #28
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	4613      	mov	r3, r2
 800abfa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	3301      	adds	r3, #1
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d120      	bne.n	800ac48 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	1e9a      	subs	r2, r3, #2
 800ac0c:	88fb      	ldrh	r3, [r7, #6]
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	bf28      	it	cs
 800ac12:	4613      	movcs	r3, r2
 800ac14:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3302      	adds	r3, #2
 800ac1a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	82fb      	strh	r3, [r7, #22]
 800ac20:	e00b      	b.n	800ac3a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ac22:	8afb      	ldrh	r3, [r7, #22]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4413      	add	r3, r2
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3301      	adds	r3, #1
 800ac32:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ac34:	8afb      	ldrh	r3, [r7, #22]
 800ac36:	3302      	adds	r3, #2
 800ac38:	82fb      	strh	r3, [r7, #22]
 800ac3a:	8afa      	ldrh	r2, [r7, #22]
 800ac3c:	8abb      	ldrh	r3, [r7, #20]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d3ef      	bcc.n	800ac22 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2200      	movs	r2, #0
 800ac46:	701a      	strb	r2, [r3, #0]
  }
}
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	881a      	ldrh	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	4413      	add	r3, r2
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4413      	add	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b086      	sub	sp, #24
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	60f8      	str	r0, [r7, #12]
 800ac92:	60b9      	str	r1, [r7, #8]
 800ac94:	4613      	mov	r3, r2
 800ac96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	789b      	ldrb	r3, [r3, #2]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d002      	beq.n	800acaa <USBH_CtlReq+0x20>
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d00f      	beq.n	800acc8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aca8:	e027      	b.n	800acfa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	88fa      	ldrh	r2, [r7, #6]
 800acb4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2201      	movs	r2, #1
 800acba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2202      	movs	r2, #2
 800acc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800acc2:	2301      	movs	r3, #1
 800acc4:	75fb      	strb	r3, [r7, #23]
      break;
 800acc6:	e018      	b.n	800acfa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 f81b 	bl	800ad04 <USBH_HandleControl>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <USBH_CtlReq+0x54>
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d106      	bne.n	800acec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	761a      	strb	r2, [r3, #24]
      break;
 800acea:	e005      	b.n	800acf8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d102      	bne.n	800acf8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	709a      	strb	r2, [r3, #2]
      break;
 800acf8:	bf00      	nop
  }
  return status;
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	7e1b      	ldrb	r3, [r3, #24]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	2b0a      	cmp	r3, #10
 800ad1c:	f200 8158 	bhi.w	800afd0 <USBH_HandleControl+0x2cc>
 800ad20:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <USBH_HandleControl+0x24>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800ad55 	.word	0x0800ad55
 800ad2c:	0800ad6f 	.word	0x0800ad6f
 800ad30:	0800add9 	.word	0x0800add9
 800ad34:	0800adff 	.word	0x0800adff
 800ad38:	0800ae37 	.word	0x0800ae37
 800ad3c:	0800ae63 	.word	0x0800ae63
 800ad40:	0800aeb5 	.word	0x0800aeb5
 800ad44:	0800aed7 	.word	0x0800aed7
 800ad48:	0800af13 	.word	0x0800af13
 800ad4c:	0800af3b 	.word	0x0800af3b
 800ad50:	0800af79 	.word	0x0800af79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f103 0110 	add.w	r1, r3, #16
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	795b      	ldrb	r3, [r3, #5]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f945 	bl	800aff0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	761a      	strb	r2, [r3, #24]
      break;
 800ad6c:	e13b      	b.n	800afe6 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	795b      	ldrb	r3, [r3, #5]
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fcc5 	bl	800b704 <USBH_LL_GetURBState>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d11e      	bne.n	800adc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7c1b      	ldrb	r3, [r3, #16]
 800ad88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	8adb      	ldrh	r3, [r3, #22]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad96:	7b7b      	ldrb	r3, [r7, #13]
 800ad98:	2b80      	cmp	r3, #128	; 0x80
 800ad9a:	d103      	bne.n	800ada4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2203      	movs	r2, #3
 800ada0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ada2:	e117      	b.n	800afd4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2205      	movs	r2, #5
 800ada8:	761a      	strb	r2, [r3, #24]
      break;
 800adaa:	e113      	b.n	800afd4 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800adac:	7b7b      	ldrb	r3, [r7, #13]
 800adae:	2b80      	cmp	r3, #128	; 0x80
 800adb0:	d103      	bne.n	800adba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2209      	movs	r2, #9
 800adb6:	761a      	strb	r2, [r3, #24]
      break;
 800adb8:	e10c      	b.n	800afd4 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2207      	movs	r2, #7
 800adbe:	761a      	strb	r2, [r3, #24]
      break;
 800adc0:	e108      	b.n	800afd4 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d003      	beq.n	800add0 <USBH_HandleControl+0xcc>
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	f040 8102 	bne.w	800afd4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	220b      	movs	r2, #11
 800add4:	761a      	strb	r2, [r3, #24]
      break;
 800add6:	e0fd      	b.n	800afd4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adde:	b29a      	uxth	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6899      	ldr	r1, [r3, #8]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	899a      	ldrh	r2, [r3, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	791b      	ldrb	r3, [r3, #4]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f93c 	bl	800b06e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2204      	movs	r2, #4
 800adfa:	761a      	strb	r2, [r3, #24]
      break;
 800adfc:	e0f3      	b.n	800afe6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	791b      	ldrb	r3, [r3, #4]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fc7d 	bl	800b704 <USBH_LL_GetURBState>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d102      	bne.n	800ae1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2209      	movs	r2, #9
 800ae18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	2b05      	cmp	r3, #5
 800ae1e:	d102      	bne.n	800ae26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ae20:	2303      	movs	r3, #3
 800ae22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae24:	e0d8      	b.n	800afd8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	f040 80d5 	bne.w	800afd8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	220b      	movs	r2, #11
 800ae32:	761a      	strb	r2, [r3, #24]
      break;
 800ae34:	e0d0      	b.n	800afd8 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6899      	ldr	r1, [r3, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	899a      	ldrh	r2, [r3, #12]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7958      	ldrb	r0, [r3, #5]
 800ae42:	2301      	movs	r3, #1
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	4603      	mov	r3, r0
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f8eb 	bl	800b024 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2206      	movs	r2, #6
 800ae5e:	761a      	strb	r2, [r3, #24]
      break;
 800ae60:	e0c1      	b.n	800afe6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	795b      	ldrb	r3, [r3, #5]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fc4b 	bl	800b704 <USBH_LL_GetURBState>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d103      	bne.n	800ae80 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2207      	movs	r2, #7
 800ae7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae7e:	e0ad      	b.n	800afdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d105      	bne.n	800ae92 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	220c      	movs	r2, #12
 800ae8a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae90:	e0a4      	b.n	800afdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae92:	7bbb      	ldrb	r3, [r7, #14]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d103      	bne.n	800aea0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	761a      	strb	r2, [r3, #24]
      break;
 800ae9e:	e09d      	b.n	800afdc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	f040 809a 	bne.w	800afdc <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	220b      	movs	r2, #11
 800aeac:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb2:	e093      	b.n	800afdc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	791b      	ldrb	r3, [r3, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	2100      	movs	r1, #0
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f8d6 	bl	800b06e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2208      	movs	r2, #8
 800aed2:	761a      	strb	r2, [r3, #24]

      break;
 800aed4:	e087      	b.n	800afe6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	791b      	ldrb	r3, [r3, #4]
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fc11 	bl	800b704 <USBH_LL_GetURBState>
 800aee2:	4603      	mov	r3, r0
 800aee4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d105      	bne.n	800aef8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	220d      	movs	r2, #13
 800aef0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aef6:	e073      	b.n	800afe0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d103      	bne.n	800af06 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	220b      	movs	r2, #11
 800af02:	761a      	strb	r2, [r3, #24]
      break;
 800af04:	e06c      	b.n	800afe0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	2b05      	cmp	r3, #5
 800af0a:	d169      	bne.n	800afe0 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800af0c:	2303      	movs	r3, #3
 800af0e:	73fb      	strb	r3, [r7, #15]
      break;
 800af10:	e066      	b.n	800afe0 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	795a      	ldrb	r2, [r3, #5]
 800af16:	2301      	movs	r3, #1
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	4613      	mov	r3, r2
 800af1c:	2200      	movs	r2, #0
 800af1e:	2100      	movs	r1, #0
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f87f 	bl	800b024 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	220a      	movs	r2, #10
 800af36:	761a      	strb	r2, [r3, #24]
      break;
 800af38:	e055      	b.n	800afe6 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	795b      	ldrb	r3, [r3, #5]
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fbdf 	bl	800b704 <USBH_LL_GetURBState>
 800af46:	4603      	mov	r3, r0
 800af48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800af4a:	7bbb      	ldrb	r3, [r7, #14]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d105      	bne.n	800af5c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	220d      	movs	r2, #13
 800af58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af5a:	e043      	b.n	800afe4 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af5c:	7bbb      	ldrb	r3, [r7, #14]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d103      	bne.n	800af6a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2209      	movs	r2, #9
 800af66:	761a      	strb	r2, [r3, #24]
      break;
 800af68:	e03c      	b.n	800afe4 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d139      	bne.n	800afe4 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	220b      	movs	r2, #11
 800af74:	761a      	strb	r2, [r3, #24]
      break;
 800af76:	e035      	b.n	800afe4 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	7e5b      	ldrb	r3, [r3, #25]
 800af7c:	3301      	adds	r3, #1
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	765a      	strb	r2, [r3, #25]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	7e5b      	ldrb	r3, [r3, #25]
 800af88:	2b02      	cmp	r3, #2
 800af8a:	d806      	bhi.n	800af9a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2201      	movs	r2, #1
 800af96:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af98:	e025      	b.n	800afe6 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800afa0:	2106      	movs	r1, #6
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	795b      	ldrb	r3, [r3, #5]
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f90c 	bl	800b1d0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	791b      	ldrb	r3, [r3, #4]
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f906 	bl	800b1d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800afca:	2302      	movs	r3, #2
 800afcc:	73fb      	strb	r3, [r7, #15]
      break;
 800afce:	e00a      	b.n	800afe6 <USBH_HandleControl+0x2e2>

    default:
      break;
 800afd0:	bf00      	nop
 800afd2:	e008      	b.n	800afe6 <USBH_HandleControl+0x2e2>
      break;
 800afd4:	bf00      	nop
 800afd6:	e006      	b.n	800afe6 <USBH_HandleControl+0x2e2>
      break;
 800afd8:	bf00      	nop
 800afda:	e004      	b.n	800afe6 <USBH_HandleControl+0x2e2>
      break;
 800afdc:	bf00      	nop
 800afde:	e002      	b.n	800afe6 <USBH_HandleControl+0x2e2>
      break;
 800afe0:	bf00      	nop
 800afe2:	e000      	b.n	800afe6 <USBH_HandleControl+0x2e2>
      break;
 800afe4:	bf00      	nop
  }

  return status;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af04      	add	r7, sp, #16
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800affe:	79f9      	ldrb	r1, [r7, #7]
 800b000:	2300      	movs	r3, #0
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	2308      	movs	r3, #8
 800b006:	9302      	str	r3, [sp, #8]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	9301      	str	r3, [sp, #4]
 800b00c:	2300      	movs	r3, #0
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	2300      	movs	r3, #0
 800b012:	2200      	movs	r2, #0
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 fb44 	bl	800b6a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b088      	sub	sp, #32
 800b028:	af04      	add	r7, sp, #16
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4611      	mov	r1, r2
 800b030:	461a      	mov	r2, r3
 800b032:	460b      	mov	r3, r1
 800b034:	80fb      	strh	r3, [r7, #6]
 800b036:	4613      	mov	r3, r2
 800b038:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b044:	2300      	movs	r3, #0
 800b046:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b048:	7979      	ldrb	r1, [r7, #5]
 800b04a:	7e3b      	ldrb	r3, [r7, #24]
 800b04c:	9303      	str	r3, [sp, #12]
 800b04e:	88fb      	ldrh	r3, [r7, #6]
 800b050:	9302      	str	r3, [sp, #8]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	2301      	movs	r3, #1
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	2300      	movs	r3, #0
 800b05c:	2200      	movs	r2, #0
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 fb1f 	bl	800b6a2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b088      	sub	sp, #32
 800b072:	af04      	add	r7, sp, #16
 800b074:	60f8      	str	r0, [r7, #12]
 800b076:	60b9      	str	r1, [r7, #8]
 800b078:	4611      	mov	r1, r2
 800b07a:	461a      	mov	r2, r3
 800b07c:	460b      	mov	r3, r1
 800b07e:	80fb      	strh	r3, [r7, #6]
 800b080:	4613      	mov	r3, r2
 800b082:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b084:	7979      	ldrb	r1, [r7, #5]
 800b086:	2300      	movs	r3, #0
 800b088:	9303      	str	r3, [sp, #12]
 800b08a:	88fb      	ldrh	r3, [r7, #6]
 800b08c:	9302      	str	r3, [sp, #8]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	2301      	movs	r3, #1
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	2300      	movs	r3, #0
 800b098:	2201      	movs	r2, #1
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f000 fb01 	bl	800b6a2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0a0:	2300      	movs	r3, #0

}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b088      	sub	sp, #32
 800b0ae:	af04      	add	r7, sp, #16
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	80fb      	strh	r3, [r7, #6]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0ce:	7979      	ldrb	r1, [r7, #5]
 800b0d0:	7e3b      	ldrb	r3, [r7, #24]
 800b0d2:	9303      	str	r3, [sp, #12]
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	9302      	str	r3, [sp, #8]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	2301      	movs	r3, #1
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 fadc 	bl	800b6a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af04      	add	r7, sp, #16
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	4611      	mov	r1, r2
 800b100:	461a      	mov	r2, r3
 800b102:	460b      	mov	r3, r1
 800b104:	80fb      	strh	r3, [r7, #6]
 800b106:	4613      	mov	r3, r2
 800b108:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b10a:	7979      	ldrb	r1, [r7, #5]
 800b10c:	2300      	movs	r3, #0
 800b10e:	9303      	str	r3, [sp, #12]
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	9302      	str	r3, [sp, #8]
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	2301      	movs	r3, #1
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	2302      	movs	r3, #2
 800b11e:	2201      	movs	r2, #1
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f000 fabe 	bl	800b6a2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af04      	add	r7, sp, #16
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	4608      	mov	r0, r1
 800b13a:	4611      	mov	r1, r2
 800b13c:	461a      	mov	r2, r3
 800b13e:	4603      	mov	r3, r0
 800b140:	70fb      	strb	r3, [r7, #3]
 800b142:	460b      	mov	r3, r1
 800b144:	70bb      	strb	r3, [r7, #2]
 800b146:	4613      	mov	r3, r2
 800b148:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b14a:	7878      	ldrb	r0, [r7, #1]
 800b14c:	78ba      	ldrb	r2, [r7, #2]
 800b14e:	78f9      	ldrb	r1, [r7, #3]
 800b150:	8b3b      	ldrh	r3, [r7, #24]
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	7d3b      	ldrb	r3, [r7, #20]
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	7c3b      	ldrb	r3, [r7, #16]
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	4603      	mov	r3, r0
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa51 	bl	800b606 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	460b      	mov	r3, r1
 800b178:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b17a:	78fb      	ldrb	r3, [r7, #3]
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fa70 	bl	800b664 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	460b      	mov	r3, r1
 800b198:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f836 	bl	800b20c <USBH_GetFreePipe>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b1a4:	89fb      	ldrh	r3, [r7, #14]
 800b1a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d00a      	beq.n	800b1c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b1ae:	78fa      	ldrb	r2, [r7, #3]
 800b1b0:	89fb      	ldrh	r3, [r7, #14]
 800b1b2:	f003 030f 	and.w	r3, r3, #15
 800b1b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	33e0      	adds	r3, #224	; 0xe0
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b1c4:	89fb      	ldrh	r3, [r7, #14]
 800b1c6:	b2db      	uxtb	r3, r3
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b1dc:	78fb      	ldrb	r3, [r7, #3]
 800b1de:	2b0a      	cmp	r3, #10
 800b1e0:	d80d      	bhi.n	800b1fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b1e2:	78fb      	ldrb	r3, [r7, #3]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	33e0      	adds	r3, #224	; 0xe0
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	78fb      	ldrb	r3, [r7, #3]
 800b1f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	33e0      	adds	r3, #224	; 0xe0
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	440b      	add	r3, r1
 800b1fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b218:	2300      	movs	r3, #0
 800b21a:	73fb      	strb	r3, [r7, #15]
 800b21c:	e00f      	b.n	800b23e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	33e0      	adds	r3, #224	; 0xe0
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d102      	bne.n	800b238 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	b29b      	uxth	r3, r3
 800b236:	e007      	b.n	800b248 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	3301      	adds	r3, #1
 800b23c:	73fb      	strb	r3, [r7, #15]
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	2b0a      	cmp	r3, #10
 800b242:	d9ec      	bls.n	800b21e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b244:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b258:	2201      	movs	r2, #1
 800b25a:	490e      	ldr	r1, [pc, #56]	; (800b294 <MX_USB_HOST_Init+0x40>)
 800b25c:	480e      	ldr	r0, [pc, #56]	; (800b298 <MX_USB_HOST_Init+0x44>)
 800b25e:	f7fe fc9f 	bl	8009ba0 <USBH_Init>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b268:	f7f5 fefe 	bl	8001068 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b26c:	490b      	ldr	r1, [pc, #44]	; (800b29c <MX_USB_HOST_Init+0x48>)
 800b26e:	480a      	ldr	r0, [pc, #40]	; (800b298 <MX_USB_HOST_Init+0x44>)
 800b270:	f7fe fd24 	bl	8009cbc <USBH_RegisterClass>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b27a:	f7f5 fef5 	bl	8001068 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b27e:	4806      	ldr	r0, [pc, #24]	; (800b298 <MX_USB_HOST_Init+0x44>)
 800b280:	f7fe fda8 	bl	8009dd4 <USBH_Start>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d001      	beq.n	800b28e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b28a:	f7f5 feed 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b28e:	bf00      	nop
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	0800b2b5 	.word	0x0800b2b5
 800b298:	200004a4 	.word	0x200004a4
 800b29c:	20000010 	.word	0x20000010

0800b2a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b2a4:	4802      	ldr	r0, [pc, #8]	; (800b2b0 <MX_USB_HOST_Process+0x10>)
 800b2a6:	f7fe fda5 	bl	8009df4 <USBH_Process>
}
 800b2aa:	bf00      	nop
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	200004a4 	.word	0x200004a4

0800b2b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	2b04      	cmp	r3, #4
 800b2c6:	d819      	bhi.n	800b2fc <USBH_UserProcess+0x48>
 800b2c8:	a201      	add	r2, pc, #4	; (adr r2, 800b2d0 <USBH_UserProcess+0x1c>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b2fd 	.word	0x0800b2fd
 800b2d4:	0800b2ed 	.word	0x0800b2ed
 800b2d8:	0800b2fd 	.word	0x0800b2fd
 800b2dc:	0800b2f5 	.word	0x0800b2f5
 800b2e0:	0800b2e5 	.word	0x0800b2e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b2e4:	4b09      	ldr	r3, [pc, #36]	; (800b30c <USBH_UserProcess+0x58>)
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	701a      	strb	r2, [r3, #0]
  break;
 800b2ea:	e008      	b.n	800b2fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b2ec:	4b07      	ldr	r3, [pc, #28]	; (800b30c <USBH_UserProcess+0x58>)
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	701a      	strb	r2, [r3, #0]
  break;
 800b2f2:	e004      	b.n	800b2fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b2f4:	4b05      	ldr	r3, [pc, #20]	; (800b30c <USBH_UserProcess+0x58>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	701a      	strb	r2, [r3, #0]
  break;
 800b2fa:	e000      	b.n	800b2fe <USBH_UserProcess+0x4a>

  default:
  break;
 800b2fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	20000100 	.word	0x20000100

0800b310 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	; 0x28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b318:	f107 0314 	add.w	r3, r7, #20
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	605a      	str	r2, [r3, #4]
 800b322:	609a      	str	r2, [r3, #8]
 800b324:	60da      	str	r2, [r3, #12]
 800b326:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b330:	d147      	bne.n	800b3c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b332:	2300      	movs	r3, #0
 800b334:	613b      	str	r3, [r7, #16]
 800b336:	4b25      	ldr	r3, [pc, #148]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33a:	4a24      	ldr	r2, [pc, #144]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b33c:	f043 0301 	orr.w	r3, r3, #1
 800b340:	6313      	str	r3, [r2, #48]	; 0x30
 800b342:	4b22      	ldr	r3, [pc, #136]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	613b      	str	r3, [r7, #16]
 800b34c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800b34e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b354:	2300      	movs	r3, #0
 800b356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b358:	2300      	movs	r3, #0
 800b35a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b35c:	f107 0314 	add.w	r3, r7, #20
 800b360:	4619      	mov	r1, r3
 800b362:	481b      	ldr	r0, [pc, #108]	; (800b3d0 <HAL_HCD_MspInit+0xc0>)
 800b364:	f7f7 fb44 	bl	80029f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800b368:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b36c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b36e:	2302      	movs	r3, #2
 800b370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b372:	2300      	movs	r3, #0
 800b374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b376:	2303      	movs	r3, #3
 800b378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b37a:	230a      	movs	r3, #10
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b37e:	f107 0314 	add.w	r3, r7, #20
 800b382:	4619      	mov	r1, r3
 800b384:	4812      	ldr	r0, [pc, #72]	; (800b3d0 <HAL_HCD_MspInit+0xc0>)
 800b386:	f7f7 fb33 	bl	80029f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b38a:	4b10      	ldr	r3, [pc, #64]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38e:	4a0f      	ldr	r2, [pc, #60]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b394:	6353      	str	r3, [r2, #52]	; 0x34
 800b396:	2300      	movs	r3, #0
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	4b0c      	ldr	r3, [pc, #48]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b39e:	4a0b      	ldr	r2, [pc, #44]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b3a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3a4:	6453      	str	r3, [r2, #68]	; 0x44
 800b3a6:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <HAL_HCD_MspInit+0xbc>)
 800b3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	2043      	movs	r0, #67	; 0x43
 800b3b8:	f7f7 f825 	bl	8002406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3bc:	2043      	movs	r0, #67	; 0x43
 800b3be:	f7f7 f83e 	bl	800243e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	3728      	adds	r7, #40	; 0x28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	40023800 	.word	0x40023800
 800b3d0:	40020000 	.word	0x40020000

0800b3d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff f8d9 	bl	800a59a <USBH_LL_IncTimer>
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff f911 	bl	800a626 <USBH_LL_Connect>
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7ff f91a 	bl	800a654 <USBH_LL_Disconnect>
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	70fb      	strb	r3, [r7, #3]
 800b434:	4613      	mov	r3, r2
 800b436:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff f8cb 	bl	800a5ee <USBH_LL_PortEnabled>
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff f8cb 	bl	800a60a <USBH_LL_PortDisabled>
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d12a      	bne.n	800b4e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b48e:	4a18      	ldr	r2, [pc, #96]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a15      	ldr	r2, [pc, #84]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b49a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b49e:	4b14      	ldr	r3, [pc, #80]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b4a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800b4a6:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4a8:	220c      	movs	r2, #12
 800b4aa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b4b2:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b4b8:	4b0d      	ldr	r3, [pc, #52]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b4be:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b4c4:	480a      	ldr	r0, [pc, #40]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4c6:	f7f7 fc3e 	bl	8002d46 <HAL_HCD_Init>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d001      	beq.n	800b4d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b4d0:	f7f5 fdca 	bl	8001068 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b4d4:	4806      	ldr	r0, [pc, #24]	; (800b4f0 <USBH_LL_Init+0x74>)
 800b4d6:	f7f8 f841 	bl	800355c <HAL_HCD_GetCurrentFrame>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff f84c 	bl	800a57c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	2000087c 	.word	0x2000087c

0800b4f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7f7 ffae 	bl	800346c <HAL_HCD_Start>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	4618      	mov	r0, r3
 800b518:	f000 f95c 	bl	800b7d4 <USBH_Get_USB_Status>
 800b51c:	4603      	mov	r3, r0
 800b51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b520:	7bbb      	ldrb	r3, [r7, #14]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b540:	4618      	mov	r0, r3
 800b542:	f7f7 ffb6 	bl	80034b2 <HAL_HCD_Stop>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 f941 	bl	800b7d4 <USBH_Get_USB_Status>
 800b552:	4603      	mov	r3, r0
 800b554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b556:	7bbb      	ldrb	r3, [r7, #14]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b568:	2301      	movs	r3, #1
 800b56a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b572:	4618      	mov	r0, r3
 800b574:	f7f8 f800 	bl	8003578 <HAL_HCD_GetCurrentSpeed>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d007      	beq.n	800b58e <USBH_LL_GetSpeed+0x2e>
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d302      	bcc.n	800b588 <USBH_LL_GetSpeed+0x28>
 800b582:	2b02      	cmp	r3, #2
 800b584:	d006      	beq.n	800b594 <USBH_LL_GetSpeed+0x34>
 800b586:	e008      	b.n	800b59a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]
    break;
 800b58c:	e008      	b.n	800b5a0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b58e:	2301      	movs	r3, #1
 800b590:	73fb      	strb	r3, [r7, #15]
    break;
 800b592:	e005      	b.n	800b5a0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b594:	2302      	movs	r3, #2
 800b596:	73fb      	strb	r3, [r7, #15]
    break;
 800b598:	e002      	b.n	800b5a0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b59a:	2301      	movs	r3, #1
 800b59c:	73fb      	strb	r3, [r7, #15]
    break;
 800b59e:	bf00      	nop
  }
  return  speed;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7f7 ff93 	bl	80034ec <HAL_HCD_ResetPort>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 f901 	bl	800b7d4 <USBH_Get_USB_Status>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5f2:	78fa      	ldrb	r2, [r7, #3]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7f7 ff9b 	bl	8003532 <HAL_HCD_HC_GetXferCount>
 800b5fc:	4603      	mov	r3, r0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b606:	b590      	push	{r4, r7, lr}
 800b608:	b089      	sub	sp, #36	; 0x24
 800b60a:	af04      	add	r7, sp, #16
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	461a      	mov	r2, r3
 800b614:	4603      	mov	r3, r0
 800b616:	70fb      	strb	r3, [r7, #3]
 800b618:	460b      	mov	r3, r1
 800b61a:	70bb      	strb	r3, [r7, #2]
 800b61c:	4613      	mov	r3, r2
 800b61e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b62e:	787c      	ldrb	r4, [r7, #1]
 800b630:	78ba      	ldrb	r2, [r7, #2]
 800b632:	78f9      	ldrb	r1, [r7, #3]
 800b634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b636:	9302      	str	r3, [sp, #8]
 800b638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b63c:	9301      	str	r3, [sp, #4]
 800b63e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4623      	mov	r3, r4
 800b646:	f7f7 fbe0 	bl	8002e0a <HAL_HCD_HC_Init>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b64e:	7bfb      	ldrb	r3, [r7, #15]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f8bf 	bl	800b7d4 <USBH_Get_USB_Status>
 800b656:	4603      	mov	r3, r0
 800b658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	bd90      	pop	{r4, r7, pc}

0800b664 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b67e:	78fa      	ldrb	r2, [r7, #3]
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7f7 fc59 	bl	8002f3a <HAL_HCD_HC_Halt>
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f8a0 	bl	800b7d4 <USBH_Get_USB_Status>
 800b694:	4603      	mov	r3, r0
 800b696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b698:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b6a2:	b590      	push	{r4, r7, lr}
 800b6a4:	b089      	sub	sp, #36	; 0x24
 800b6a6:	af04      	add	r7, sp, #16
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	4608      	mov	r0, r1
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	70fb      	strb	r3, [r7, #3]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70bb      	strb	r3, [r7, #2]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b6ca:	787c      	ldrb	r4, [r7, #1]
 800b6cc:	78ba      	ldrb	r2, [r7, #2]
 800b6ce:	78f9      	ldrb	r1, [r7, #3]
 800b6d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6d8:	9302      	str	r3, [sp, #8]
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	f7f7 fc4b 	bl	8002f80 <HAL_HCD_HC_SubmitRequest>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 f86f 	bl	800b7d4 <USBH_Get_USB_Status>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	bd90      	pop	{r4, r7, pc}

0800b704 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b716:	78fa      	ldrb	r2, [r7, #3]
 800b718:	4611      	mov	r1, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f7 fef4 	bl	8003508 <HAL_HCD_HC_GetURBState>
 800b720:	4603      	mov	r3, r0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d103      	bne.n	800b748 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f872 	bl	800b82c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b748:	20c8      	movs	r0, #200	; 0xc8
 800b74a:	f7f6 faed 	bl	8001d28 <HAL_Delay>
  return USBH_OK;
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
 800b764:	4613      	mov	r3, r2
 800b766:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b76e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	68f9      	ldr	r1, [r7, #12]
 800b774:	4613      	mov	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	440b      	add	r3, r1
 800b77e:	333b      	adds	r3, #59	; 0x3b
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	4613      	mov	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4413      	add	r3, r2
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	440b      	add	r3, r1
 800b794:	3350      	adds	r3, #80	; 0x50
 800b796:	78ba      	ldrb	r2, [r7, #2]
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	e009      	b.n	800b7b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b79c:	78fa      	ldrb	r2, [r7, #3]
 800b79e:	68f9      	ldr	r1, [r7, #12]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	440b      	add	r3, r1
 800b7aa:	3351      	adds	r3, #81	; 0x51
 800b7ac:	78ba      	ldrb	r2, [r7, #2]
 800b7ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7f6 faae 	bl	8001d28 <HAL_Delay>
}
 800b7cc:	bf00      	nop
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b7e2:	79fb      	ldrb	r3, [r7, #7]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d817      	bhi.n	800b818 <USBH_Get_USB_Status+0x44>
 800b7e8:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <USBH_Get_USB_Status+0x1c>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800b801 	.word	0x0800b801
 800b7f4:	0800b807 	.word	0x0800b807
 800b7f8:	0800b80d 	.word	0x0800b80d
 800b7fc:	0800b813 	.word	0x0800b813
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
    break;
 800b804:	e00b      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b806:	2302      	movs	r3, #2
 800b808:	73fb      	strb	r3, [r7, #15]
    break;
 800b80a:	e008      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b80c:	2301      	movs	r3, #1
 800b80e:	73fb      	strb	r3, [r7, #15]
    break;
 800b810:	e005      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b812:	2302      	movs	r3, #2
 800b814:	73fb      	strb	r3, [r7, #15]
    break;
 800b816:	e002      	b.n	800b81e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b818:	2302      	movs	r3, #2
 800b81a:	73fb      	strb	r3, [r7, #15]
    break;
 800b81c:	bf00      	nop
  }
  return usb_status;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b83a:	79fb      	ldrb	r3, [r7, #7]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b840:	2301      	movs	r3, #1
 800b842:	73fb      	strb	r3, [r7, #15]
 800b844:	e001      	b.n	800b84a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b846:	2300      	movs	r3, #0
 800b848:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800b84a:	7bfb      	ldrb	r3, [r7, #15]
 800b84c:	461a      	mov	r2, r3
 800b84e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b852:	4803      	ldr	r0, [pc, #12]	; (800b860 <MX_DriverVbusFS+0x34>)
 800b854:	f7f7 fa5e 	bl	8002d14 <HAL_GPIO_WritePin>
}
 800b858:	bf00      	nop
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	40021800 	.word	0x40021800

0800b864 <__errno>:
 800b864:	4b01      	ldr	r3, [pc, #4]	; (800b86c <__errno+0x8>)
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20000030 	.word	0x20000030

0800b870 <__libc_init_array>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4e0d      	ldr	r6, [pc, #52]	; (800b8a8 <__libc_init_array+0x38>)
 800b874:	4c0d      	ldr	r4, [pc, #52]	; (800b8ac <__libc_init_array+0x3c>)
 800b876:	1ba4      	subs	r4, r4, r6
 800b878:	10a4      	asrs	r4, r4, #2
 800b87a:	2500      	movs	r5, #0
 800b87c:	42a5      	cmp	r5, r4
 800b87e:	d109      	bne.n	800b894 <__libc_init_array+0x24>
 800b880:	4e0b      	ldr	r6, [pc, #44]	; (800b8b0 <__libc_init_array+0x40>)
 800b882:	4c0c      	ldr	r4, [pc, #48]	; (800b8b4 <__libc_init_array+0x44>)
 800b884:	f000 f8ea 	bl	800ba5c <_init>
 800b888:	1ba4      	subs	r4, r4, r6
 800b88a:	10a4      	asrs	r4, r4, #2
 800b88c:	2500      	movs	r5, #0
 800b88e:	42a5      	cmp	r5, r4
 800b890:	d105      	bne.n	800b89e <__libc_init_array+0x2e>
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b898:	4798      	blx	r3
 800b89a:	3501      	adds	r5, #1
 800b89c:	e7ee      	b.n	800b87c <__libc_init_array+0xc>
 800b89e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b8a2:	4798      	blx	r3
 800b8a4:	3501      	adds	r5, #1
 800b8a6:	e7f2      	b.n	800b88e <__libc_init_array+0x1e>
 800b8a8:	0800bac8 	.word	0x0800bac8
 800b8ac:	0800bac8 	.word	0x0800bac8
 800b8b0:	0800bac8 	.word	0x0800bac8
 800b8b4:	0800bacc 	.word	0x0800bacc

0800b8b8 <malloc>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <malloc+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f000 b861 	b.w	800b984 <_malloc_r>
 800b8c2:	bf00      	nop
 800b8c4:	20000030 	.word	0x20000030

0800b8c8 <free>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <free+0xc>)
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f000 b80b 	b.w	800b8e8 <_free_r>
 800b8d2:	bf00      	nop
 800b8d4:	20000030 	.word	0x20000030

0800b8d8 <memset>:
 800b8d8:	4402      	add	r2, r0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d100      	bne.n	800b8e2 <memset+0xa>
 800b8e0:	4770      	bx	lr
 800b8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e6:	e7f9      	b.n	800b8dc <memset+0x4>

0800b8e8 <_free_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	d045      	beq.n	800b97c <_free_r+0x94>
 800b8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8f4:	1f0c      	subs	r4, r1, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	bfb8      	it	lt
 800b8fa:	18e4      	addlt	r4, r4, r3
 800b8fc:	f000 f8ac 	bl	800ba58 <__malloc_lock>
 800b900:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <_free_r+0x98>)
 800b902:	6813      	ldr	r3, [r2, #0]
 800b904:	4610      	mov	r0, r2
 800b906:	b933      	cbnz	r3, 800b916 <_free_r+0x2e>
 800b908:	6063      	str	r3, [r4, #4]
 800b90a:	6014      	str	r4, [r2, #0]
 800b90c:	4628      	mov	r0, r5
 800b90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b912:	f000 b8a2 	b.w	800ba5a <__malloc_unlock>
 800b916:	42a3      	cmp	r3, r4
 800b918:	d90c      	bls.n	800b934 <_free_r+0x4c>
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	1862      	adds	r2, r4, r1
 800b91e:	4293      	cmp	r3, r2
 800b920:	bf04      	itt	eq
 800b922:	681a      	ldreq	r2, [r3, #0]
 800b924:	685b      	ldreq	r3, [r3, #4]
 800b926:	6063      	str	r3, [r4, #4]
 800b928:	bf04      	itt	eq
 800b92a:	1852      	addeq	r2, r2, r1
 800b92c:	6022      	streq	r2, [r4, #0]
 800b92e:	6004      	str	r4, [r0, #0]
 800b930:	e7ec      	b.n	800b90c <_free_r+0x24>
 800b932:	4613      	mov	r3, r2
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	b10a      	cbz	r2, 800b93c <_free_r+0x54>
 800b938:	42a2      	cmp	r2, r4
 800b93a:	d9fa      	bls.n	800b932 <_free_r+0x4a>
 800b93c:	6819      	ldr	r1, [r3, #0]
 800b93e:	1858      	adds	r0, r3, r1
 800b940:	42a0      	cmp	r0, r4
 800b942:	d10b      	bne.n	800b95c <_free_r+0x74>
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	4401      	add	r1, r0
 800b948:	1858      	adds	r0, r3, r1
 800b94a:	4282      	cmp	r2, r0
 800b94c:	6019      	str	r1, [r3, #0]
 800b94e:	d1dd      	bne.n	800b90c <_free_r+0x24>
 800b950:	6810      	ldr	r0, [r2, #0]
 800b952:	6852      	ldr	r2, [r2, #4]
 800b954:	605a      	str	r2, [r3, #4]
 800b956:	4401      	add	r1, r0
 800b958:	6019      	str	r1, [r3, #0]
 800b95a:	e7d7      	b.n	800b90c <_free_r+0x24>
 800b95c:	d902      	bls.n	800b964 <_free_r+0x7c>
 800b95e:	230c      	movs	r3, #12
 800b960:	602b      	str	r3, [r5, #0]
 800b962:	e7d3      	b.n	800b90c <_free_r+0x24>
 800b964:	6820      	ldr	r0, [r4, #0]
 800b966:	1821      	adds	r1, r4, r0
 800b968:	428a      	cmp	r2, r1
 800b96a:	bf04      	itt	eq
 800b96c:	6811      	ldreq	r1, [r2, #0]
 800b96e:	6852      	ldreq	r2, [r2, #4]
 800b970:	6062      	str	r2, [r4, #4]
 800b972:	bf04      	itt	eq
 800b974:	1809      	addeq	r1, r1, r0
 800b976:	6021      	streq	r1, [r4, #0]
 800b978:	605c      	str	r4, [r3, #4]
 800b97a:	e7c7      	b.n	800b90c <_free_r+0x24>
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	20000104 	.word	0x20000104

0800b984 <_malloc_r>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	1ccd      	adds	r5, r1, #3
 800b988:	f025 0503 	bic.w	r5, r5, #3
 800b98c:	3508      	adds	r5, #8
 800b98e:	2d0c      	cmp	r5, #12
 800b990:	bf38      	it	cc
 800b992:	250c      	movcc	r5, #12
 800b994:	2d00      	cmp	r5, #0
 800b996:	4606      	mov	r6, r0
 800b998:	db01      	blt.n	800b99e <_malloc_r+0x1a>
 800b99a:	42a9      	cmp	r1, r5
 800b99c:	d903      	bls.n	800b9a6 <_malloc_r+0x22>
 800b99e:	230c      	movs	r3, #12
 800b9a0:	6033      	str	r3, [r6, #0]
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	bd70      	pop	{r4, r5, r6, pc}
 800b9a6:	f000 f857 	bl	800ba58 <__malloc_lock>
 800b9aa:	4a21      	ldr	r2, [pc, #132]	; (800ba30 <_malloc_r+0xac>)
 800b9ac:	6814      	ldr	r4, [r2, #0]
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	b991      	cbnz	r1, 800b9d8 <_malloc_r+0x54>
 800b9b2:	4c20      	ldr	r4, [pc, #128]	; (800ba34 <_malloc_r+0xb0>)
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	b91b      	cbnz	r3, 800b9c0 <_malloc_r+0x3c>
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f000 f83d 	bl	800ba38 <_sbrk_r>
 800b9be:	6020      	str	r0, [r4, #0]
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f000 f838 	bl	800ba38 <_sbrk_r>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d124      	bne.n	800ba16 <_malloc_r+0x92>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	6033      	str	r3, [r6, #0]
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f000 f842 	bl	800ba5a <__malloc_unlock>
 800b9d6:	e7e4      	b.n	800b9a2 <_malloc_r+0x1e>
 800b9d8:	680b      	ldr	r3, [r1, #0]
 800b9da:	1b5b      	subs	r3, r3, r5
 800b9dc:	d418      	bmi.n	800ba10 <_malloc_r+0x8c>
 800b9de:	2b0b      	cmp	r3, #11
 800b9e0:	d90f      	bls.n	800ba02 <_malloc_r+0x7e>
 800b9e2:	600b      	str	r3, [r1, #0]
 800b9e4:	50cd      	str	r5, [r1, r3]
 800b9e6:	18cc      	adds	r4, r1, r3
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f000 f836 	bl	800ba5a <__malloc_unlock>
 800b9ee:	f104 000b 	add.w	r0, r4, #11
 800b9f2:	1d23      	adds	r3, r4, #4
 800b9f4:	f020 0007 	bic.w	r0, r0, #7
 800b9f8:	1ac3      	subs	r3, r0, r3
 800b9fa:	d0d3      	beq.n	800b9a4 <_malloc_r+0x20>
 800b9fc:	425a      	negs	r2, r3
 800b9fe:	50e2      	str	r2, [r4, r3]
 800ba00:	e7d0      	b.n	800b9a4 <_malloc_r+0x20>
 800ba02:	428c      	cmp	r4, r1
 800ba04:	684b      	ldr	r3, [r1, #4]
 800ba06:	bf16      	itet	ne
 800ba08:	6063      	strne	r3, [r4, #4]
 800ba0a:	6013      	streq	r3, [r2, #0]
 800ba0c:	460c      	movne	r4, r1
 800ba0e:	e7eb      	b.n	800b9e8 <_malloc_r+0x64>
 800ba10:	460c      	mov	r4, r1
 800ba12:	6849      	ldr	r1, [r1, #4]
 800ba14:	e7cc      	b.n	800b9b0 <_malloc_r+0x2c>
 800ba16:	1cc4      	adds	r4, r0, #3
 800ba18:	f024 0403 	bic.w	r4, r4, #3
 800ba1c:	42a0      	cmp	r0, r4
 800ba1e:	d005      	beq.n	800ba2c <_malloc_r+0xa8>
 800ba20:	1a21      	subs	r1, r4, r0
 800ba22:	4630      	mov	r0, r6
 800ba24:	f000 f808 	bl	800ba38 <_sbrk_r>
 800ba28:	3001      	adds	r0, #1
 800ba2a:	d0cf      	beq.n	800b9cc <_malloc_r+0x48>
 800ba2c:	6025      	str	r5, [r4, #0]
 800ba2e:	e7db      	b.n	800b9e8 <_malloc_r+0x64>
 800ba30:	20000104 	.word	0x20000104
 800ba34:	20000108 	.word	0x20000108

0800ba38 <_sbrk_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4c06      	ldr	r4, [pc, #24]	; (800ba54 <_sbrk_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4605      	mov	r5, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	f7f6 f888 	bl	8001b58 <_sbrk>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_sbrk_r+0x1a>
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_sbrk_r+0x1a>
 800ba50:	602b      	str	r3, [r5, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	20000b40 	.word	0x20000b40

0800ba58 <__malloc_lock>:
 800ba58:	4770      	bx	lr

0800ba5a <__malloc_unlock>:
 800ba5a:	4770      	bx	lr

0800ba5c <_init>:
 800ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5e:	bf00      	nop
 800ba60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba62:	bc08      	pop	{r3}
 800ba64:	469e      	mov	lr, r3
 800ba66:	4770      	bx	lr

0800ba68 <_fini>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	bf00      	nop
 800ba6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6e:	bc08      	pop	{r3}
 800ba70:	469e      	mov	lr, r3
 800ba72:	4770      	bx	lr
